
blinky_MorseCode_Transmitter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007d70  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  08007ef8  08007ef8  00017ef8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007f1c  08007f1c  00020090  2**0
                  CONTENTS
  4 .ARM          00000008  08007f1c  08007f1c  00017f1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007f24  08007f24  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007f24  08007f24  00017f24  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007f28  08007f28  00017f28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  08007f2c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020090  2**0
                  CONTENTS
 10 .bss          00000808  20000090  20000090  00020090  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000898  20000898  00020090  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001597f  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003752  00000000  00000000  00035a3f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001128  00000000  00000000  00039198  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000fd0  00000000  00000000  0003a2c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00023e27  00000000  00000000  0003b290  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00017446  00000000  00000000  0005f0b7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cb5fd  00000000  00000000  000764fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00141afa  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004930  00000000  00000000  00141b4c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000090 	.word	0x20000090
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08007ee0 	.word	0x08007ee0

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000094 	.word	0x20000094
 80001c4:	08007ee0 	.word	0x08007ee0

080001c8 <strlen>:
 80001c8:	4603      	mov	r3, r0
 80001ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ce:	2a00      	cmp	r2, #0
 80001d0:	d1fb      	bne.n	80001ca <strlen+0x2>
 80001d2:	1a18      	subs	r0, r3, r0
 80001d4:	3801      	subs	r0, #1
 80001d6:	4770      	bx	lr

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b974 	b.w	80004d8 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	4604      	mov	r4, r0
 8000210:	468e      	mov	lr, r1
 8000212:	2b00      	cmp	r3, #0
 8000214:	d14d      	bne.n	80002b2 <__udivmoddi4+0xaa>
 8000216:	428a      	cmp	r2, r1
 8000218:	4694      	mov	ip, r2
 800021a:	d969      	bls.n	80002f0 <__udivmoddi4+0xe8>
 800021c:	fab2 f282 	clz	r2, r2
 8000220:	b152      	cbz	r2, 8000238 <__udivmoddi4+0x30>
 8000222:	fa01 f302 	lsl.w	r3, r1, r2
 8000226:	f1c2 0120 	rsb	r1, r2, #32
 800022a:	fa20 f101 	lsr.w	r1, r0, r1
 800022e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000232:	ea41 0e03 	orr.w	lr, r1, r3
 8000236:	4094      	lsls	r4, r2
 8000238:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800023c:	0c21      	lsrs	r1, r4, #16
 800023e:	fbbe f6f8 	udiv	r6, lr, r8
 8000242:	fa1f f78c 	uxth.w	r7, ip
 8000246:	fb08 e316 	mls	r3, r8, r6, lr
 800024a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800024e:	fb06 f107 	mul.w	r1, r6, r7
 8000252:	4299      	cmp	r1, r3
 8000254:	d90a      	bls.n	800026c <__udivmoddi4+0x64>
 8000256:	eb1c 0303 	adds.w	r3, ip, r3
 800025a:	f106 30ff 	add.w	r0, r6, #4294967295
 800025e:	f080 811f 	bcs.w	80004a0 <__udivmoddi4+0x298>
 8000262:	4299      	cmp	r1, r3
 8000264:	f240 811c 	bls.w	80004a0 <__udivmoddi4+0x298>
 8000268:	3e02      	subs	r6, #2
 800026a:	4463      	add	r3, ip
 800026c:	1a5b      	subs	r3, r3, r1
 800026e:	b2a4      	uxth	r4, r4
 8000270:	fbb3 f0f8 	udiv	r0, r3, r8
 8000274:	fb08 3310 	mls	r3, r8, r0, r3
 8000278:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800027c:	fb00 f707 	mul.w	r7, r0, r7
 8000280:	42a7      	cmp	r7, r4
 8000282:	d90a      	bls.n	800029a <__udivmoddi4+0x92>
 8000284:	eb1c 0404 	adds.w	r4, ip, r4
 8000288:	f100 33ff 	add.w	r3, r0, #4294967295
 800028c:	f080 810a 	bcs.w	80004a4 <__udivmoddi4+0x29c>
 8000290:	42a7      	cmp	r7, r4
 8000292:	f240 8107 	bls.w	80004a4 <__udivmoddi4+0x29c>
 8000296:	4464      	add	r4, ip
 8000298:	3802      	subs	r0, #2
 800029a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800029e:	1be4      	subs	r4, r4, r7
 80002a0:	2600      	movs	r6, #0
 80002a2:	b11d      	cbz	r5, 80002ac <__udivmoddi4+0xa4>
 80002a4:	40d4      	lsrs	r4, r2
 80002a6:	2300      	movs	r3, #0
 80002a8:	e9c5 4300 	strd	r4, r3, [r5]
 80002ac:	4631      	mov	r1, r6
 80002ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b2:	428b      	cmp	r3, r1
 80002b4:	d909      	bls.n	80002ca <__udivmoddi4+0xc2>
 80002b6:	2d00      	cmp	r5, #0
 80002b8:	f000 80ef 	beq.w	800049a <__udivmoddi4+0x292>
 80002bc:	2600      	movs	r6, #0
 80002be:	e9c5 0100 	strd	r0, r1, [r5]
 80002c2:	4630      	mov	r0, r6
 80002c4:	4631      	mov	r1, r6
 80002c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ca:	fab3 f683 	clz	r6, r3
 80002ce:	2e00      	cmp	r6, #0
 80002d0:	d14a      	bne.n	8000368 <__udivmoddi4+0x160>
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d302      	bcc.n	80002dc <__udivmoddi4+0xd4>
 80002d6:	4282      	cmp	r2, r0
 80002d8:	f200 80f9 	bhi.w	80004ce <__udivmoddi4+0x2c6>
 80002dc:	1a84      	subs	r4, r0, r2
 80002de:	eb61 0303 	sbc.w	r3, r1, r3
 80002e2:	2001      	movs	r0, #1
 80002e4:	469e      	mov	lr, r3
 80002e6:	2d00      	cmp	r5, #0
 80002e8:	d0e0      	beq.n	80002ac <__udivmoddi4+0xa4>
 80002ea:	e9c5 4e00 	strd	r4, lr, [r5]
 80002ee:	e7dd      	b.n	80002ac <__udivmoddi4+0xa4>
 80002f0:	b902      	cbnz	r2, 80002f4 <__udivmoddi4+0xec>
 80002f2:	deff      	udf	#255	; 0xff
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	2a00      	cmp	r2, #0
 80002fa:	f040 8092 	bne.w	8000422 <__udivmoddi4+0x21a>
 80002fe:	eba1 010c 	sub.w	r1, r1, ip
 8000302:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000306:	fa1f fe8c 	uxth.w	lr, ip
 800030a:	2601      	movs	r6, #1
 800030c:	0c20      	lsrs	r0, r4, #16
 800030e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000312:	fb07 1113 	mls	r1, r7, r3, r1
 8000316:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800031a:	fb0e f003 	mul.w	r0, lr, r3
 800031e:	4288      	cmp	r0, r1
 8000320:	d908      	bls.n	8000334 <__udivmoddi4+0x12c>
 8000322:	eb1c 0101 	adds.w	r1, ip, r1
 8000326:	f103 38ff 	add.w	r8, r3, #4294967295
 800032a:	d202      	bcs.n	8000332 <__udivmoddi4+0x12a>
 800032c:	4288      	cmp	r0, r1
 800032e:	f200 80cb 	bhi.w	80004c8 <__udivmoddi4+0x2c0>
 8000332:	4643      	mov	r3, r8
 8000334:	1a09      	subs	r1, r1, r0
 8000336:	b2a4      	uxth	r4, r4
 8000338:	fbb1 f0f7 	udiv	r0, r1, r7
 800033c:	fb07 1110 	mls	r1, r7, r0, r1
 8000340:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000344:	fb0e fe00 	mul.w	lr, lr, r0
 8000348:	45a6      	cmp	lr, r4
 800034a:	d908      	bls.n	800035e <__udivmoddi4+0x156>
 800034c:	eb1c 0404 	adds.w	r4, ip, r4
 8000350:	f100 31ff 	add.w	r1, r0, #4294967295
 8000354:	d202      	bcs.n	800035c <__udivmoddi4+0x154>
 8000356:	45a6      	cmp	lr, r4
 8000358:	f200 80bb 	bhi.w	80004d2 <__udivmoddi4+0x2ca>
 800035c:	4608      	mov	r0, r1
 800035e:	eba4 040e 	sub.w	r4, r4, lr
 8000362:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000366:	e79c      	b.n	80002a2 <__udivmoddi4+0x9a>
 8000368:	f1c6 0720 	rsb	r7, r6, #32
 800036c:	40b3      	lsls	r3, r6
 800036e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000372:	ea4c 0c03 	orr.w	ip, ip, r3
 8000376:	fa20 f407 	lsr.w	r4, r0, r7
 800037a:	fa01 f306 	lsl.w	r3, r1, r6
 800037e:	431c      	orrs	r4, r3
 8000380:	40f9      	lsrs	r1, r7
 8000382:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000386:	fa00 f306 	lsl.w	r3, r0, r6
 800038a:	fbb1 f8f9 	udiv	r8, r1, r9
 800038e:	0c20      	lsrs	r0, r4, #16
 8000390:	fa1f fe8c 	uxth.w	lr, ip
 8000394:	fb09 1118 	mls	r1, r9, r8, r1
 8000398:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800039c:	fb08 f00e 	mul.w	r0, r8, lr
 80003a0:	4288      	cmp	r0, r1
 80003a2:	fa02 f206 	lsl.w	r2, r2, r6
 80003a6:	d90b      	bls.n	80003c0 <__udivmoddi4+0x1b8>
 80003a8:	eb1c 0101 	adds.w	r1, ip, r1
 80003ac:	f108 3aff 	add.w	sl, r8, #4294967295
 80003b0:	f080 8088 	bcs.w	80004c4 <__udivmoddi4+0x2bc>
 80003b4:	4288      	cmp	r0, r1
 80003b6:	f240 8085 	bls.w	80004c4 <__udivmoddi4+0x2bc>
 80003ba:	f1a8 0802 	sub.w	r8, r8, #2
 80003be:	4461      	add	r1, ip
 80003c0:	1a09      	subs	r1, r1, r0
 80003c2:	b2a4      	uxth	r4, r4
 80003c4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003c8:	fb09 1110 	mls	r1, r9, r0, r1
 80003cc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003d0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003d4:	458e      	cmp	lr, r1
 80003d6:	d908      	bls.n	80003ea <__udivmoddi4+0x1e2>
 80003d8:	eb1c 0101 	adds.w	r1, ip, r1
 80003dc:	f100 34ff 	add.w	r4, r0, #4294967295
 80003e0:	d26c      	bcs.n	80004bc <__udivmoddi4+0x2b4>
 80003e2:	458e      	cmp	lr, r1
 80003e4:	d96a      	bls.n	80004bc <__udivmoddi4+0x2b4>
 80003e6:	3802      	subs	r0, #2
 80003e8:	4461      	add	r1, ip
 80003ea:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003ee:	fba0 9402 	umull	r9, r4, r0, r2
 80003f2:	eba1 010e 	sub.w	r1, r1, lr
 80003f6:	42a1      	cmp	r1, r4
 80003f8:	46c8      	mov	r8, r9
 80003fa:	46a6      	mov	lr, r4
 80003fc:	d356      	bcc.n	80004ac <__udivmoddi4+0x2a4>
 80003fe:	d053      	beq.n	80004a8 <__udivmoddi4+0x2a0>
 8000400:	b15d      	cbz	r5, 800041a <__udivmoddi4+0x212>
 8000402:	ebb3 0208 	subs.w	r2, r3, r8
 8000406:	eb61 010e 	sbc.w	r1, r1, lr
 800040a:	fa01 f707 	lsl.w	r7, r1, r7
 800040e:	fa22 f306 	lsr.w	r3, r2, r6
 8000412:	40f1      	lsrs	r1, r6
 8000414:	431f      	orrs	r7, r3
 8000416:	e9c5 7100 	strd	r7, r1, [r5]
 800041a:	2600      	movs	r6, #0
 800041c:	4631      	mov	r1, r6
 800041e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000422:	f1c2 0320 	rsb	r3, r2, #32
 8000426:	40d8      	lsrs	r0, r3
 8000428:	fa0c fc02 	lsl.w	ip, ip, r2
 800042c:	fa21 f303 	lsr.w	r3, r1, r3
 8000430:	4091      	lsls	r1, r2
 8000432:	4301      	orrs	r1, r0
 8000434:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000440:	fb07 3610 	mls	r6, r7, r0, r3
 8000444:	0c0b      	lsrs	r3, r1, #16
 8000446:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800044a:	fb00 f60e 	mul.w	r6, r0, lr
 800044e:	429e      	cmp	r6, r3
 8000450:	fa04 f402 	lsl.w	r4, r4, r2
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x260>
 8000456:	eb1c 0303 	adds.w	r3, ip, r3
 800045a:	f100 38ff 	add.w	r8, r0, #4294967295
 800045e:	d22f      	bcs.n	80004c0 <__udivmoddi4+0x2b8>
 8000460:	429e      	cmp	r6, r3
 8000462:	d92d      	bls.n	80004c0 <__udivmoddi4+0x2b8>
 8000464:	3802      	subs	r0, #2
 8000466:	4463      	add	r3, ip
 8000468:	1b9b      	subs	r3, r3, r6
 800046a:	b289      	uxth	r1, r1
 800046c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000470:	fb07 3316 	mls	r3, r7, r6, r3
 8000474:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000478:	fb06 f30e 	mul.w	r3, r6, lr
 800047c:	428b      	cmp	r3, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x28a>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f106 38ff 	add.w	r8, r6, #4294967295
 8000488:	d216      	bcs.n	80004b8 <__udivmoddi4+0x2b0>
 800048a:	428b      	cmp	r3, r1
 800048c:	d914      	bls.n	80004b8 <__udivmoddi4+0x2b0>
 800048e:	3e02      	subs	r6, #2
 8000490:	4461      	add	r1, ip
 8000492:	1ac9      	subs	r1, r1, r3
 8000494:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000498:	e738      	b.n	800030c <__udivmoddi4+0x104>
 800049a:	462e      	mov	r6, r5
 800049c:	4628      	mov	r0, r5
 800049e:	e705      	b.n	80002ac <__udivmoddi4+0xa4>
 80004a0:	4606      	mov	r6, r0
 80004a2:	e6e3      	b.n	800026c <__udivmoddi4+0x64>
 80004a4:	4618      	mov	r0, r3
 80004a6:	e6f8      	b.n	800029a <__udivmoddi4+0x92>
 80004a8:	454b      	cmp	r3, r9
 80004aa:	d2a9      	bcs.n	8000400 <__udivmoddi4+0x1f8>
 80004ac:	ebb9 0802 	subs.w	r8, r9, r2
 80004b0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004b4:	3801      	subs	r0, #1
 80004b6:	e7a3      	b.n	8000400 <__udivmoddi4+0x1f8>
 80004b8:	4646      	mov	r6, r8
 80004ba:	e7ea      	b.n	8000492 <__udivmoddi4+0x28a>
 80004bc:	4620      	mov	r0, r4
 80004be:	e794      	b.n	80003ea <__udivmoddi4+0x1e2>
 80004c0:	4640      	mov	r0, r8
 80004c2:	e7d1      	b.n	8000468 <__udivmoddi4+0x260>
 80004c4:	46d0      	mov	r8, sl
 80004c6:	e77b      	b.n	80003c0 <__udivmoddi4+0x1b8>
 80004c8:	3b02      	subs	r3, #2
 80004ca:	4461      	add	r1, ip
 80004cc:	e732      	b.n	8000334 <__udivmoddi4+0x12c>
 80004ce:	4630      	mov	r0, r6
 80004d0:	e709      	b.n	80002e6 <__udivmoddi4+0xde>
 80004d2:	4464      	add	r4, ip
 80004d4:	3802      	subs	r0, #2
 80004d6:	e742      	b.n	800035e <__udivmoddi4+0x156>

080004d8 <__aeabi_idiv0>:
 80004d8:	4770      	bx	lr
 80004da:	bf00      	nop

080004dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004dc:	b580      	push	{r7, lr}
 80004de:	b0ae      	sub	sp, #184	; 0xb8
 80004e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

	//Defining the Morse-Code Code for A-Z in English Morse-Code.
	//0=dot,1=dash,read right-to-left
	const unsigned long a_table[36] =
 80004e2:	f107 0308 	add.w	r3, r7, #8
 80004e6:	2290      	movs	r2, #144	; 0x90
 80004e8:	2100      	movs	r1, #0
 80004ea:	4618      	mov	r0, r3
 80004ec:	f007 fbf2 	bl	8007cd4 <memset>
 80004f0:	f06f 03ef 	mvn.w	r3, #239	; 0xef
 80004f4:	60bb      	str	r3, [r7, #8]
 80004f6:	4b76      	ldr	r3, [pc, #472]	; (80006d0 <main+0x1f4>)
 80004f8:	60fb      	str	r3, [r7, #12]
 80004fa:	4b76      	ldr	r3, [pc, #472]	; (80006d4 <main+0x1f8>)
 80004fc:	613b      	str	r3, [r7, #16]
 80004fe:	4b76      	ldr	r3, [pc, #472]	; (80006d8 <main+0x1fc>)
 8000500:	617b      	str	r3, [r7, #20]
 8000502:	f06f 030f 	mvn.w	r3, #15
 8000506:	61bb      	str	r3, [r7, #24]
 8000508:	4b74      	ldr	r3, [pc, #464]	; (80006dc <main+0x200>)
 800050a:	61fb      	str	r3, [r7, #28]
 800050c:	4b74      	ldr	r3, [pc, #464]	; (80006e0 <main+0x204>)
 800050e:	623b      	str	r3, [r7, #32]
 8000510:	4b74      	ldr	r3, [pc, #464]	; (80006e4 <main+0x208>)
 8000512:	627b      	str	r3, [r7, #36]	; 0x24
 8000514:	f06f 03ff 	mvn.w	r3, #255	; 0xff
 8000518:	62bb      	str	r3, [r7, #40]	; 0x28
 800051a:	4b73      	ldr	r3, [pc, #460]	; (80006e8 <main+0x20c>)
 800051c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800051e:	4b73      	ldr	r3, [pc, #460]	; (80006ec <main+0x210>)
 8000520:	633b      	str	r3, [r7, #48]	; 0x30
 8000522:	4b73      	ldr	r3, [pc, #460]	; (80006f0 <main+0x214>)
 8000524:	637b      	str	r3, [r7, #52]	; 0x34
 8000526:	f06f 03ee 	mvn.w	r3, #238	; 0xee
 800052a:	63bb      	str	r3, [r7, #56]	; 0x38
 800052c:	f06f 03fe 	mvn.w	r3, #254	; 0xfe
 8000530:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000532:	4b70      	ldr	r3, [pc, #448]	; (80006f4 <main+0x218>)
 8000534:	643b      	str	r3, [r7, #64]	; 0x40
 8000536:	4b70      	ldr	r3, [pc, #448]	; (80006f8 <main+0x21c>)
 8000538:	647b      	str	r3, [r7, #68]	; 0x44
 800053a:	4b70      	ldr	r3, [pc, #448]	; (80006fc <main+0x220>)
 800053c:	64bb      	str	r3, [r7, #72]	; 0x48
 800053e:	4b70      	ldr	r3, [pc, #448]	; (8000700 <main+0x224>)
 8000540:	64fb      	str	r3, [r7, #76]	; 0x4c
 8000542:	4b70      	ldr	r3, [pc, #448]	; (8000704 <main+0x228>)
 8000544:	653b      	str	r3, [r7, #80]	; 0x50
 8000546:	f06f 030e 	mvn.w	r3, #14
 800054a:	657b      	str	r3, [r7, #84]	; 0x54
 800054c:	4b6e      	ldr	r3, [pc, #440]	; (8000708 <main+0x22c>)
 800054e:	65bb      	str	r3, [r7, #88]	; 0x58
 8000550:	4b6e      	ldr	r3, [pc, #440]	; (800070c <main+0x230>)
 8000552:	65fb      	str	r3, [r7, #92]	; 0x5c
 8000554:	4b6e      	ldr	r3, [pc, #440]	; (8000710 <main+0x234>)
 8000556:	663b      	str	r3, [r7, #96]	; 0x60
 8000558:	4b6e      	ldr	r3, [pc, #440]	; (8000714 <main+0x238>)
 800055a:	667b      	str	r3, [r7, #100]	; 0x64
 800055c:	4b6e      	ldr	r3, [pc, #440]	; (8000718 <main+0x23c>)
 800055e:	66bb      	str	r3, [r7, #104]	; 0x68
 8000560:	4b6e      	ldr	r3, [pc, #440]	; (800071c <main+0x240>)
 8000562:	66fb      	str	r3, [r7, #108]	; 0x6c
		0xFFFF1101, //Y
		0xFFFF0011  //Z
	};

	//NOTE: ONLY UPPERCASE ONLY MESSAGES
	char msg[] = "OMAR";
 8000564:	4a6e      	ldr	r2, [pc, #440]	; (8000720 <main+0x244>)
 8000566:	463b      	mov	r3, r7
 8000568:	e892 0003 	ldmia.w	r2, {r0, r1}
 800056c:	6018      	str	r0, [r3, #0]
 800056e:	3304      	adds	r3, #4
 8000570:	7019      	strb	r1, [r3, #0]
	int  msglen = strlen(msg);
 8000572:	463b      	mov	r3, r7
 8000574:	4618      	mov	r0, r3
 8000576:	f7ff fe27 	bl	80001c8 <strlen>
 800057a:	4603      	mov	r3, r0
 800057c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
	int morse_time_unit = 500;
 8000580:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000584:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
	int word_spacing_time_scale = 7;
 8000588:	2307      	movs	r3, #7
 800058a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
	int letter_spacing_time_scale = 3;
 800058e:	2303      	movs	r3, #3
 8000590:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000594:	f000 fcf0 	bl	8000f78 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000598:	f000 f8c6 	bl	8000728 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800059c:	f000 f9c2 	bl	8000924 <MX_GPIO_Init>
  MX_I2C1_Init();
 80005a0:	f000 f92c 	bl	80007fc <MX_I2C1_Init>
  MX_I2S3_Init();
 80005a4:	f000 f958 	bl	8000858 <MX_I2S3_Init>
  MX_SPI1_Init();
 80005a8:	f000 f986 	bl	80008b8 <MX_SPI1_Init>
  MX_USB_HOST_Init();
 80005ac:	f007 f850 	bl	8007650 <MX_USB_HOST_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 80005b0:	f007 f874 	bl	800769c <MX_USB_HOST_Process>

    /* USER CODE BEGIN 3 */
    //initial delay before transmitting code
    HAL_Delay(500);
 80005b4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80005b8:	f000 fd50 	bl	800105c <HAL_Delay>
	int i = 0;
 80005bc:	2300      	movs	r3, #0
 80005be:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
	int k = 0;
 80005c2:	2300      	movs	r3, #0
 80005c4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
	for (i = 0; i <= msglen; i++){
 80005c8:	2300      	movs	r3, #0
 80005ca:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80005ce:	e077      	b.n	80006c0 <main+0x1e4>
		if (msg[i] == '\0') {
 80005d0:	463a      	mov	r2, r7
 80005d2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80005d6:	4413      	add	r3, r2
 80005d8:	781b      	ldrb	r3, [r3, #0]
 80005da:	2b00      	cmp	r3, #0
 80005dc:	d110      	bne.n	8000600 <main+0x124>
			// if the current character has ended then exit.
			// ending indicated by 10seconds of RED LED (PD14)
			HAL_GPIO_WritePin(MORSE_STRING_END_GPIO_Port, MORSE_STRING_END_Pin, GPIO_PIN_SET);
 80005de:	2201      	movs	r2, #1
 80005e0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80005e4:	484f      	ldr	r0, [pc, #316]	; (8000724 <main+0x248>)
 80005e6:	f001 f80b 	bl	8001600 <HAL_GPIO_WritePin>
			HAL_Delay(10000);
 80005ea:	f242 7010 	movw	r0, #10000	; 0x2710
 80005ee:	f000 fd35 	bl	800105c <HAL_Delay>
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);
 80005f2:	2200      	movs	r2, #0
 80005f4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80005f8:	484a      	ldr	r0, [pc, #296]	; (8000724 <main+0x248>)
 80005fa:	f001 f801 	bl	8001600 <HAL_GPIO_WritePin>
			break;
 80005fe:	e065      	b.n	80006cc <main+0x1f0>
		}else if (msg[i] == ' '){
 8000600:	463a      	mov	r2, r7
 8000602:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8000606:	4413      	add	r3, r2
 8000608:	781b      	ldrb	r3, [r3, #0]
 800060a:	2b20      	cmp	r3, #32
 800060c:	d106      	bne.n	800061c <main+0x140>
			// if the current character has space, wait word-spacing time units
			out_spacing(morse_time_unit, word_spacing_time_scale);
 800060e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8000612:	f8d7 00a8 	ldr.w	r0, [r7, #168]	; 0xa8
 8000616:	f000 fa83 	bl	8000b20 <out_spacing>
 800061a:	e04c      	b.n	80006b6 <main+0x1da>
		}else{
			// if the current character is A~Z, translate to Morse-Code
			int temp = msg[i]-65;
 800061c:	463a      	mov	r2, r7
 800061e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8000622:	4413      	add	r3, r2
 8000624:	781b      	ldrb	r3, [r3, #0]
 8000626:	3b41      	subs	r3, #65	; 0x41
 8000628:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
			while (1){
				//0 = dot
				//1 = dash
				//F = exit condition
				int hex_digit = (a_table[temp] & ( 0xf << 4*k )) >> 4*k;
 800062c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8000630:	009b      	lsls	r3, r3, #2
 8000632:	33b8      	adds	r3, #184	; 0xb8
 8000634:	443b      	add	r3, r7
 8000636:	f853 3cb0 	ldr.w	r3, [r3, #-176]
 800063a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800063e:	0092      	lsls	r2, r2, #2
 8000640:	210f      	movs	r1, #15
 8000642:	fa01 f202 	lsl.w	r2, r1, r2
 8000646:	401a      	ands	r2, r3
 8000648:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800064c:	009b      	lsls	r3, r3, #2
 800064e:	fa22 f303 	lsr.w	r3, r2, r3
 8000652:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
				if (hex_digit == 0xf){
 8000656:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800065a:	2b0f      	cmp	r3, #15
 800065c:	d106      	bne.n	800066c <main+0x190>
					out_spacing(morse_time_unit,letter_spacing_time_scale);
 800065e:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
 8000662:	f8d7 00a8 	ldr.w	r0, [r7, #168]	; 0xa8
 8000666:	f000 fa5b 	bl	8000b20 <out_spacing>
					break;
 800066a:	e021      	b.n	80006b0 <main+0x1d4>
				}else if (hex_digit == 0x1){
 800066c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8000670:	2b01      	cmp	r3, #1
 8000672:	d109      	bne.n	8000688 <main+0x1ac>
					//dash flash
					out_dash(morse_time_unit);
 8000674:	f8d7 00a8 	ldr.w	r0, [r7, #168]	; 0xa8
 8000678:	f000 fa7c 	bl	8000b74 <out_dash>
					//letter spacing
					out_spacing(morse_time_unit,1);
 800067c:	2101      	movs	r1, #1
 800067e:	f8d7 00a8 	ldr.w	r0, [r7, #168]	; 0xa8
 8000682:	f000 fa4d 	bl	8000b20 <out_spacing>
 8000686:	e00c      	b.n	80006a2 <main+0x1c6>
				}else if (hex_digit == 0x0){
 8000688:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800068c:	2b00      	cmp	r3, #0
 800068e:	d10e      	bne.n	80006ae <main+0x1d2>
					//dot flash
					out_dot (morse_time_unit);
 8000690:	f8d7 00a8 	ldr.w	r0, [r7, #168]	; 0xa8
 8000694:	f000 fa54 	bl	8000b40 <out_dot>
					//letter spacing
					out_spacing(morse_time_unit,1);
 8000698:	2101      	movs	r1, #1
 800069a:	f8d7 00a8 	ldr.w	r0, [r7, #168]	; 0xa8
 800069e:	f000 fa3f 	bl	8000b20 <out_spacing>
				}else{
					//there is an error if we are here !!
					break;
				}
				k = k + 1;
 80006a2:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80006a6:	3301      	adds	r3, #1
 80006a8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
			while (1){
 80006ac:	e7be      	b.n	800062c <main+0x150>
					break;
 80006ae:	bf00      	nop
			}
			k = 0;
 80006b0:	2300      	movs	r3, #0
 80006b2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
	for (i = 0; i <= msglen; i++){
 80006b6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80006ba:	3301      	adds	r3, #1
 80006bc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80006c0:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80006c4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80006c8:	429a      	cmp	r2, r3
 80006ca:	dd81      	ble.n	80005d0 <main+0xf4>
  {
 80006cc:	e770      	b.n	80005b0 <main+0xd4>
 80006ce:	bf00      	nop
 80006d0:	ffff0001 	.word	0xffff0001
 80006d4:	ffff0101 	.word	0xffff0101
 80006d8:	fffff001 	.word	0xfffff001
 80006dc:	ffff0100 	.word	0xffff0100
 80006e0:	fffff011 	.word	0xfffff011
 80006e4:	ffff0000 	.word	0xffff0000
 80006e8:	ffff1110 	.word	0xffff1110
 80006ec:	fffff101 	.word	0xfffff101
 80006f0:	ffff0010 	.word	0xffff0010
 80006f4:	fffff111 	.word	0xfffff111
 80006f8:	ffff0110 	.word	0xffff0110
 80006fc:	ffff1011 	.word	0xffff1011
 8000700:	fffff010 	.word	0xfffff010
 8000704:	fffff000 	.word	0xfffff000
 8000708:	fffff100 	.word	0xfffff100
 800070c:	ffff1000 	.word	0xffff1000
 8000710:	fffff110 	.word	0xfffff110
 8000714:	ffff1001 	.word	0xffff1001
 8000718:	ffff1101 	.word	0xffff1101
 800071c:	ffff0011 	.word	0xffff0011
 8000720:	08007ef8 	.word	0x08007ef8
 8000724:	40020c00 	.word	0x40020c00

08000728 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000728:	b580      	push	{r7, lr}
 800072a:	b094      	sub	sp, #80	; 0x50
 800072c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800072e:	f107 0320 	add.w	r3, r7, #32
 8000732:	2230      	movs	r2, #48	; 0x30
 8000734:	2100      	movs	r1, #0
 8000736:	4618      	mov	r0, r3
 8000738:	f007 facc 	bl	8007cd4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800073c:	f107 030c 	add.w	r3, r7, #12
 8000740:	2200      	movs	r2, #0
 8000742:	601a      	str	r2, [r3, #0]
 8000744:	605a      	str	r2, [r3, #4]
 8000746:	609a      	str	r2, [r3, #8]
 8000748:	60da      	str	r2, [r3, #12]
 800074a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800074c:	2300      	movs	r3, #0
 800074e:	60bb      	str	r3, [r7, #8]
 8000750:	4b28      	ldr	r3, [pc, #160]	; (80007f4 <SystemClock_Config+0xcc>)
 8000752:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000754:	4a27      	ldr	r2, [pc, #156]	; (80007f4 <SystemClock_Config+0xcc>)
 8000756:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800075a:	6413      	str	r3, [r2, #64]	; 0x40
 800075c:	4b25      	ldr	r3, [pc, #148]	; (80007f4 <SystemClock_Config+0xcc>)
 800075e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000760:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000764:	60bb      	str	r3, [r7, #8]
 8000766:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000768:	2300      	movs	r3, #0
 800076a:	607b      	str	r3, [r7, #4]
 800076c:	4b22      	ldr	r3, [pc, #136]	; (80007f8 <SystemClock_Config+0xd0>)
 800076e:	681b      	ldr	r3, [r3, #0]
 8000770:	4a21      	ldr	r2, [pc, #132]	; (80007f8 <SystemClock_Config+0xd0>)
 8000772:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000776:	6013      	str	r3, [r2, #0]
 8000778:	4b1f      	ldr	r3, [pc, #124]	; (80007f8 <SystemClock_Config+0xd0>)
 800077a:	681b      	ldr	r3, [r3, #0]
 800077c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000780:	607b      	str	r3, [r7, #4]
 8000782:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000784:	2301      	movs	r3, #1
 8000786:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000788:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800078c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800078e:	2302      	movs	r3, #2
 8000790:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000792:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000796:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000798:	2308      	movs	r3, #8
 800079a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 800079c:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80007a0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80007a2:	2302      	movs	r3, #2
 80007a4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80007a6:	2307      	movs	r3, #7
 80007a8:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007aa:	f107 0320 	add.w	r3, r7, #32
 80007ae:	4618      	mov	r0, r3
 80007b0:	f003 f92e 	bl	8003a10 <HAL_RCC_OscConfig>
 80007b4:	4603      	mov	r3, r0
 80007b6:	2b00      	cmp	r3, #0
 80007b8:	d001      	beq.n	80007be <SystemClock_Config+0x96>
  {
    Error_Handler();
 80007ba:	f000 f9f9 	bl	8000bb0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007be:	230f      	movs	r3, #15
 80007c0:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007c2:	2302      	movs	r3, #2
 80007c4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007c6:	2300      	movs	r3, #0
 80007c8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80007ca:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80007ce:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80007d0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007d4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80007d6:	f107 030c 	add.w	r3, r7, #12
 80007da:	2105      	movs	r1, #5
 80007dc:	4618      	mov	r0, r3
 80007de:	f003 fb8f 	bl	8003f00 <HAL_RCC_ClockConfig>
 80007e2:	4603      	mov	r3, r0
 80007e4:	2b00      	cmp	r3, #0
 80007e6:	d001      	beq.n	80007ec <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80007e8:	f000 f9e2 	bl	8000bb0 <Error_Handler>
  }
}
 80007ec:	bf00      	nop
 80007ee:	3750      	adds	r7, #80	; 0x50
 80007f0:	46bd      	mov	sp, r7
 80007f2:	bd80      	pop	{r7, pc}
 80007f4:	40023800 	.word	0x40023800
 80007f8:	40007000 	.word	0x40007000

080007fc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000800:	4b12      	ldr	r3, [pc, #72]	; (800084c <MX_I2C1_Init+0x50>)
 8000802:	4a13      	ldr	r2, [pc, #76]	; (8000850 <MX_I2C1_Init+0x54>)
 8000804:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000806:	4b11      	ldr	r3, [pc, #68]	; (800084c <MX_I2C1_Init+0x50>)
 8000808:	4a12      	ldr	r2, [pc, #72]	; (8000854 <MX_I2C1_Init+0x58>)
 800080a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800080c:	4b0f      	ldr	r3, [pc, #60]	; (800084c <MX_I2C1_Init+0x50>)
 800080e:	2200      	movs	r2, #0
 8000810:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000812:	4b0e      	ldr	r3, [pc, #56]	; (800084c <MX_I2C1_Init+0x50>)
 8000814:	2200      	movs	r2, #0
 8000816:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000818:	4b0c      	ldr	r3, [pc, #48]	; (800084c <MX_I2C1_Init+0x50>)
 800081a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800081e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000820:	4b0a      	ldr	r3, [pc, #40]	; (800084c <MX_I2C1_Init+0x50>)
 8000822:	2200      	movs	r2, #0
 8000824:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000826:	4b09      	ldr	r3, [pc, #36]	; (800084c <MX_I2C1_Init+0x50>)
 8000828:	2200      	movs	r2, #0
 800082a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800082c:	4b07      	ldr	r3, [pc, #28]	; (800084c <MX_I2C1_Init+0x50>)
 800082e:	2200      	movs	r2, #0
 8000830:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000832:	4b06      	ldr	r3, [pc, #24]	; (800084c <MX_I2C1_Init+0x50>)
 8000834:	2200      	movs	r2, #0
 8000836:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000838:	4804      	ldr	r0, [pc, #16]	; (800084c <MX_I2C1_Init+0x50>)
 800083a:	f002 fb05 	bl	8002e48 <HAL_I2C_Init>
 800083e:	4603      	mov	r3, r0
 8000840:	2b00      	cmp	r3, #0
 8000842:	d001      	beq.n	8000848 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000844:	f000 f9b4 	bl	8000bb0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000848:	bf00      	nop
 800084a:	bd80      	pop	{r7, pc}
 800084c:	200000ac 	.word	0x200000ac
 8000850:	40005400 	.word	0x40005400
 8000854:	000186a0 	.word	0x000186a0

08000858 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 800085c:	4b13      	ldr	r3, [pc, #76]	; (80008ac <MX_I2S3_Init+0x54>)
 800085e:	4a14      	ldr	r2, [pc, #80]	; (80008b0 <MX_I2S3_Init+0x58>)
 8000860:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 8000862:	4b12      	ldr	r3, [pc, #72]	; (80008ac <MX_I2S3_Init+0x54>)
 8000864:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000868:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 800086a:	4b10      	ldr	r3, [pc, #64]	; (80008ac <MX_I2S3_Init+0x54>)
 800086c:	2200      	movs	r2, #0
 800086e:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000870:	4b0e      	ldr	r3, [pc, #56]	; (80008ac <MX_I2S3_Init+0x54>)
 8000872:	2200      	movs	r2, #0
 8000874:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8000876:	4b0d      	ldr	r3, [pc, #52]	; (80008ac <MX_I2S3_Init+0x54>)
 8000878:	f44f 7200 	mov.w	r2, #512	; 0x200
 800087c:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 800087e:	4b0b      	ldr	r3, [pc, #44]	; (80008ac <MX_I2S3_Init+0x54>)
 8000880:	4a0c      	ldr	r2, [pc, #48]	; (80008b4 <MX_I2S3_Init+0x5c>)
 8000882:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8000884:	4b09      	ldr	r3, [pc, #36]	; (80008ac <MX_I2S3_Init+0x54>)
 8000886:	2200      	movs	r2, #0
 8000888:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 800088a:	4b08      	ldr	r3, [pc, #32]	; (80008ac <MX_I2S3_Init+0x54>)
 800088c:	2200      	movs	r2, #0
 800088e:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8000890:	4b06      	ldr	r3, [pc, #24]	; (80008ac <MX_I2S3_Init+0x54>)
 8000892:	2200      	movs	r2, #0
 8000894:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 8000896:	4805      	ldr	r0, [pc, #20]	; (80008ac <MX_I2S3_Init+0x54>)
 8000898:	f002 fc1a 	bl	80030d0 <HAL_I2S_Init>
 800089c:	4603      	mov	r3, r0
 800089e:	2b00      	cmp	r3, #0
 80008a0:	d001      	beq.n	80008a6 <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 80008a2:	f000 f985 	bl	8000bb0 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 80008a6:	bf00      	nop
 80008a8:	bd80      	pop	{r7, pc}
 80008aa:	bf00      	nop
 80008ac:	20000100 	.word	0x20000100
 80008b0:	40003c00 	.word	0x40003c00
 80008b4:	00017700 	.word	0x00017700

080008b8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80008bc:	4b17      	ldr	r3, [pc, #92]	; (800091c <MX_SPI1_Init+0x64>)
 80008be:	4a18      	ldr	r2, [pc, #96]	; (8000920 <MX_SPI1_Init+0x68>)
 80008c0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80008c2:	4b16      	ldr	r3, [pc, #88]	; (800091c <MX_SPI1_Init+0x64>)
 80008c4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80008c8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80008ca:	4b14      	ldr	r3, [pc, #80]	; (800091c <MX_SPI1_Init+0x64>)
 80008cc:	2200      	movs	r2, #0
 80008ce:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80008d0:	4b12      	ldr	r3, [pc, #72]	; (800091c <MX_SPI1_Init+0x64>)
 80008d2:	2200      	movs	r2, #0
 80008d4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80008d6:	4b11      	ldr	r3, [pc, #68]	; (800091c <MX_SPI1_Init+0x64>)
 80008d8:	2200      	movs	r2, #0
 80008da:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80008dc:	4b0f      	ldr	r3, [pc, #60]	; (800091c <MX_SPI1_Init+0x64>)
 80008de:	2200      	movs	r2, #0
 80008e0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80008e2:	4b0e      	ldr	r3, [pc, #56]	; (800091c <MX_SPI1_Init+0x64>)
 80008e4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80008e8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80008ea:	4b0c      	ldr	r3, [pc, #48]	; (800091c <MX_SPI1_Init+0x64>)
 80008ec:	2200      	movs	r2, #0
 80008ee:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80008f0:	4b0a      	ldr	r3, [pc, #40]	; (800091c <MX_SPI1_Init+0x64>)
 80008f2:	2200      	movs	r2, #0
 80008f4:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80008f6:	4b09      	ldr	r3, [pc, #36]	; (800091c <MX_SPI1_Init+0x64>)
 80008f8:	2200      	movs	r2, #0
 80008fa:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80008fc:	4b07      	ldr	r3, [pc, #28]	; (800091c <MX_SPI1_Init+0x64>)
 80008fe:	2200      	movs	r2, #0
 8000900:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000902:	4b06      	ldr	r3, [pc, #24]	; (800091c <MX_SPI1_Init+0x64>)
 8000904:	220a      	movs	r2, #10
 8000906:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000908:	4804      	ldr	r0, [pc, #16]	; (800091c <MX_SPI1_Init+0x64>)
 800090a:	f003 fe45 	bl	8004598 <HAL_SPI_Init>
 800090e:	4603      	mov	r3, r0
 8000910:	2b00      	cmp	r3, #0
 8000912:	d001      	beq.n	8000918 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000914:	f000 f94c 	bl	8000bb0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000918:	bf00      	nop
 800091a:	bd80      	pop	{r7, pc}
 800091c:	20000148 	.word	0x20000148
 8000920:	40013000 	.word	0x40013000

08000924 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	b08c      	sub	sp, #48	; 0x30
 8000928:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800092a:	f107 031c 	add.w	r3, r7, #28
 800092e:	2200      	movs	r2, #0
 8000930:	601a      	str	r2, [r3, #0]
 8000932:	605a      	str	r2, [r3, #4]
 8000934:	609a      	str	r2, [r3, #8]
 8000936:	60da      	str	r2, [r3, #12]
 8000938:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800093a:	2300      	movs	r3, #0
 800093c:	61bb      	str	r3, [r7, #24]
 800093e:	4b72      	ldr	r3, [pc, #456]	; (8000b08 <MX_GPIO_Init+0x1e4>)
 8000940:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000942:	4a71      	ldr	r2, [pc, #452]	; (8000b08 <MX_GPIO_Init+0x1e4>)
 8000944:	f043 0310 	orr.w	r3, r3, #16
 8000948:	6313      	str	r3, [r2, #48]	; 0x30
 800094a:	4b6f      	ldr	r3, [pc, #444]	; (8000b08 <MX_GPIO_Init+0x1e4>)
 800094c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800094e:	f003 0310 	and.w	r3, r3, #16
 8000952:	61bb      	str	r3, [r7, #24]
 8000954:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000956:	2300      	movs	r3, #0
 8000958:	617b      	str	r3, [r7, #20]
 800095a:	4b6b      	ldr	r3, [pc, #428]	; (8000b08 <MX_GPIO_Init+0x1e4>)
 800095c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800095e:	4a6a      	ldr	r2, [pc, #424]	; (8000b08 <MX_GPIO_Init+0x1e4>)
 8000960:	f043 0304 	orr.w	r3, r3, #4
 8000964:	6313      	str	r3, [r2, #48]	; 0x30
 8000966:	4b68      	ldr	r3, [pc, #416]	; (8000b08 <MX_GPIO_Init+0x1e4>)
 8000968:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800096a:	f003 0304 	and.w	r3, r3, #4
 800096e:	617b      	str	r3, [r7, #20]
 8000970:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000972:	2300      	movs	r3, #0
 8000974:	613b      	str	r3, [r7, #16]
 8000976:	4b64      	ldr	r3, [pc, #400]	; (8000b08 <MX_GPIO_Init+0x1e4>)
 8000978:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800097a:	4a63      	ldr	r2, [pc, #396]	; (8000b08 <MX_GPIO_Init+0x1e4>)
 800097c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000980:	6313      	str	r3, [r2, #48]	; 0x30
 8000982:	4b61      	ldr	r3, [pc, #388]	; (8000b08 <MX_GPIO_Init+0x1e4>)
 8000984:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000986:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800098a:	613b      	str	r3, [r7, #16]
 800098c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800098e:	2300      	movs	r3, #0
 8000990:	60fb      	str	r3, [r7, #12]
 8000992:	4b5d      	ldr	r3, [pc, #372]	; (8000b08 <MX_GPIO_Init+0x1e4>)
 8000994:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000996:	4a5c      	ldr	r2, [pc, #368]	; (8000b08 <MX_GPIO_Init+0x1e4>)
 8000998:	f043 0301 	orr.w	r3, r3, #1
 800099c:	6313      	str	r3, [r2, #48]	; 0x30
 800099e:	4b5a      	ldr	r3, [pc, #360]	; (8000b08 <MX_GPIO_Init+0x1e4>)
 80009a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009a2:	f003 0301 	and.w	r3, r3, #1
 80009a6:	60fb      	str	r3, [r7, #12]
 80009a8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009aa:	2300      	movs	r3, #0
 80009ac:	60bb      	str	r3, [r7, #8]
 80009ae:	4b56      	ldr	r3, [pc, #344]	; (8000b08 <MX_GPIO_Init+0x1e4>)
 80009b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009b2:	4a55      	ldr	r2, [pc, #340]	; (8000b08 <MX_GPIO_Init+0x1e4>)
 80009b4:	f043 0302 	orr.w	r3, r3, #2
 80009b8:	6313      	str	r3, [r2, #48]	; 0x30
 80009ba:	4b53      	ldr	r3, [pc, #332]	; (8000b08 <MX_GPIO_Init+0x1e4>)
 80009bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009be:	f003 0302 	and.w	r3, r3, #2
 80009c2:	60bb      	str	r3, [r7, #8]
 80009c4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80009c6:	2300      	movs	r3, #0
 80009c8:	607b      	str	r3, [r7, #4]
 80009ca:	4b4f      	ldr	r3, [pc, #316]	; (8000b08 <MX_GPIO_Init+0x1e4>)
 80009cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ce:	4a4e      	ldr	r2, [pc, #312]	; (8000b08 <MX_GPIO_Init+0x1e4>)
 80009d0:	f043 0308 	orr.w	r3, r3, #8
 80009d4:	6313      	str	r3, [r2, #48]	; 0x30
 80009d6:	4b4c      	ldr	r3, [pc, #304]	; (8000b08 <MX_GPIO_Init+0x1e4>)
 80009d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009da:	f003 0308 	and.w	r3, r3, #8
 80009de:	607b      	str	r3, [r7, #4]
 80009e0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 80009e2:	2200      	movs	r2, #0
 80009e4:	2108      	movs	r1, #8
 80009e6:	4849      	ldr	r0, [pc, #292]	; (8000b0c <MX_GPIO_Init+0x1e8>)
 80009e8:	f000 fe0a 	bl	8001600 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80009ec:	2201      	movs	r2, #1
 80009ee:	2101      	movs	r1, #1
 80009f0:	4847      	ldr	r0, [pc, #284]	; (8000b10 <MX_GPIO_Init+0x1ec>)
 80009f2:	f000 fe05 	bl	8001600 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, MORSE_OUT_LED_Pin|LD3_Pin|MORSE_STRING_END_Pin|LD6_Pin
 80009f6:	2200      	movs	r2, #0
 80009f8:	f24f 0110 	movw	r1, #61456	; 0xf010
 80009fc:	4845      	ldr	r0, [pc, #276]	; (8000b14 <MX_GPIO_Init+0x1f0>)
 80009fe:	f000 fdff 	bl	8001600 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8000a02:	2308      	movs	r3, #8
 8000a04:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a06:	2301      	movs	r3, #1
 8000a08:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a0e:	2300      	movs	r3, #0
 8000a10:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8000a12:	f107 031c 	add.w	r3, r7, #28
 8000a16:	4619      	mov	r1, r3
 8000a18:	483c      	ldr	r0, [pc, #240]	; (8000b0c <MX_GPIO_Init+0x1e8>)
 8000a1a:	f000 fc55 	bl	80012c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000a1e:	2301      	movs	r3, #1
 8000a20:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a22:	2301      	movs	r3, #1
 8000a24:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a26:	2300      	movs	r3, #0
 8000a28:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000a2e:	f107 031c 	add.w	r3, r7, #28
 8000a32:	4619      	mov	r1, r3
 8000a34:	4836      	ldr	r0, [pc, #216]	; (8000b10 <MX_GPIO_Init+0x1ec>)
 8000a36:	f000 fc47 	bl	80012c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8000a3a:	2308      	movs	r3, #8
 8000a3c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a3e:	2302      	movs	r3, #2
 8000a40:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a42:	2300      	movs	r3, #0
 8000a44:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a46:	2300      	movs	r3, #0
 8000a48:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000a4a:	2305      	movs	r3, #5
 8000a4c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000a4e:	f107 031c 	add.w	r3, r7, #28
 8000a52:	4619      	mov	r1, r3
 8000a54:	482e      	ldr	r0, [pc, #184]	; (8000b10 <MX_GPIO_Init+0x1ec>)
 8000a56:	f000 fc37 	bl	80012c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000a5a:	2301      	movs	r3, #1
 8000a5c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000a5e:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000a62:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a64:	2300      	movs	r3, #0
 8000a66:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000a68:	f107 031c 	add.w	r3, r7, #28
 8000a6c:	4619      	mov	r1, r3
 8000a6e:	482a      	ldr	r0, [pc, #168]	; (8000b18 <MX_GPIO_Init+0x1f4>)
 8000a70:	f000 fc2a 	bl	80012c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000a74:	2304      	movs	r3, #4
 8000a76:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a78:	2300      	movs	r3, #0
 8000a7a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000a80:	f107 031c 	add.w	r3, r7, #28
 8000a84:	4619      	mov	r1, r3
 8000a86:	4825      	ldr	r0, [pc, #148]	; (8000b1c <MX_GPIO_Init+0x1f8>)
 8000a88:	f000 fc1e 	bl	80012c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8000a8c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000a90:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a92:	2302      	movs	r3, #2
 8000a94:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a96:	2300      	movs	r3, #0
 8000a98:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000a9e:	2305      	movs	r3, #5
 8000aa0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8000aa2:	f107 031c 	add.w	r3, r7, #28
 8000aa6:	4619      	mov	r1, r3
 8000aa8:	481c      	ldr	r0, [pc, #112]	; (8000b1c <MX_GPIO_Init+0x1f8>)
 8000aaa:	f000 fc0d 	bl	80012c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : MORSE_OUT_LED_Pin LD3_Pin MORSE_STRING_END_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = MORSE_OUT_LED_Pin|LD3_Pin|MORSE_STRING_END_Pin|LD6_Pin
 8000aae:	f24f 0310 	movw	r3, #61456	; 0xf010
 8000ab2:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ab4:	2301      	movs	r3, #1
 8000ab6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ab8:	2300      	movs	r3, #0
 8000aba:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000abc:	2300      	movs	r3, #0
 8000abe:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000ac0:	f107 031c 	add.w	r3, r7, #28
 8000ac4:	4619      	mov	r1, r3
 8000ac6:	4813      	ldr	r0, [pc, #76]	; (8000b14 <MX_GPIO_Init+0x1f0>)
 8000ac8:	f000 fbfe 	bl	80012c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000acc:	2320      	movs	r3, #32
 8000ace:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ad0:	2300      	movs	r3, #0
 8000ad2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ad4:	2300      	movs	r3, #0
 8000ad6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000ad8:	f107 031c 	add.w	r3, r7, #28
 8000adc:	4619      	mov	r1, r3
 8000ade:	480d      	ldr	r0, [pc, #52]	; (8000b14 <MX_GPIO_Init+0x1f0>)
 8000ae0:	f000 fbf2 	bl	80012c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8000ae4:	2302      	movs	r3, #2
 8000ae6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000ae8:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000aec:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aee:	2300      	movs	r3, #0
 8000af0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8000af2:	f107 031c 	add.w	r3, r7, #28
 8000af6:	4619      	mov	r1, r3
 8000af8:	4804      	ldr	r0, [pc, #16]	; (8000b0c <MX_GPIO_Init+0x1e8>)
 8000afa:	f000 fbe5 	bl	80012c8 <HAL_GPIO_Init>

}
 8000afe:	bf00      	nop
 8000b00:	3730      	adds	r7, #48	; 0x30
 8000b02:	46bd      	mov	sp, r7
 8000b04:	bd80      	pop	{r7, pc}
 8000b06:	bf00      	nop
 8000b08:	40023800 	.word	0x40023800
 8000b0c:	40021000 	.word	0x40021000
 8000b10:	40020800 	.word	0x40020800
 8000b14:	40020c00 	.word	0x40020c00
 8000b18:	40020000 	.word	0x40020000
 8000b1c:	40020400 	.word	0x40020400

08000b20 <out_spacing>:

/* USER CODE BEGIN 4 */
void out_spacing(int unit_of_time, int time_spacing){
 8000b20:	b580      	push	{r7, lr}
 8000b22:	b082      	sub	sp, #8
 8000b24:	af00      	add	r7, sp, #0
 8000b26:	6078      	str	r0, [r7, #4]
 8000b28:	6039      	str	r1, [r7, #0]
	HAL_Delay(time_spacing * unit_of_time);
 8000b2a:	683b      	ldr	r3, [r7, #0]
 8000b2c:	687a      	ldr	r2, [r7, #4]
 8000b2e:	fb02 f303 	mul.w	r3, r2, r3
 8000b32:	4618      	mov	r0, r3
 8000b34:	f000 fa92 	bl	800105c <HAL_Delay>
//	return 0;
};
 8000b38:	bf00      	nop
 8000b3a:	3708      	adds	r7, #8
 8000b3c:	46bd      	mov	sp, r7
 8000b3e:	bd80      	pop	{r7, pc}

08000b40 <out_dot>:

void out_dot(int unit_of_time){
 8000b40:	b580      	push	{r7, lr}
 8000b42:	b082      	sub	sp, #8
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(MORSE_OUT_LED_GPIO_Port, MORSE_OUT_LED_Pin, GPIO_PIN_SET);
 8000b48:	2201      	movs	r2, #1
 8000b4a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000b4e:	4808      	ldr	r0, [pc, #32]	; (8000b70 <out_dot+0x30>)
 8000b50:	f000 fd56 	bl	8001600 <HAL_GPIO_WritePin>
	HAL_Delay(unit_of_time);//1-time-unit for dot
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	4618      	mov	r0, r3
 8000b58:	f000 fa80 	bl	800105c <HAL_Delay>
	HAL_GPIO_WritePin(MORSE_OUT_LED_GPIO_Port, MORSE_OUT_LED_Pin, GPIO_PIN_RESET);
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000b62:	4803      	ldr	r0, [pc, #12]	; (8000b70 <out_dot+0x30>)
 8000b64:	f000 fd4c 	bl	8001600 <HAL_GPIO_WritePin>
//	return 0;
};
 8000b68:	bf00      	nop
 8000b6a:	3708      	adds	r7, #8
 8000b6c:	46bd      	mov	sp, r7
 8000b6e:	bd80      	pop	{r7, pc}
 8000b70:	40020c00 	.word	0x40020c00

08000b74 <out_dash>:
void out_dash(int unit_of_time){
 8000b74:	b580      	push	{r7, lr}
 8000b76:	b082      	sub	sp, #8
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(MORSE_OUT_LED_GPIO_Port, MORSE_OUT_LED_Pin, GPIO_PIN_SET);
 8000b7c:	2201      	movs	r2, #1
 8000b7e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000b82:	480a      	ldr	r0, [pc, #40]	; (8000bac <out_dash+0x38>)
 8000b84:	f000 fd3c 	bl	8001600 <HAL_GPIO_WritePin>
	HAL_Delay(3 * unit_of_time);//3-time-units for dash
 8000b88:	687a      	ldr	r2, [r7, #4]
 8000b8a:	4613      	mov	r3, r2
 8000b8c:	005b      	lsls	r3, r3, #1
 8000b8e:	4413      	add	r3, r2
 8000b90:	4618      	mov	r0, r3
 8000b92:	f000 fa63 	bl	800105c <HAL_Delay>
	HAL_GPIO_WritePin(MORSE_OUT_LED_GPIO_Port, MORSE_OUT_LED_Pin, GPIO_PIN_RESET);
 8000b96:	2200      	movs	r2, #0
 8000b98:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000b9c:	4803      	ldr	r0, [pc, #12]	; (8000bac <out_dash+0x38>)
 8000b9e:	f000 fd2f 	bl	8001600 <HAL_GPIO_WritePin>
//	return 0;
};
 8000ba2:	bf00      	nop
 8000ba4:	3708      	adds	r7, #8
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	bd80      	pop	{r7, pc}
 8000baa:	bf00      	nop
 8000bac:	40020c00 	.word	0x40020c00

08000bb0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000bb0:	b480      	push	{r7}
 8000bb2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000bb4:	b672      	cpsid	i
}
 8000bb6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000bb8:	e7fe      	b.n	8000bb8 <Error_Handler+0x8>
	...

08000bbc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	b082      	sub	sp, #8
 8000bc0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	607b      	str	r3, [r7, #4]
 8000bc6:	4b10      	ldr	r3, [pc, #64]	; (8000c08 <HAL_MspInit+0x4c>)
 8000bc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bca:	4a0f      	ldr	r2, [pc, #60]	; (8000c08 <HAL_MspInit+0x4c>)
 8000bcc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000bd0:	6453      	str	r3, [r2, #68]	; 0x44
 8000bd2:	4b0d      	ldr	r3, [pc, #52]	; (8000c08 <HAL_MspInit+0x4c>)
 8000bd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bd6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000bda:	607b      	str	r3, [r7, #4]
 8000bdc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bde:	2300      	movs	r3, #0
 8000be0:	603b      	str	r3, [r7, #0]
 8000be2:	4b09      	ldr	r3, [pc, #36]	; (8000c08 <HAL_MspInit+0x4c>)
 8000be4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000be6:	4a08      	ldr	r2, [pc, #32]	; (8000c08 <HAL_MspInit+0x4c>)
 8000be8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000bec:	6413      	str	r3, [r2, #64]	; 0x40
 8000bee:	4b06      	ldr	r3, [pc, #24]	; (8000c08 <HAL_MspInit+0x4c>)
 8000bf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bf2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000bf6:	603b      	str	r3, [r7, #0]
 8000bf8:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000bfa:	2007      	movs	r0, #7
 8000bfc:	f000 fb22 	bl	8001244 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c00:	bf00      	nop
 8000c02:	3708      	adds	r7, #8
 8000c04:	46bd      	mov	sp, r7
 8000c06:	bd80      	pop	{r7, pc}
 8000c08:	40023800 	.word	0x40023800

08000c0c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	b08a      	sub	sp, #40	; 0x28
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c14:	f107 0314 	add.w	r3, r7, #20
 8000c18:	2200      	movs	r2, #0
 8000c1a:	601a      	str	r2, [r3, #0]
 8000c1c:	605a      	str	r2, [r3, #4]
 8000c1e:	609a      	str	r2, [r3, #8]
 8000c20:	60da      	str	r2, [r3, #12]
 8000c22:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	681b      	ldr	r3, [r3, #0]
 8000c28:	4a19      	ldr	r2, [pc, #100]	; (8000c90 <HAL_I2C_MspInit+0x84>)
 8000c2a:	4293      	cmp	r3, r2
 8000c2c:	d12c      	bne.n	8000c88 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c2e:	2300      	movs	r3, #0
 8000c30:	613b      	str	r3, [r7, #16]
 8000c32:	4b18      	ldr	r3, [pc, #96]	; (8000c94 <HAL_I2C_MspInit+0x88>)
 8000c34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c36:	4a17      	ldr	r2, [pc, #92]	; (8000c94 <HAL_I2C_MspInit+0x88>)
 8000c38:	f043 0302 	orr.w	r3, r3, #2
 8000c3c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c3e:	4b15      	ldr	r3, [pc, #84]	; (8000c94 <HAL_I2C_MspInit+0x88>)
 8000c40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c42:	f003 0302 	and.w	r3, r3, #2
 8000c46:	613b      	str	r3, [r7, #16]
 8000c48:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000c4a:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000c4e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000c50:	2312      	movs	r3, #18
 8000c52:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000c54:	2301      	movs	r3, #1
 8000c56:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c58:	2300      	movs	r3, #0
 8000c5a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000c5c:	2304      	movs	r3, #4
 8000c5e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c60:	f107 0314 	add.w	r3, r7, #20
 8000c64:	4619      	mov	r1, r3
 8000c66:	480c      	ldr	r0, [pc, #48]	; (8000c98 <HAL_I2C_MspInit+0x8c>)
 8000c68:	f000 fb2e 	bl	80012c8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	60fb      	str	r3, [r7, #12]
 8000c70:	4b08      	ldr	r3, [pc, #32]	; (8000c94 <HAL_I2C_MspInit+0x88>)
 8000c72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c74:	4a07      	ldr	r2, [pc, #28]	; (8000c94 <HAL_I2C_MspInit+0x88>)
 8000c76:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000c7a:	6413      	str	r3, [r2, #64]	; 0x40
 8000c7c:	4b05      	ldr	r3, [pc, #20]	; (8000c94 <HAL_I2C_MspInit+0x88>)
 8000c7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c80:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000c84:	60fb      	str	r3, [r7, #12]
 8000c86:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000c88:	bf00      	nop
 8000c8a:	3728      	adds	r7, #40	; 0x28
 8000c8c:	46bd      	mov	sp, r7
 8000c8e:	bd80      	pop	{r7, pc}
 8000c90:	40005400 	.word	0x40005400
 8000c94:	40023800 	.word	0x40023800
 8000c98:	40020400 	.word	0x40020400

08000c9c <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	b08e      	sub	sp, #56	; 0x38
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ca4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ca8:	2200      	movs	r2, #0
 8000caa:	601a      	str	r2, [r3, #0]
 8000cac:	605a      	str	r2, [r3, #4]
 8000cae:	609a      	str	r2, [r3, #8]
 8000cb0:	60da      	str	r2, [r3, #12]
 8000cb2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000cb4:	f107 0314 	add.w	r3, r7, #20
 8000cb8:	2200      	movs	r2, #0
 8000cba:	601a      	str	r2, [r3, #0]
 8000cbc:	605a      	str	r2, [r3, #4]
 8000cbe:	609a      	str	r2, [r3, #8]
 8000cc0:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI3)
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	681b      	ldr	r3, [r3, #0]
 8000cc6:	4a31      	ldr	r2, [pc, #196]	; (8000d8c <HAL_I2S_MspInit+0xf0>)
 8000cc8:	4293      	cmp	r3, r2
 8000cca:	d15a      	bne.n	8000d82 <HAL_I2S_MspInit+0xe6>

  /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000ccc:	2301      	movs	r3, #1
 8000cce:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8000cd0:	23c0      	movs	r3, #192	; 0xc0
 8000cd2:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000cd4:	2302      	movs	r3, #2
 8000cd6:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000cd8:	f107 0314 	add.w	r3, r7, #20
 8000cdc:	4618      	mov	r0, r3
 8000cde:	f003 fb1b 	bl	8004318 <HAL_RCCEx_PeriphCLKConfig>
 8000ce2:	4603      	mov	r3, r0
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	d001      	beq.n	8000cec <HAL_I2S_MspInit+0x50>
    {
      Error_Handler();
 8000ce8:	f7ff ff62 	bl	8000bb0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000cec:	2300      	movs	r3, #0
 8000cee:	613b      	str	r3, [r7, #16]
 8000cf0:	4b27      	ldr	r3, [pc, #156]	; (8000d90 <HAL_I2S_MspInit+0xf4>)
 8000cf2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cf4:	4a26      	ldr	r2, [pc, #152]	; (8000d90 <HAL_I2S_MspInit+0xf4>)
 8000cf6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000cfa:	6413      	str	r3, [r2, #64]	; 0x40
 8000cfc:	4b24      	ldr	r3, [pc, #144]	; (8000d90 <HAL_I2S_MspInit+0xf4>)
 8000cfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d00:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000d04:	613b      	str	r3, [r7, #16]
 8000d06:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d08:	2300      	movs	r3, #0
 8000d0a:	60fb      	str	r3, [r7, #12]
 8000d0c:	4b20      	ldr	r3, [pc, #128]	; (8000d90 <HAL_I2S_MspInit+0xf4>)
 8000d0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d10:	4a1f      	ldr	r2, [pc, #124]	; (8000d90 <HAL_I2S_MspInit+0xf4>)
 8000d12:	f043 0301 	orr.w	r3, r3, #1
 8000d16:	6313      	str	r3, [r2, #48]	; 0x30
 8000d18:	4b1d      	ldr	r3, [pc, #116]	; (8000d90 <HAL_I2S_MspInit+0xf4>)
 8000d1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d1c:	f003 0301 	and.w	r3, r3, #1
 8000d20:	60fb      	str	r3, [r7, #12]
 8000d22:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d24:	2300      	movs	r3, #0
 8000d26:	60bb      	str	r3, [r7, #8]
 8000d28:	4b19      	ldr	r3, [pc, #100]	; (8000d90 <HAL_I2S_MspInit+0xf4>)
 8000d2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d2c:	4a18      	ldr	r2, [pc, #96]	; (8000d90 <HAL_I2S_MspInit+0xf4>)
 8000d2e:	f043 0304 	orr.w	r3, r3, #4
 8000d32:	6313      	str	r3, [r2, #48]	; 0x30
 8000d34:	4b16      	ldr	r3, [pc, #88]	; (8000d90 <HAL_I2S_MspInit+0xf4>)
 8000d36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d38:	f003 0304 	and.w	r3, r3, #4
 8000d3c:	60bb      	str	r3, [r7, #8]
 8000d3e:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000d40:	2310      	movs	r3, #16
 8000d42:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d44:	2302      	movs	r3, #2
 8000d46:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d48:	2300      	movs	r3, #0
 8000d4a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d4c:	2300      	movs	r3, #0
 8000d4e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000d50:	2306      	movs	r3, #6
 8000d52:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000d54:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d58:	4619      	mov	r1, r3
 8000d5a:	480e      	ldr	r0, [pc, #56]	; (8000d94 <HAL_I2S_MspInit+0xf8>)
 8000d5c:	f000 fab4 	bl	80012c8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000d60:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8000d64:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d66:	2302      	movs	r3, #2
 8000d68:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d6e:	2300      	movs	r3, #0
 8000d70:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000d72:	2306      	movs	r3, #6
 8000d74:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d76:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d7a:	4619      	mov	r1, r3
 8000d7c:	4806      	ldr	r0, [pc, #24]	; (8000d98 <HAL_I2S_MspInit+0xfc>)
 8000d7e:	f000 faa3 	bl	80012c8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8000d82:	bf00      	nop
 8000d84:	3738      	adds	r7, #56	; 0x38
 8000d86:	46bd      	mov	sp, r7
 8000d88:	bd80      	pop	{r7, pc}
 8000d8a:	bf00      	nop
 8000d8c:	40003c00 	.word	0x40003c00
 8000d90:	40023800 	.word	0x40023800
 8000d94:	40020000 	.word	0x40020000
 8000d98:	40020800 	.word	0x40020800

08000d9c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	b08a      	sub	sp, #40	; 0x28
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000da4:	f107 0314 	add.w	r3, r7, #20
 8000da8:	2200      	movs	r2, #0
 8000daa:	601a      	str	r2, [r3, #0]
 8000dac:	605a      	str	r2, [r3, #4]
 8000dae:	609a      	str	r2, [r3, #8]
 8000db0:	60da      	str	r2, [r3, #12]
 8000db2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	4a19      	ldr	r2, [pc, #100]	; (8000e20 <HAL_SPI_MspInit+0x84>)
 8000dba:	4293      	cmp	r3, r2
 8000dbc:	d12b      	bne.n	8000e16 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	613b      	str	r3, [r7, #16]
 8000dc2:	4b18      	ldr	r3, [pc, #96]	; (8000e24 <HAL_SPI_MspInit+0x88>)
 8000dc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dc6:	4a17      	ldr	r2, [pc, #92]	; (8000e24 <HAL_SPI_MspInit+0x88>)
 8000dc8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000dcc:	6453      	str	r3, [r2, #68]	; 0x44
 8000dce:	4b15      	ldr	r3, [pc, #84]	; (8000e24 <HAL_SPI_MspInit+0x88>)
 8000dd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dd2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000dd6:	613b      	str	r3, [r7, #16]
 8000dd8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dda:	2300      	movs	r3, #0
 8000ddc:	60fb      	str	r3, [r7, #12]
 8000dde:	4b11      	ldr	r3, [pc, #68]	; (8000e24 <HAL_SPI_MspInit+0x88>)
 8000de0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000de2:	4a10      	ldr	r2, [pc, #64]	; (8000e24 <HAL_SPI_MspInit+0x88>)
 8000de4:	f043 0301 	orr.w	r3, r3, #1
 8000de8:	6313      	str	r3, [r2, #48]	; 0x30
 8000dea:	4b0e      	ldr	r3, [pc, #56]	; (8000e24 <HAL_SPI_MspInit+0x88>)
 8000dec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dee:	f003 0301 	and.w	r3, r3, #1
 8000df2:	60fb      	str	r3, [r7, #12]
 8000df4:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000df6:	23e0      	movs	r3, #224	; 0xe0
 8000df8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dfa:	2302      	movs	r3, #2
 8000dfc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dfe:	2300      	movs	r3, #0
 8000e00:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e02:	2300      	movs	r3, #0
 8000e04:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000e06:	2305      	movs	r3, #5
 8000e08:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e0a:	f107 0314 	add.w	r3, r7, #20
 8000e0e:	4619      	mov	r1, r3
 8000e10:	4805      	ldr	r0, [pc, #20]	; (8000e28 <HAL_SPI_MspInit+0x8c>)
 8000e12:	f000 fa59 	bl	80012c8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000e16:	bf00      	nop
 8000e18:	3728      	adds	r7, #40	; 0x28
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	bd80      	pop	{r7, pc}
 8000e1e:	bf00      	nop
 8000e20:	40013000 	.word	0x40013000
 8000e24:	40023800 	.word	0x40023800
 8000e28:	40020000 	.word	0x40020000

08000e2c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e2c:	b480      	push	{r7}
 8000e2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000e30:	e7fe      	b.n	8000e30 <NMI_Handler+0x4>

08000e32 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e32:	b480      	push	{r7}
 8000e34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e36:	e7fe      	b.n	8000e36 <HardFault_Handler+0x4>

08000e38 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e38:	b480      	push	{r7}
 8000e3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e3c:	e7fe      	b.n	8000e3c <MemManage_Handler+0x4>

08000e3e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e3e:	b480      	push	{r7}
 8000e40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e42:	e7fe      	b.n	8000e42 <BusFault_Handler+0x4>

08000e44 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e44:	b480      	push	{r7}
 8000e46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e48:	e7fe      	b.n	8000e48 <UsageFault_Handler+0x4>

08000e4a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e4a:	b480      	push	{r7}
 8000e4c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e4e:	bf00      	nop
 8000e50:	46bd      	mov	sp, r7
 8000e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e56:	4770      	bx	lr

08000e58 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e58:	b480      	push	{r7}
 8000e5a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e5c:	bf00      	nop
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e64:	4770      	bx	lr

08000e66 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e66:	b480      	push	{r7}
 8000e68:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e6a:	bf00      	nop
 8000e6c:	46bd      	mov	sp, r7
 8000e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e72:	4770      	bx	lr

08000e74 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e78:	f000 f8d0 	bl	800101c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e7c:	bf00      	nop
 8000e7e:	bd80      	pop	{r7, pc}

08000e80 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8000e84:	4802      	ldr	r0, [pc, #8]	; (8000e90 <OTG_FS_IRQHandler+0x10>)
 8000e86:	f000 fe3f 	bl	8001b08 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000e8a:	bf00      	nop
 8000e8c:	bd80      	pop	{r7, pc}
 8000e8e:	bf00      	nop
 8000e90:	20000584 	.word	0x20000584

08000e94 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	b086      	sub	sp, #24
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e9c:	4a14      	ldr	r2, [pc, #80]	; (8000ef0 <_sbrk+0x5c>)
 8000e9e:	4b15      	ldr	r3, [pc, #84]	; (8000ef4 <_sbrk+0x60>)
 8000ea0:	1ad3      	subs	r3, r2, r3
 8000ea2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ea4:	697b      	ldr	r3, [r7, #20]
 8000ea6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ea8:	4b13      	ldr	r3, [pc, #76]	; (8000ef8 <_sbrk+0x64>)
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	d102      	bne.n	8000eb6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000eb0:	4b11      	ldr	r3, [pc, #68]	; (8000ef8 <_sbrk+0x64>)
 8000eb2:	4a12      	ldr	r2, [pc, #72]	; (8000efc <_sbrk+0x68>)
 8000eb4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000eb6:	4b10      	ldr	r3, [pc, #64]	; (8000ef8 <_sbrk+0x64>)
 8000eb8:	681a      	ldr	r2, [r3, #0]
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	4413      	add	r3, r2
 8000ebe:	693a      	ldr	r2, [r7, #16]
 8000ec0:	429a      	cmp	r2, r3
 8000ec2:	d207      	bcs.n	8000ed4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ec4:	f006 fecc 	bl	8007c60 <__errno>
 8000ec8:	4603      	mov	r3, r0
 8000eca:	220c      	movs	r2, #12
 8000ecc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000ece:	f04f 33ff 	mov.w	r3, #4294967295
 8000ed2:	e009      	b.n	8000ee8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ed4:	4b08      	ldr	r3, [pc, #32]	; (8000ef8 <_sbrk+0x64>)
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000eda:	4b07      	ldr	r3, [pc, #28]	; (8000ef8 <_sbrk+0x64>)
 8000edc:	681a      	ldr	r2, [r3, #0]
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	4413      	add	r3, r2
 8000ee2:	4a05      	ldr	r2, [pc, #20]	; (8000ef8 <_sbrk+0x64>)
 8000ee4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000ee6:	68fb      	ldr	r3, [r7, #12]
}
 8000ee8:	4618      	mov	r0, r3
 8000eea:	3718      	adds	r7, #24
 8000eec:	46bd      	mov	sp, r7
 8000eee:	bd80      	pop	{r7, pc}
 8000ef0:	20020000 	.word	0x20020000
 8000ef4:	00000400 	.word	0x00000400
 8000ef8:	200001a0 	.word	0x200001a0
 8000efc:	20000898 	.word	0x20000898

08000f00 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f00:	b480      	push	{r7}
 8000f02:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000f04:	4b06      	ldr	r3, [pc, #24]	; (8000f20 <SystemInit+0x20>)
 8000f06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f0a:	4a05      	ldr	r2, [pc, #20]	; (8000f20 <SystemInit+0x20>)
 8000f0c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f10:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f14:	bf00      	nop
 8000f16:	46bd      	mov	sp, r7
 8000f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f1c:	4770      	bx	lr
 8000f1e:	bf00      	nop
 8000f20:	e000ed00 	.word	0xe000ed00

08000f24 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000f24:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000f5c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000f28:	480d      	ldr	r0, [pc, #52]	; (8000f60 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000f2a:	490e      	ldr	r1, [pc, #56]	; (8000f64 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000f2c:	4a0e      	ldr	r2, [pc, #56]	; (8000f68 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000f2e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f30:	e002      	b.n	8000f38 <LoopCopyDataInit>

08000f32 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f32:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f34:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f36:	3304      	adds	r3, #4

08000f38 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f38:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f3a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f3c:	d3f9      	bcc.n	8000f32 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f3e:	4a0b      	ldr	r2, [pc, #44]	; (8000f6c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000f40:	4c0b      	ldr	r4, [pc, #44]	; (8000f70 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000f42:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f44:	e001      	b.n	8000f4a <LoopFillZerobss>

08000f46 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f46:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f48:	3204      	adds	r2, #4

08000f4a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f4a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f4c:	d3fb      	bcc.n	8000f46 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000f4e:	f7ff ffd7 	bl	8000f00 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000f52:	f006 fe8b 	bl	8007c6c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000f56:	f7ff fac1 	bl	80004dc <main>
  bx  lr    
 8000f5a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000f5c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000f60:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f64:	20000090 	.word	0x20000090
  ldr r2, =_sidata
 8000f68:	08007f2c 	.word	0x08007f2c
  ldr r2, =_sbss
 8000f6c:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 8000f70:	20000898 	.word	0x20000898

08000f74 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000f74:	e7fe      	b.n	8000f74 <ADC_IRQHandler>
	...

08000f78 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000f7c:	4b0e      	ldr	r3, [pc, #56]	; (8000fb8 <HAL_Init+0x40>)
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	4a0d      	ldr	r2, [pc, #52]	; (8000fb8 <HAL_Init+0x40>)
 8000f82:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000f86:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000f88:	4b0b      	ldr	r3, [pc, #44]	; (8000fb8 <HAL_Init+0x40>)
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	4a0a      	ldr	r2, [pc, #40]	; (8000fb8 <HAL_Init+0x40>)
 8000f8e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000f92:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f94:	4b08      	ldr	r3, [pc, #32]	; (8000fb8 <HAL_Init+0x40>)
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	4a07      	ldr	r2, [pc, #28]	; (8000fb8 <HAL_Init+0x40>)
 8000f9a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f9e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000fa0:	2003      	movs	r0, #3
 8000fa2:	f000 f94f 	bl	8001244 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000fa6:	2000      	movs	r0, #0
 8000fa8:	f000 f808 	bl	8000fbc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000fac:	f7ff fe06 	bl	8000bbc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000fb0:	2300      	movs	r3, #0
}
 8000fb2:	4618      	mov	r0, r3
 8000fb4:	bd80      	pop	{r7, pc}
 8000fb6:	bf00      	nop
 8000fb8:	40023c00 	.word	0x40023c00

08000fbc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b082      	sub	sp, #8
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000fc4:	4b12      	ldr	r3, [pc, #72]	; (8001010 <HAL_InitTick+0x54>)
 8000fc6:	681a      	ldr	r2, [r3, #0]
 8000fc8:	4b12      	ldr	r3, [pc, #72]	; (8001014 <HAL_InitTick+0x58>)
 8000fca:	781b      	ldrb	r3, [r3, #0]
 8000fcc:	4619      	mov	r1, r3
 8000fce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000fd2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000fd6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000fda:	4618      	mov	r0, r3
 8000fdc:	f000 f967 	bl	80012ae <HAL_SYSTICK_Config>
 8000fe0:	4603      	mov	r3, r0
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d001      	beq.n	8000fea <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000fe6:	2301      	movs	r3, #1
 8000fe8:	e00e      	b.n	8001008 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	2b0f      	cmp	r3, #15
 8000fee:	d80a      	bhi.n	8001006 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	6879      	ldr	r1, [r7, #4]
 8000ff4:	f04f 30ff 	mov.w	r0, #4294967295
 8000ff8:	f000 f92f 	bl	800125a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ffc:	4a06      	ldr	r2, [pc, #24]	; (8001018 <HAL_InitTick+0x5c>)
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001002:	2300      	movs	r3, #0
 8001004:	e000      	b.n	8001008 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001006:	2301      	movs	r3, #1
}
 8001008:	4618      	mov	r0, r3
 800100a:	3708      	adds	r7, #8
 800100c:	46bd      	mov	sp, r7
 800100e:	bd80      	pop	{r7, pc}
 8001010:	20000000 	.word	0x20000000
 8001014:	20000008 	.word	0x20000008
 8001018:	20000004 	.word	0x20000004

0800101c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800101c:	b480      	push	{r7}
 800101e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001020:	4b06      	ldr	r3, [pc, #24]	; (800103c <HAL_IncTick+0x20>)
 8001022:	781b      	ldrb	r3, [r3, #0]
 8001024:	461a      	mov	r2, r3
 8001026:	4b06      	ldr	r3, [pc, #24]	; (8001040 <HAL_IncTick+0x24>)
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	4413      	add	r3, r2
 800102c:	4a04      	ldr	r2, [pc, #16]	; (8001040 <HAL_IncTick+0x24>)
 800102e:	6013      	str	r3, [r2, #0]
}
 8001030:	bf00      	nop
 8001032:	46bd      	mov	sp, r7
 8001034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001038:	4770      	bx	lr
 800103a:	bf00      	nop
 800103c:	20000008 	.word	0x20000008
 8001040:	200001a4 	.word	0x200001a4

08001044 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001044:	b480      	push	{r7}
 8001046:	af00      	add	r7, sp, #0
  return uwTick;
 8001048:	4b03      	ldr	r3, [pc, #12]	; (8001058 <HAL_GetTick+0x14>)
 800104a:	681b      	ldr	r3, [r3, #0]
}
 800104c:	4618      	mov	r0, r3
 800104e:	46bd      	mov	sp, r7
 8001050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001054:	4770      	bx	lr
 8001056:	bf00      	nop
 8001058:	200001a4 	.word	0x200001a4

0800105c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	b084      	sub	sp, #16
 8001060:	af00      	add	r7, sp, #0
 8001062:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001064:	f7ff ffee 	bl	8001044 <HAL_GetTick>
 8001068:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800106e:	68fb      	ldr	r3, [r7, #12]
 8001070:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001074:	d005      	beq.n	8001082 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001076:	4b0a      	ldr	r3, [pc, #40]	; (80010a0 <HAL_Delay+0x44>)
 8001078:	781b      	ldrb	r3, [r3, #0]
 800107a:	461a      	mov	r2, r3
 800107c:	68fb      	ldr	r3, [r7, #12]
 800107e:	4413      	add	r3, r2
 8001080:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001082:	bf00      	nop
 8001084:	f7ff ffde 	bl	8001044 <HAL_GetTick>
 8001088:	4602      	mov	r2, r0
 800108a:	68bb      	ldr	r3, [r7, #8]
 800108c:	1ad3      	subs	r3, r2, r3
 800108e:	68fa      	ldr	r2, [r7, #12]
 8001090:	429a      	cmp	r2, r3
 8001092:	d8f7      	bhi.n	8001084 <HAL_Delay+0x28>
  {
  }
}
 8001094:	bf00      	nop
 8001096:	bf00      	nop
 8001098:	3710      	adds	r7, #16
 800109a:	46bd      	mov	sp, r7
 800109c:	bd80      	pop	{r7, pc}
 800109e:	bf00      	nop
 80010a0:	20000008 	.word	0x20000008

080010a4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010a4:	b480      	push	{r7}
 80010a6:	b085      	sub	sp, #20
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	f003 0307 	and.w	r3, r3, #7
 80010b2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80010b4:	4b0c      	ldr	r3, [pc, #48]	; (80010e8 <__NVIC_SetPriorityGrouping+0x44>)
 80010b6:	68db      	ldr	r3, [r3, #12]
 80010b8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80010ba:	68ba      	ldr	r2, [r7, #8]
 80010bc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80010c0:	4013      	ands	r3, r2
 80010c2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80010c4:	68fb      	ldr	r3, [r7, #12]
 80010c6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80010c8:	68bb      	ldr	r3, [r7, #8]
 80010ca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80010cc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80010d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80010d4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80010d6:	4a04      	ldr	r2, [pc, #16]	; (80010e8 <__NVIC_SetPriorityGrouping+0x44>)
 80010d8:	68bb      	ldr	r3, [r7, #8]
 80010da:	60d3      	str	r3, [r2, #12]
}
 80010dc:	bf00      	nop
 80010de:	3714      	adds	r7, #20
 80010e0:	46bd      	mov	sp, r7
 80010e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e6:	4770      	bx	lr
 80010e8:	e000ed00 	.word	0xe000ed00

080010ec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80010ec:	b480      	push	{r7}
 80010ee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80010f0:	4b04      	ldr	r3, [pc, #16]	; (8001104 <__NVIC_GetPriorityGrouping+0x18>)
 80010f2:	68db      	ldr	r3, [r3, #12]
 80010f4:	0a1b      	lsrs	r3, r3, #8
 80010f6:	f003 0307 	and.w	r3, r3, #7
}
 80010fa:	4618      	mov	r0, r3
 80010fc:	46bd      	mov	sp, r7
 80010fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001102:	4770      	bx	lr
 8001104:	e000ed00 	.word	0xe000ed00

08001108 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001108:	b480      	push	{r7}
 800110a:	b083      	sub	sp, #12
 800110c:	af00      	add	r7, sp, #0
 800110e:	4603      	mov	r3, r0
 8001110:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001112:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001116:	2b00      	cmp	r3, #0
 8001118:	db0b      	blt.n	8001132 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800111a:	79fb      	ldrb	r3, [r7, #7]
 800111c:	f003 021f 	and.w	r2, r3, #31
 8001120:	4907      	ldr	r1, [pc, #28]	; (8001140 <__NVIC_EnableIRQ+0x38>)
 8001122:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001126:	095b      	lsrs	r3, r3, #5
 8001128:	2001      	movs	r0, #1
 800112a:	fa00 f202 	lsl.w	r2, r0, r2
 800112e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001132:	bf00      	nop
 8001134:	370c      	adds	r7, #12
 8001136:	46bd      	mov	sp, r7
 8001138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113c:	4770      	bx	lr
 800113e:	bf00      	nop
 8001140:	e000e100 	.word	0xe000e100

08001144 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001144:	b480      	push	{r7}
 8001146:	b083      	sub	sp, #12
 8001148:	af00      	add	r7, sp, #0
 800114a:	4603      	mov	r3, r0
 800114c:	6039      	str	r1, [r7, #0]
 800114e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001150:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001154:	2b00      	cmp	r3, #0
 8001156:	db0a      	blt.n	800116e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001158:	683b      	ldr	r3, [r7, #0]
 800115a:	b2da      	uxtb	r2, r3
 800115c:	490c      	ldr	r1, [pc, #48]	; (8001190 <__NVIC_SetPriority+0x4c>)
 800115e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001162:	0112      	lsls	r2, r2, #4
 8001164:	b2d2      	uxtb	r2, r2
 8001166:	440b      	add	r3, r1
 8001168:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800116c:	e00a      	b.n	8001184 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800116e:	683b      	ldr	r3, [r7, #0]
 8001170:	b2da      	uxtb	r2, r3
 8001172:	4908      	ldr	r1, [pc, #32]	; (8001194 <__NVIC_SetPriority+0x50>)
 8001174:	79fb      	ldrb	r3, [r7, #7]
 8001176:	f003 030f 	and.w	r3, r3, #15
 800117a:	3b04      	subs	r3, #4
 800117c:	0112      	lsls	r2, r2, #4
 800117e:	b2d2      	uxtb	r2, r2
 8001180:	440b      	add	r3, r1
 8001182:	761a      	strb	r2, [r3, #24]
}
 8001184:	bf00      	nop
 8001186:	370c      	adds	r7, #12
 8001188:	46bd      	mov	sp, r7
 800118a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118e:	4770      	bx	lr
 8001190:	e000e100 	.word	0xe000e100
 8001194:	e000ed00 	.word	0xe000ed00

08001198 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001198:	b480      	push	{r7}
 800119a:	b089      	sub	sp, #36	; 0x24
 800119c:	af00      	add	r7, sp, #0
 800119e:	60f8      	str	r0, [r7, #12]
 80011a0:	60b9      	str	r1, [r7, #8]
 80011a2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80011a4:	68fb      	ldr	r3, [r7, #12]
 80011a6:	f003 0307 	and.w	r3, r3, #7
 80011aa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80011ac:	69fb      	ldr	r3, [r7, #28]
 80011ae:	f1c3 0307 	rsb	r3, r3, #7
 80011b2:	2b04      	cmp	r3, #4
 80011b4:	bf28      	it	cs
 80011b6:	2304      	movcs	r3, #4
 80011b8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011ba:	69fb      	ldr	r3, [r7, #28]
 80011bc:	3304      	adds	r3, #4
 80011be:	2b06      	cmp	r3, #6
 80011c0:	d902      	bls.n	80011c8 <NVIC_EncodePriority+0x30>
 80011c2:	69fb      	ldr	r3, [r7, #28]
 80011c4:	3b03      	subs	r3, #3
 80011c6:	e000      	b.n	80011ca <NVIC_EncodePriority+0x32>
 80011c8:	2300      	movs	r3, #0
 80011ca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011cc:	f04f 32ff 	mov.w	r2, #4294967295
 80011d0:	69bb      	ldr	r3, [r7, #24]
 80011d2:	fa02 f303 	lsl.w	r3, r2, r3
 80011d6:	43da      	mvns	r2, r3
 80011d8:	68bb      	ldr	r3, [r7, #8]
 80011da:	401a      	ands	r2, r3
 80011dc:	697b      	ldr	r3, [r7, #20]
 80011de:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80011e0:	f04f 31ff 	mov.w	r1, #4294967295
 80011e4:	697b      	ldr	r3, [r7, #20]
 80011e6:	fa01 f303 	lsl.w	r3, r1, r3
 80011ea:	43d9      	mvns	r1, r3
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011f0:	4313      	orrs	r3, r2
         );
}
 80011f2:	4618      	mov	r0, r3
 80011f4:	3724      	adds	r7, #36	; 0x24
 80011f6:	46bd      	mov	sp, r7
 80011f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fc:	4770      	bx	lr
	...

08001200 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	b082      	sub	sp, #8
 8001204:	af00      	add	r7, sp, #0
 8001206:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	3b01      	subs	r3, #1
 800120c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001210:	d301      	bcc.n	8001216 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001212:	2301      	movs	r3, #1
 8001214:	e00f      	b.n	8001236 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001216:	4a0a      	ldr	r2, [pc, #40]	; (8001240 <SysTick_Config+0x40>)
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	3b01      	subs	r3, #1
 800121c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800121e:	210f      	movs	r1, #15
 8001220:	f04f 30ff 	mov.w	r0, #4294967295
 8001224:	f7ff ff8e 	bl	8001144 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001228:	4b05      	ldr	r3, [pc, #20]	; (8001240 <SysTick_Config+0x40>)
 800122a:	2200      	movs	r2, #0
 800122c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800122e:	4b04      	ldr	r3, [pc, #16]	; (8001240 <SysTick_Config+0x40>)
 8001230:	2207      	movs	r2, #7
 8001232:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001234:	2300      	movs	r3, #0
}
 8001236:	4618      	mov	r0, r3
 8001238:	3708      	adds	r7, #8
 800123a:	46bd      	mov	sp, r7
 800123c:	bd80      	pop	{r7, pc}
 800123e:	bf00      	nop
 8001240:	e000e010 	.word	0xe000e010

08001244 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	b082      	sub	sp, #8
 8001248:	af00      	add	r7, sp, #0
 800124a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800124c:	6878      	ldr	r0, [r7, #4]
 800124e:	f7ff ff29 	bl	80010a4 <__NVIC_SetPriorityGrouping>
}
 8001252:	bf00      	nop
 8001254:	3708      	adds	r7, #8
 8001256:	46bd      	mov	sp, r7
 8001258:	bd80      	pop	{r7, pc}

0800125a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800125a:	b580      	push	{r7, lr}
 800125c:	b086      	sub	sp, #24
 800125e:	af00      	add	r7, sp, #0
 8001260:	4603      	mov	r3, r0
 8001262:	60b9      	str	r1, [r7, #8]
 8001264:	607a      	str	r2, [r7, #4]
 8001266:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001268:	2300      	movs	r3, #0
 800126a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800126c:	f7ff ff3e 	bl	80010ec <__NVIC_GetPriorityGrouping>
 8001270:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001272:	687a      	ldr	r2, [r7, #4]
 8001274:	68b9      	ldr	r1, [r7, #8]
 8001276:	6978      	ldr	r0, [r7, #20]
 8001278:	f7ff ff8e 	bl	8001198 <NVIC_EncodePriority>
 800127c:	4602      	mov	r2, r0
 800127e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001282:	4611      	mov	r1, r2
 8001284:	4618      	mov	r0, r3
 8001286:	f7ff ff5d 	bl	8001144 <__NVIC_SetPriority>
}
 800128a:	bf00      	nop
 800128c:	3718      	adds	r7, #24
 800128e:	46bd      	mov	sp, r7
 8001290:	bd80      	pop	{r7, pc}

08001292 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001292:	b580      	push	{r7, lr}
 8001294:	b082      	sub	sp, #8
 8001296:	af00      	add	r7, sp, #0
 8001298:	4603      	mov	r3, r0
 800129a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800129c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012a0:	4618      	mov	r0, r3
 80012a2:	f7ff ff31 	bl	8001108 <__NVIC_EnableIRQ>
}
 80012a6:	bf00      	nop
 80012a8:	3708      	adds	r7, #8
 80012aa:	46bd      	mov	sp, r7
 80012ac:	bd80      	pop	{r7, pc}

080012ae <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80012ae:	b580      	push	{r7, lr}
 80012b0:	b082      	sub	sp, #8
 80012b2:	af00      	add	r7, sp, #0
 80012b4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80012b6:	6878      	ldr	r0, [r7, #4]
 80012b8:	f7ff ffa2 	bl	8001200 <SysTick_Config>
 80012bc:	4603      	mov	r3, r0
}
 80012be:	4618      	mov	r0, r3
 80012c0:	3708      	adds	r7, #8
 80012c2:	46bd      	mov	sp, r7
 80012c4:	bd80      	pop	{r7, pc}
	...

080012c8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80012c8:	b480      	push	{r7}
 80012ca:	b089      	sub	sp, #36	; 0x24
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	6078      	str	r0, [r7, #4]
 80012d0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80012d2:	2300      	movs	r3, #0
 80012d4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80012d6:	2300      	movs	r3, #0
 80012d8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80012da:	2300      	movs	r3, #0
 80012dc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80012de:	2300      	movs	r3, #0
 80012e0:	61fb      	str	r3, [r7, #28]
 80012e2:	e16b      	b.n	80015bc <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80012e4:	2201      	movs	r2, #1
 80012e6:	69fb      	ldr	r3, [r7, #28]
 80012e8:	fa02 f303 	lsl.w	r3, r2, r3
 80012ec:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80012ee:	683b      	ldr	r3, [r7, #0]
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	697a      	ldr	r2, [r7, #20]
 80012f4:	4013      	ands	r3, r2
 80012f6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80012f8:	693a      	ldr	r2, [r7, #16]
 80012fa:	697b      	ldr	r3, [r7, #20]
 80012fc:	429a      	cmp	r2, r3
 80012fe:	f040 815a 	bne.w	80015b6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001302:	683b      	ldr	r3, [r7, #0]
 8001304:	685b      	ldr	r3, [r3, #4]
 8001306:	f003 0303 	and.w	r3, r3, #3
 800130a:	2b01      	cmp	r3, #1
 800130c:	d005      	beq.n	800131a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800130e:	683b      	ldr	r3, [r7, #0]
 8001310:	685b      	ldr	r3, [r3, #4]
 8001312:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001316:	2b02      	cmp	r3, #2
 8001318:	d130      	bne.n	800137c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	689b      	ldr	r3, [r3, #8]
 800131e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001320:	69fb      	ldr	r3, [r7, #28]
 8001322:	005b      	lsls	r3, r3, #1
 8001324:	2203      	movs	r2, #3
 8001326:	fa02 f303 	lsl.w	r3, r2, r3
 800132a:	43db      	mvns	r3, r3
 800132c:	69ba      	ldr	r2, [r7, #24]
 800132e:	4013      	ands	r3, r2
 8001330:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001332:	683b      	ldr	r3, [r7, #0]
 8001334:	68da      	ldr	r2, [r3, #12]
 8001336:	69fb      	ldr	r3, [r7, #28]
 8001338:	005b      	lsls	r3, r3, #1
 800133a:	fa02 f303 	lsl.w	r3, r2, r3
 800133e:	69ba      	ldr	r2, [r7, #24]
 8001340:	4313      	orrs	r3, r2
 8001342:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	69ba      	ldr	r2, [r7, #24]
 8001348:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	685b      	ldr	r3, [r3, #4]
 800134e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001350:	2201      	movs	r2, #1
 8001352:	69fb      	ldr	r3, [r7, #28]
 8001354:	fa02 f303 	lsl.w	r3, r2, r3
 8001358:	43db      	mvns	r3, r3
 800135a:	69ba      	ldr	r2, [r7, #24]
 800135c:	4013      	ands	r3, r2
 800135e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001360:	683b      	ldr	r3, [r7, #0]
 8001362:	685b      	ldr	r3, [r3, #4]
 8001364:	091b      	lsrs	r3, r3, #4
 8001366:	f003 0201 	and.w	r2, r3, #1
 800136a:	69fb      	ldr	r3, [r7, #28]
 800136c:	fa02 f303 	lsl.w	r3, r2, r3
 8001370:	69ba      	ldr	r2, [r7, #24]
 8001372:	4313      	orrs	r3, r2
 8001374:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	69ba      	ldr	r2, [r7, #24]
 800137a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800137c:	683b      	ldr	r3, [r7, #0]
 800137e:	685b      	ldr	r3, [r3, #4]
 8001380:	f003 0303 	and.w	r3, r3, #3
 8001384:	2b03      	cmp	r3, #3
 8001386:	d017      	beq.n	80013b8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	68db      	ldr	r3, [r3, #12]
 800138c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800138e:	69fb      	ldr	r3, [r7, #28]
 8001390:	005b      	lsls	r3, r3, #1
 8001392:	2203      	movs	r2, #3
 8001394:	fa02 f303 	lsl.w	r3, r2, r3
 8001398:	43db      	mvns	r3, r3
 800139a:	69ba      	ldr	r2, [r7, #24]
 800139c:	4013      	ands	r3, r2
 800139e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80013a0:	683b      	ldr	r3, [r7, #0]
 80013a2:	689a      	ldr	r2, [r3, #8]
 80013a4:	69fb      	ldr	r3, [r7, #28]
 80013a6:	005b      	lsls	r3, r3, #1
 80013a8:	fa02 f303 	lsl.w	r3, r2, r3
 80013ac:	69ba      	ldr	r2, [r7, #24]
 80013ae:	4313      	orrs	r3, r2
 80013b0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	69ba      	ldr	r2, [r7, #24]
 80013b6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80013b8:	683b      	ldr	r3, [r7, #0]
 80013ba:	685b      	ldr	r3, [r3, #4]
 80013bc:	f003 0303 	and.w	r3, r3, #3
 80013c0:	2b02      	cmp	r3, #2
 80013c2:	d123      	bne.n	800140c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80013c4:	69fb      	ldr	r3, [r7, #28]
 80013c6:	08da      	lsrs	r2, r3, #3
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	3208      	adds	r2, #8
 80013cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80013d0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80013d2:	69fb      	ldr	r3, [r7, #28]
 80013d4:	f003 0307 	and.w	r3, r3, #7
 80013d8:	009b      	lsls	r3, r3, #2
 80013da:	220f      	movs	r2, #15
 80013dc:	fa02 f303 	lsl.w	r3, r2, r3
 80013e0:	43db      	mvns	r3, r3
 80013e2:	69ba      	ldr	r2, [r7, #24]
 80013e4:	4013      	ands	r3, r2
 80013e6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80013e8:	683b      	ldr	r3, [r7, #0]
 80013ea:	691a      	ldr	r2, [r3, #16]
 80013ec:	69fb      	ldr	r3, [r7, #28]
 80013ee:	f003 0307 	and.w	r3, r3, #7
 80013f2:	009b      	lsls	r3, r3, #2
 80013f4:	fa02 f303 	lsl.w	r3, r2, r3
 80013f8:	69ba      	ldr	r2, [r7, #24]
 80013fa:	4313      	orrs	r3, r2
 80013fc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80013fe:	69fb      	ldr	r3, [r7, #28]
 8001400:	08da      	lsrs	r2, r3, #3
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	3208      	adds	r2, #8
 8001406:	69b9      	ldr	r1, [r7, #24]
 8001408:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001412:	69fb      	ldr	r3, [r7, #28]
 8001414:	005b      	lsls	r3, r3, #1
 8001416:	2203      	movs	r2, #3
 8001418:	fa02 f303 	lsl.w	r3, r2, r3
 800141c:	43db      	mvns	r3, r3
 800141e:	69ba      	ldr	r2, [r7, #24]
 8001420:	4013      	ands	r3, r2
 8001422:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001424:	683b      	ldr	r3, [r7, #0]
 8001426:	685b      	ldr	r3, [r3, #4]
 8001428:	f003 0203 	and.w	r2, r3, #3
 800142c:	69fb      	ldr	r3, [r7, #28]
 800142e:	005b      	lsls	r3, r3, #1
 8001430:	fa02 f303 	lsl.w	r3, r2, r3
 8001434:	69ba      	ldr	r2, [r7, #24]
 8001436:	4313      	orrs	r3, r2
 8001438:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	69ba      	ldr	r2, [r7, #24]
 800143e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001440:	683b      	ldr	r3, [r7, #0]
 8001442:	685b      	ldr	r3, [r3, #4]
 8001444:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001448:	2b00      	cmp	r3, #0
 800144a:	f000 80b4 	beq.w	80015b6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800144e:	2300      	movs	r3, #0
 8001450:	60fb      	str	r3, [r7, #12]
 8001452:	4b60      	ldr	r3, [pc, #384]	; (80015d4 <HAL_GPIO_Init+0x30c>)
 8001454:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001456:	4a5f      	ldr	r2, [pc, #380]	; (80015d4 <HAL_GPIO_Init+0x30c>)
 8001458:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800145c:	6453      	str	r3, [r2, #68]	; 0x44
 800145e:	4b5d      	ldr	r3, [pc, #372]	; (80015d4 <HAL_GPIO_Init+0x30c>)
 8001460:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001462:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001466:	60fb      	str	r3, [r7, #12]
 8001468:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800146a:	4a5b      	ldr	r2, [pc, #364]	; (80015d8 <HAL_GPIO_Init+0x310>)
 800146c:	69fb      	ldr	r3, [r7, #28]
 800146e:	089b      	lsrs	r3, r3, #2
 8001470:	3302      	adds	r3, #2
 8001472:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001476:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001478:	69fb      	ldr	r3, [r7, #28]
 800147a:	f003 0303 	and.w	r3, r3, #3
 800147e:	009b      	lsls	r3, r3, #2
 8001480:	220f      	movs	r2, #15
 8001482:	fa02 f303 	lsl.w	r3, r2, r3
 8001486:	43db      	mvns	r3, r3
 8001488:	69ba      	ldr	r2, [r7, #24]
 800148a:	4013      	ands	r3, r2
 800148c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	4a52      	ldr	r2, [pc, #328]	; (80015dc <HAL_GPIO_Init+0x314>)
 8001492:	4293      	cmp	r3, r2
 8001494:	d02b      	beq.n	80014ee <HAL_GPIO_Init+0x226>
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	4a51      	ldr	r2, [pc, #324]	; (80015e0 <HAL_GPIO_Init+0x318>)
 800149a:	4293      	cmp	r3, r2
 800149c:	d025      	beq.n	80014ea <HAL_GPIO_Init+0x222>
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	4a50      	ldr	r2, [pc, #320]	; (80015e4 <HAL_GPIO_Init+0x31c>)
 80014a2:	4293      	cmp	r3, r2
 80014a4:	d01f      	beq.n	80014e6 <HAL_GPIO_Init+0x21e>
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	4a4f      	ldr	r2, [pc, #316]	; (80015e8 <HAL_GPIO_Init+0x320>)
 80014aa:	4293      	cmp	r3, r2
 80014ac:	d019      	beq.n	80014e2 <HAL_GPIO_Init+0x21a>
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	4a4e      	ldr	r2, [pc, #312]	; (80015ec <HAL_GPIO_Init+0x324>)
 80014b2:	4293      	cmp	r3, r2
 80014b4:	d013      	beq.n	80014de <HAL_GPIO_Init+0x216>
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	4a4d      	ldr	r2, [pc, #308]	; (80015f0 <HAL_GPIO_Init+0x328>)
 80014ba:	4293      	cmp	r3, r2
 80014bc:	d00d      	beq.n	80014da <HAL_GPIO_Init+0x212>
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	4a4c      	ldr	r2, [pc, #304]	; (80015f4 <HAL_GPIO_Init+0x32c>)
 80014c2:	4293      	cmp	r3, r2
 80014c4:	d007      	beq.n	80014d6 <HAL_GPIO_Init+0x20e>
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	4a4b      	ldr	r2, [pc, #300]	; (80015f8 <HAL_GPIO_Init+0x330>)
 80014ca:	4293      	cmp	r3, r2
 80014cc:	d101      	bne.n	80014d2 <HAL_GPIO_Init+0x20a>
 80014ce:	2307      	movs	r3, #7
 80014d0:	e00e      	b.n	80014f0 <HAL_GPIO_Init+0x228>
 80014d2:	2308      	movs	r3, #8
 80014d4:	e00c      	b.n	80014f0 <HAL_GPIO_Init+0x228>
 80014d6:	2306      	movs	r3, #6
 80014d8:	e00a      	b.n	80014f0 <HAL_GPIO_Init+0x228>
 80014da:	2305      	movs	r3, #5
 80014dc:	e008      	b.n	80014f0 <HAL_GPIO_Init+0x228>
 80014de:	2304      	movs	r3, #4
 80014e0:	e006      	b.n	80014f0 <HAL_GPIO_Init+0x228>
 80014e2:	2303      	movs	r3, #3
 80014e4:	e004      	b.n	80014f0 <HAL_GPIO_Init+0x228>
 80014e6:	2302      	movs	r3, #2
 80014e8:	e002      	b.n	80014f0 <HAL_GPIO_Init+0x228>
 80014ea:	2301      	movs	r3, #1
 80014ec:	e000      	b.n	80014f0 <HAL_GPIO_Init+0x228>
 80014ee:	2300      	movs	r3, #0
 80014f0:	69fa      	ldr	r2, [r7, #28]
 80014f2:	f002 0203 	and.w	r2, r2, #3
 80014f6:	0092      	lsls	r2, r2, #2
 80014f8:	4093      	lsls	r3, r2
 80014fa:	69ba      	ldr	r2, [r7, #24]
 80014fc:	4313      	orrs	r3, r2
 80014fe:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001500:	4935      	ldr	r1, [pc, #212]	; (80015d8 <HAL_GPIO_Init+0x310>)
 8001502:	69fb      	ldr	r3, [r7, #28]
 8001504:	089b      	lsrs	r3, r3, #2
 8001506:	3302      	adds	r3, #2
 8001508:	69ba      	ldr	r2, [r7, #24]
 800150a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800150e:	4b3b      	ldr	r3, [pc, #236]	; (80015fc <HAL_GPIO_Init+0x334>)
 8001510:	689b      	ldr	r3, [r3, #8]
 8001512:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001514:	693b      	ldr	r3, [r7, #16]
 8001516:	43db      	mvns	r3, r3
 8001518:	69ba      	ldr	r2, [r7, #24]
 800151a:	4013      	ands	r3, r2
 800151c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800151e:	683b      	ldr	r3, [r7, #0]
 8001520:	685b      	ldr	r3, [r3, #4]
 8001522:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001526:	2b00      	cmp	r3, #0
 8001528:	d003      	beq.n	8001532 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800152a:	69ba      	ldr	r2, [r7, #24]
 800152c:	693b      	ldr	r3, [r7, #16]
 800152e:	4313      	orrs	r3, r2
 8001530:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001532:	4a32      	ldr	r2, [pc, #200]	; (80015fc <HAL_GPIO_Init+0x334>)
 8001534:	69bb      	ldr	r3, [r7, #24]
 8001536:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001538:	4b30      	ldr	r3, [pc, #192]	; (80015fc <HAL_GPIO_Init+0x334>)
 800153a:	68db      	ldr	r3, [r3, #12]
 800153c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800153e:	693b      	ldr	r3, [r7, #16]
 8001540:	43db      	mvns	r3, r3
 8001542:	69ba      	ldr	r2, [r7, #24]
 8001544:	4013      	ands	r3, r2
 8001546:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001548:	683b      	ldr	r3, [r7, #0]
 800154a:	685b      	ldr	r3, [r3, #4]
 800154c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001550:	2b00      	cmp	r3, #0
 8001552:	d003      	beq.n	800155c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001554:	69ba      	ldr	r2, [r7, #24]
 8001556:	693b      	ldr	r3, [r7, #16]
 8001558:	4313      	orrs	r3, r2
 800155a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800155c:	4a27      	ldr	r2, [pc, #156]	; (80015fc <HAL_GPIO_Init+0x334>)
 800155e:	69bb      	ldr	r3, [r7, #24]
 8001560:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001562:	4b26      	ldr	r3, [pc, #152]	; (80015fc <HAL_GPIO_Init+0x334>)
 8001564:	685b      	ldr	r3, [r3, #4]
 8001566:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001568:	693b      	ldr	r3, [r7, #16]
 800156a:	43db      	mvns	r3, r3
 800156c:	69ba      	ldr	r2, [r7, #24]
 800156e:	4013      	ands	r3, r2
 8001570:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001572:	683b      	ldr	r3, [r7, #0]
 8001574:	685b      	ldr	r3, [r3, #4]
 8001576:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800157a:	2b00      	cmp	r3, #0
 800157c:	d003      	beq.n	8001586 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800157e:	69ba      	ldr	r2, [r7, #24]
 8001580:	693b      	ldr	r3, [r7, #16]
 8001582:	4313      	orrs	r3, r2
 8001584:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001586:	4a1d      	ldr	r2, [pc, #116]	; (80015fc <HAL_GPIO_Init+0x334>)
 8001588:	69bb      	ldr	r3, [r7, #24]
 800158a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800158c:	4b1b      	ldr	r3, [pc, #108]	; (80015fc <HAL_GPIO_Init+0x334>)
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001592:	693b      	ldr	r3, [r7, #16]
 8001594:	43db      	mvns	r3, r3
 8001596:	69ba      	ldr	r2, [r7, #24]
 8001598:	4013      	ands	r3, r2
 800159a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800159c:	683b      	ldr	r3, [r7, #0]
 800159e:	685b      	ldr	r3, [r3, #4]
 80015a0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d003      	beq.n	80015b0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80015a8:	69ba      	ldr	r2, [r7, #24]
 80015aa:	693b      	ldr	r3, [r7, #16]
 80015ac:	4313      	orrs	r3, r2
 80015ae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80015b0:	4a12      	ldr	r2, [pc, #72]	; (80015fc <HAL_GPIO_Init+0x334>)
 80015b2:	69bb      	ldr	r3, [r7, #24]
 80015b4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80015b6:	69fb      	ldr	r3, [r7, #28]
 80015b8:	3301      	adds	r3, #1
 80015ba:	61fb      	str	r3, [r7, #28]
 80015bc:	69fb      	ldr	r3, [r7, #28]
 80015be:	2b0f      	cmp	r3, #15
 80015c0:	f67f ae90 	bls.w	80012e4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80015c4:	bf00      	nop
 80015c6:	bf00      	nop
 80015c8:	3724      	adds	r7, #36	; 0x24
 80015ca:	46bd      	mov	sp, r7
 80015cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d0:	4770      	bx	lr
 80015d2:	bf00      	nop
 80015d4:	40023800 	.word	0x40023800
 80015d8:	40013800 	.word	0x40013800
 80015dc:	40020000 	.word	0x40020000
 80015e0:	40020400 	.word	0x40020400
 80015e4:	40020800 	.word	0x40020800
 80015e8:	40020c00 	.word	0x40020c00
 80015ec:	40021000 	.word	0x40021000
 80015f0:	40021400 	.word	0x40021400
 80015f4:	40021800 	.word	0x40021800
 80015f8:	40021c00 	.word	0x40021c00
 80015fc:	40013c00 	.word	0x40013c00

08001600 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001600:	b480      	push	{r7}
 8001602:	b083      	sub	sp, #12
 8001604:	af00      	add	r7, sp, #0
 8001606:	6078      	str	r0, [r7, #4]
 8001608:	460b      	mov	r3, r1
 800160a:	807b      	strh	r3, [r7, #2]
 800160c:	4613      	mov	r3, r2
 800160e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001610:	787b      	ldrb	r3, [r7, #1]
 8001612:	2b00      	cmp	r3, #0
 8001614:	d003      	beq.n	800161e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001616:	887a      	ldrh	r2, [r7, #2]
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800161c:	e003      	b.n	8001626 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800161e:	887b      	ldrh	r3, [r7, #2]
 8001620:	041a      	lsls	r2, r3, #16
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	619a      	str	r2, [r3, #24]
}
 8001626:	bf00      	nop
 8001628:	370c      	adds	r7, #12
 800162a:	46bd      	mov	sp, r7
 800162c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001630:	4770      	bx	lr

08001632 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8001632:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001634:	b08f      	sub	sp, #60	; 0x3c
 8001636:	af0a      	add	r7, sp, #40	; 0x28
 8001638:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	2b00      	cmp	r3, #0
 800163e:	d101      	bne.n	8001644 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8001640:	2301      	movs	r3, #1
 8001642:	e054      	b.n	80016ee <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 8001650:	b2db      	uxtb	r3, r3
 8001652:	2b00      	cmp	r3, #0
 8001654:	d106      	bne.n	8001664 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	2200      	movs	r2, #0
 800165a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 800165e:	6878      	ldr	r0, [r7, #4]
 8001660:	f006 f854 	bl	800770c <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	2203      	movs	r2, #3
 8001668:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001670:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001674:	2b00      	cmp	r3, #0
 8001676:	d102      	bne.n	800167e <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	2200      	movs	r2, #0
 800167c:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	4618      	mov	r0, r3
 8001684:	f003 f883 	bl	800478e <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	603b      	str	r3, [r7, #0]
 800168e:	687e      	ldr	r6, [r7, #4]
 8001690:	466d      	mov	r5, sp
 8001692:	f106 0410 	add.w	r4, r6, #16
 8001696:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001698:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800169a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800169c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800169e:	e894 0003 	ldmia.w	r4, {r0, r1}
 80016a2:	e885 0003 	stmia.w	r5, {r0, r1}
 80016a6:	1d33      	adds	r3, r6, #4
 80016a8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80016aa:	6838      	ldr	r0, [r7, #0]
 80016ac:	f002 fffd 	bl	80046aa <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	2101      	movs	r1, #1
 80016b6:	4618      	mov	r0, r3
 80016b8:	f003 f87a 	bl	80047b0 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	603b      	str	r3, [r7, #0]
 80016c2:	687e      	ldr	r6, [r7, #4]
 80016c4:	466d      	mov	r5, sp
 80016c6:	f106 0410 	add.w	r4, r6, #16
 80016ca:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80016cc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80016ce:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80016d0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80016d2:	e894 0003 	ldmia.w	r4, {r0, r1}
 80016d6:	e885 0003 	stmia.w	r5, {r0, r1}
 80016da:	1d33      	adds	r3, r6, #4
 80016dc:	cb0e      	ldmia	r3, {r1, r2, r3}
 80016de:	6838      	ldr	r0, [r7, #0]
 80016e0:	f003 fa02 	bl	8004ae8 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	2201      	movs	r2, #1
 80016e8:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 80016ec:	2300      	movs	r3, #0
}
 80016ee:	4618      	mov	r0, r3
 80016f0:	3714      	adds	r7, #20
 80016f2:	46bd      	mov	sp, r7
 80016f4:	bdf0      	pop	{r4, r5, r6, r7, pc}

080016f6 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 80016f6:	b590      	push	{r4, r7, lr}
 80016f8:	b089      	sub	sp, #36	; 0x24
 80016fa:	af04      	add	r7, sp, #16
 80016fc:	6078      	str	r0, [r7, #4]
 80016fe:	4608      	mov	r0, r1
 8001700:	4611      	mov	r1, r2
 8001702:	461a      	mov	r2, r3
 8001704:	4603      	mov	r3, r0
 8001706:	70fb      	strb	r3, [r7, #3]
 8001708:	460b      	mov	r3, r1
 800170a:	70bb      	strb	r3, [r7, #2]
 800170c:	4613      	mov	r3, r2
 800170e:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001716:	2b01      	cmp	r3, #1
 8001718:	d101      	bne.n	800171e <HAL_HCD_HC_Init+0x28>
 800171a:	2302      	movs	r3, #2
 800171c:	e076      	b.n	800180c <HAL_HCD_HC_Init+0x116>
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	2201      	movs	r2, #1
 8001722:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 8001726:	78fb      	ldrb	r3, [r7, #3]
 8001728:	687a      	ldr	r2, [r7, #4]
 800172a:	212c      	movs	r1, #44	; 0x2c
 800172c:	fb01 f303 	mul.w	r3, r1, r3
 8001730:	4413      	add	r3, r2
 8001732:	333d      	adds	r3, #61	; 0x3d
 8001734:	2200      	movs	r2, #0
 8001736:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8001738:	78fb      	ldrb	r3, [r7, #3]
 800173a:	687a      	ldr	r2, [r7, #4]
 800173c:	212c      	movs	r1, #44	; 0x2c
 800173e:	fb01 f303 	mul.w	r3, r1, r3
 8001742:	4413      	add	r3, r2
 8001744:	3338      	adds	r3, #56	; 0x38
 8001746:	787a      	ldrb	r2, [r7, #1]
 8001748:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 800174a:	78fb      	ldrb	r3, [r7, #3]
 800174c:	687a      	ldr	r2, [r7, #4]
 800174e:	212c      	movs	r1, #44	; 0x2c
 8001750:	fb01 f303 	mul.w	r3, r1, r3
 8001754:	4413      	add	r3, r2
 8001756:	3340      	adds	r3, #64	; 0x40
 8001758:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800175a:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 800175c:	78fb      	ldrb	r3, [r7, #3]
 800175e:	687a      	ldr	r2, [r7, #4]
 8001760:	212c      	movs	r1, #44	; 0x2c
 8001762:	fb01 f303 	mul.w	r3, r1, r3
 8001766:	4413      	add	r3, r2
 8001768:	3339      	adds	r3, #57	; 0x39
 800176a:	78fa      	ldrb	r2, [r7, #3]
 800176c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 800176e:	78fb      	ldrb	r3, [r7, #3]
 8001770:	687a      	ldr	r2, [r7, #4]
 8001772:	212c      	movs	r1, #44	; 0x2c
 8001774:	fb01 f303 	mul.w	r3, r1, r3
 8001778:	4413      	add	r3, r2
 800177a:	333f      	adds	r3, #63	; 0x3f
 800177c:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8001780:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8001782:	78fb      	ldrb	r3, [r7, #3]
 8001784:	78ba      	ldrb	r2, [r7, #2]
 8001786:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800178a:	b2d0      	uxtb	r0, r2
 800178c:	687a      	ldr	r2, [r7, #4]
 800178e:	212c      	movs	r1, #44	; 0x2c
 8001790:	fb01 f303 	mul.w	r3, r1, r3
 8001794:	4413      	add	r3, r2
 8001796:	333a      	adds	r3, #58	; 0x3a
 8001798:	4602      	mov	r2, r0
 800179a:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 800179c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	da09      	bge.n	80017b8 <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 80017a4:	78fb      	ldrb	r3, [r7, #3]
 80017a6:	687a      	ldr	r2, [r7, #4]
 80017a8:	212c      	movs	r1, #44	; 0x2c
 80017aa:	fb01 f303 	mul.w	r3, r1, r3
 80017ae:	4413      	add	r3, r2
 80017b0:	333b      	adds	r3, #59	; 0x3b
 80017b2:	2201      	movs	r2, #1
 80017b4:	701a      	strb	r2, [r3, #0]
 80017b6:	e008      	b.n	80017ca <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 80017b8:	78fb      	ldrb	r3, [r7, #3]
 80017ba:	687a      	ldr	r2, [r7, #4]
 80017bc:	212c      	movs	r1, #44	; 0x2c
 80017be:	fb01 f303 	mul.w	r3, r1, r3
 80017c2:	4413      	add	r3, r2
 80017c4:	333b      	adds	r3, #59	; 0x3b
 80017c6:	2200      	movs	r2, #0
 80017c8:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 80017ca:	78fb      	ldrb	r3, [r7, #3]
 80017cc:	687a      	ldr	r2, [r7, #4]
 80017ce:	212c      	movs	r1, #44	; 0x2c
 80017d0:	fb01 f303 	mul.w	r3, r1, r3
 80017d4:	4413      	add	r3, r2
 80017d6:	333c      	adds	r3, #60	; 0x3c
 80017d8:	f897 2020 	ldrb.w	r2, [r7, #32]
 80017dc:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	6818      	ldr	r0, [r3, #0]
 80017e2:	787c      	ldrb	r4, [r7, #1]
 80017e4:	78ba      	ldrb	r2, [r7, #2]
 80017e6:	78f9      	ldrb	r1, [r7, #3]
 80017e8:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80017ea:	9302      	str	r3, [sp, #8]
 80017ec:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80017f0:	9301      	str	r3, [sp, #4]
 80017f2:	f897 3020 	ldrb.w	r3, [r7, #32]
 80017f6:	9300      	str	r3, [sp, #0]
 80017f8:	4623      	mov	r3, r4
 80017fa:	f003 fafb 	bl	8004df4 <USB_HC_Init>
 80017fe:	4603      	mov	r3, r0
 8001800:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	2200      	movs	r2, #0
 8001806:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 800180a:	7bfb      	ldrb	r3, [r7, #15]
}
 800180c:	4618      	mov	r0, r3
 800180e:	3714      	adds	r7, #20
 8001810:	46bd      	mov	sp, r7
 8001812:	bd90      	pop	{r4, r7, pc}

08001814 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8001814:	b580      	push	{r7, lr}
 8001816:	b084      	sub	sp, #16
 8001818:	af00      	add	r7, sp, #0
 800181a:	6078      	str	r0, [r7, #4]
 800181c:	460b      	mov	r3, r1
 800181e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8001820:	2300      	movs	r3, #0
 8001822:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 800182a:	2b01      	cmp	r3, #1
 800182c:	d101      	bne.n	8001832 <HAL_HCD_HC_Halt+0x1e>
 800182e:	2302      	movs	r3, #2
 8001830:	e00f      	b.n	8001852 <HAL_HCD_HC_Halt+0x3e>
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	2201      	movs	r2, #1
 8001836:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	78fa      	ldrb	r2, [r7, #3]
 8001840:	4611      	mov	r1, r2
 8001842:	4618      	mov	r0, r3
 8001844:	f003 fd4b 	bl	80052de <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	2200      	movs	r2, #0
 800184c:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8001850:	7bfb      	ldrb	r3, [r7, #15]
}
 8001852:	4618      	mov	r0, r3
 8001854:	3710      	adds	r7, #16
 8001856:	46bd      	mov	sp, r7
 8001858:	bd80      	pop	{r7, pc}
	...

0800185c <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 800185c:	b580      	push	{r7, lr}
 800185e:	b082      	sub	sp, #8
 8001860:	af00      	add	r7, sp, #0
 8001862:	6078      	str	r0, [r7, #4]
 8001864:	4608      	mov	r0, r1
 8001866:	4611      	mov	r1, r2
 8001868:	461a      	mov	r2, r3
 800186a:	4603      	mov	r3, r0
 800186c:	70fb      	strb	r3, [r7, #3]
 800186e:	460b      	mov	r3, r1
 8001870:	70bb      	strb	r3, [r7, #2]
 8001872:	4613      	mov	r3, r2
 8001874:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8001876:	78fb      	ldrb	r3, [r7, #3]
 8001878:	687a      	ldr	r2, [r7, #4]
 800187a:	212c      	movs	r1, #44	; 0x2c
 800187c:	fb01 f303 	mul.w	r3, r1, r3
 8001880:	4413      	add	r3, r2
 8001882:	333b      	adds	r3, #59	; 0x3b
 8001884:	78ba      	ldrb	r2, [r7, #2]
 8001886:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8001888:	78fb      	ldrb	r3, [r7, #3]
 800188a:	687a      	ldr	r2, [r7, #4]
 800188c:	212c      	movs	r1, #44	; 0x2c
 800188e:	fb01 f303 	mul.w	r3, r1, r3
 8001892:	4413      	add	r3, r2
 8001894:	333f      	adds	r3, #63	; 0x3f
 8001896:	787a      	ldrb	r2, [r7, #1]
 8001898:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 800189a:	7c3b      	ldrb	r3, [r7, #16]
 800189c:	2b00      	cmp	r3, #0
 800189e:	d112      	bne.n	80018c6 <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 80018a0:	78fb      	ldrb	r3, [r7, #3]
 80018a2:	687a      	ldr	r2, [r7, #4]
 80018a4:	212c      	movs	r1, #44	; 0x2c
 80018a6:	fb01 f303 	mul.w	r3, r1, r3
 80018aa:	4413      	add	r3, r2
 80018ac:	3342      	adds	r3, #66	; 0x42
 80018ae:	2203      	movs	r2, #3
 80018b0:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 80018b2:	78fb      	ldrb	r3, [r7, #3]
 80018b4:	687a      	ldr	r2, [r7, #4]
 80018b6:	212c      	movs	r1, #44	; 0x2c
 80018b8:	fb01 f303 	mul.w	r3, r1, r3
 80018bc:	4413      	add	r3, r2
 80018be:	333d      	adds	r3, #61	; 0x3d
 80018c0:	7f3a      	ldrb	r2, [r7, #28]
 80018c2:	701a      	strb	r2, [r3, #0]
 80018c4:	e008      	b.n	80018d8 <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80018c6:	78fb      	ldrb	r3, [r7, #3]
 80018c8:	687a      	ldr	r2, [r7, #4]
 80018ca:	212c      	movs	r1, #44	; 0x2c
 80018cc:	fb01 f303 	mul.w	r3, r1, r3
 80018d0:	4413      	add	r3, r2
 80018d2:	3342      	adds	r3, #66	; 0x42
 80018d4:	2202      	movs	r2, #2
 80018d6:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 80018d8:	787b      	ldrb	r3, [r7, #1]
 80018da:	2b03      	cmp	r3, #3
 80018dc:	f200 80c6 	bhi.w	8001a6c <HAL_HCD_HC_SubmitRequest+0x210>
 80018e0:	a201      	add	r2, pc, #4	; (adr r2, 80018e8 <HAL_HCD_HC_SubmitRequest+0x8c>)
 80018e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80018e6:	bf00      	nop
 80018e8:	080018f9 	.word	0x080018f9
 80018ec:	08001a59 	.word	0x08001a59
 80018f0:	0800195d 	.word	0x0800195d
 80018f4:	080019db 	.word	0x080019db
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 80018f8:	7c3b      	ldrb	r3, [r7, #16]
 80018fa:	2b01      	cmp	r3, #1
 80018fc:	f040 80b8 	bne.w	8001a70 <HAL_HCD_HC_SubmitRequest+0x214>
 8001900:	78bb      	ldrb	r3, [r7, #2]
 8001902:	2b00      	cmp	r3, #0
 8001904:	f040 80b4 	bne.w	8001a70 <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 8001908:	8b3b      	ldrh	r3, [r7, #24]
 800190a:	2b00      	cmp	r3, #0
 800190c:	d108      	bne.n	8001920 <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 800190e:	78fb      	ldrb	r3, [r7, #3]
 8001910:	687a      	ldr	r2, [r7, #4]
 8001912:	212c      	movs	r1, #44	; 0x2c
 8001914:	fb01 f303 	mul.w	r3, r1, r3
 8001918:	4413      	add	r3, r2
 800191a:	3355      	adds	r3, #85	; 0x55
 800191c:	2201      	movs	r2, #1
 800191e:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001920:	78fb      	ldrb	r3, [r7, #3]
 8001922:	687a      	ldr	r2, [r7, #4]
 8001924:	212c      	movs	r1, #44	; 0x2c
 8001926:	fb01 f303 	mul.w	r3, r1, r3
 800192a:	4413      	add	r3, r2
 800192c:	3355      	adds	r3, #85	; 0x55
 800192e:	781b      	ldrb	r3, [r3, #0]
 8001930:	2b00      	cmp	r3, #0
 8001932:	d109      	bne.n	8001948 <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001934:	78fb      	ldrb	r3, [r7, #3]
 8001936:	687a      	ldr	r2, [r7, #4]
 8001938:	212c      	movs	r1, #44	; 0x2c
 800193a:	fb01 f303 	mul.w	r3, r1, r3
 800193e:	4413      	add	r3, r2
 8001940:	3342      	adds	r3, #66	; 0x42
 8001942:	2200      	movs	r2, #0
 8001944:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8001946:	e093      	b.n	8001a70 <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001948:	78fb      	ldrb	r3, [r7, #3]
 800194a:	687a      	ldr	r2, [r7, #4]
 800194c:	212c      	movs	r1, #44	; 0x2c
 800194e:	fb01 f303 	mul.w	r3, r1, r3
 8001952:	4413      	add	r3, r2
 8001954:	3342      	adds	r3, #66	; 0x42
 8001956:	2202      	movs	r2, #2
 8001958:	701a      	strb	r2, [r3, #0]
      break;
 800195a:	e089      	b.n	8001a70 <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 800195c:	78bb      	ldrb	r3, [r7, #2]
 800195e:	2b00      	cmp	r3, #0
 8001960:	d11d      	bne.n	800199e <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001962:	78fb      	ldrb	r3, [r7, #3]
 8001964:	687a      	ldr	r2, [r7, #4]
 8001966:	212c      	movs	r1, #44	; 0x2c
 8001968:	fb01 f303 	mul.w	r3, r1, r3
 800196c:	4413      	add	r3, r2
 800196e:	3355      	adds	r3, #85	; 0x55
 8001970:	781b      	ldrb	r3, [r3, #0]
 8001972:	2b00      	cmp	r3, #0
 8001974:	d109      	bne.n	800198a <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001976:	78fb      	ldrb	r3, [r7, #3]
 8001978:	687a      	ldr	r2, [r7, #4]
 800197a:	212c      	movs	r1, #44	; 0x2c
 800197c:	fb01 f303 	mul.w	r3, r1, r3
 8001980:	4413      	add	r3, r2
 8001982:	3342      	adds	r3, #66	; 0x42
 8001984:	2200      	movs	r2, #0
 8001986:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8001988:	e073      	b.n	8001a72 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800198a:	78fb      	ldrb	r3, [r7, #3]
 800198c:	687a      	ldr	r2, [r7, #4]
 800198e:	212c      	movs	r1, #44	; 0x2c
 8001990:	fb01 f303 	mul.w	r3, r1, r3
 8001994:	4413      	add	r3, r2
 8001996:	3342      	adds	r3, #66	; 0x42
 8001998:	2202      	movs	r2, #2
 800199a:	701a      	strb	r2, [r3, #0]
      break;
 800199c:	e069      	b.n	8001a72 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 800199e:	78fb      	ldrb	r3, [r7, #3]
 80019a0:	687a      	ldr	r2, [r7, #4]
 80019a2:	212c      	movs	r1, #44	; 0x2c
 80019a4:	fb01 f303 	mul.w	r3, r1, r3
 80019a8:	4413      	add	r3, r2
 80019aa:	3354      	adds	r3, #84	; 0x54
 80019ac:	781b      	ldrb	r3, [r3, #0]
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d109      	bne.n	80019c6 <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80019b2:	78fb      	ldrb	r3, [r7, #3]
 80019b4:	687a      	ldr	r2, [r7, #4]
 80019b6:	212c      	movs	r1, #44	; 0x2c
 80019b8:	fb01 f303 	mul.w	r3, r1, r3
 80019bc:	4413      	add	r3, r2
 80019be:	3342      	adds	r3, #66	; 0x42
 80019c0:	2200      	movs	r2, #0
 80019c2:	701a      	strb	r2, [r3, #0]
      break;
 80019c4:	e055      	b.n	8001a72 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80019c6:	78fb      	ldrb	r3, [r7, #3]
 80019c8:	687a      	ldr	r2, [r7, #4]
 80019ca:	212c      	movs	r1, #44	; 0x2c
 80019cc:	fb01 f303 	mul.w	r3, r1, r3
 80019d0:	4413      	add	r3, r2
 80019d2:	3342      	adds	r3, #66	; 0x42
 80019d4:	2202      	movs	r2, #2
 80019d6:	701a      	strb	r2, [r3, #0]
      break;
 80019d8:	e04b      	b.n	8001a72 <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 80019da:	78bb      	ldrb	r3, [r7, #2]
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d11d      	bne.n	8001a1c <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80019e0:	78fb      	ldrb	r3, [r7, #3]
 80019e2:	687a      	ldr	r2, [r7, #4]
 80019e4:	212c      	movs	r1, #44	; 0x2c
 80019e6:	fb01 f303 	mul.w	r3, r1, r3
 80019ea:	4413      	add	r3, r2
 80019ec:	3355      	adds	r3, #85	; 0x55
 80019ee:	781b      	ldrb	r3, [r3, #0]
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d109      	bne.n	8001a08 <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80019f4:	78fb      	ldrb	r3, [r7, #3]
 80019f6:	687a      	ldr	r2, [r7, #4]
 80019f8:	212c      	movs	r1, #44	; 0x2c
 80019fa:	fb01 f303 	mul.w	r3, r1, r3
 80019fe:	4413      	add	r3, r2
 8001a00:	3342      	adds	r3, #66	; 0x42
 8001a02:	2200      	movs	r2, #0
 8001a04:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8001a06:	e034      	b.n	8001a72 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001a08:	78fb      	ldrb	r3, [r7, #3]
 8001a0a:	687a      	ldr	r2, [r7, #4]
 8001a0c:	212c      	movs	r1, #44	; 0x2c
 8001a0e:	fb01 f303 	mul.w	r3, r1, r3
 8001a12:	4413      	add	r3, r2
 8001a14:	3342      	adds	r3, #66	; 0x42
 8001a16:	2202      	movs	r2, #2
 8001a18:	701a      	strb	r2, [r3, #0]
      break;
 8001a1a:	e02a      	b.n	8001a72 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001a1c:	78fb      	ldrb	r3, [r7, #3]
 8001a1e:	687a      	ldr	r2, [r7, #4]
 8001a20:	212c      	movs	r1, #44	; 0x2c
 8001a22:	fb01 f303 	mul.w	r3, r1, r3
 8001a26:	4413      	add	r3, r2
 8001a28:	3354      	adds	r3, #84	; 0x54
 8001a2a:	781b      	ldrb	r3, [r3, #0]
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d109      	bne.n	8001a44 <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001a30:	78fb      	ldrb	r3, [r7, #3]
 8001a32:	687a      	ldr	r2, [r7, #4]
 8001a34:	212c      	movs	r1, #44	; 0x2c
 8001a36:	fb01 f303 	mul.w	r3, r1, r3
 8001a3a:	4413      	add	r3, r2
 8001a3c:	3342      	adds	r3, #66	; 0x42
 8001a3e:	2200      	movs	r2, #0
 8001a40:	701a      	strb	r2, [r3, #0]
      break;
 8001a42:	e016      	b.n	8001a72 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001a44:	78fb      	ldrb	r3, [r7, #3]
 8001a46:	687a      	ldr	r2, [r7, #4]
 8001a48:	212c      	movs	r1, #44	; 0x2c
 8001a4a:	fb01 f303 	mul.w	r3, r1, r3
 8001a4e:	4413      	add	r3, r2
 8001a50:	3342      	adds	r3, #66	; 0x42
 8001a52:	2202      	movs	r2, #2
 8001a54:	701a      	strb	r2, [r3, #0]
      break;
 8001a56:	e00c      	b.n	8001a72 <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001a58:	78fb      	ldrb	r3, [r7, #3]
 8001a5a:	687a      	ldr	r2, [r7, #4]
 8001a5c:	212c      	movs	r1, #44	; 0x2c
 8001a5e:	fb01 f303 	mul.w	r3, r1, r3
 8001a62:	4413      	add	r3, r2
 8001a64:	3342      	adds	r3, #66	; 0x42
 8001a66:	2200      	movs	r2, #0
 8001a68:	701a      	strb	r2, [r3, #0]
      break;
 8001a6a:	e002      	b.n	8001a72 <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 8001a6c:	bf00      	nop
 8001a6e:	e000      	b.n	8001a72 <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 8001a70:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8001a72:	78fb      	ldrb	r3, [r7, #3]
 8001a74:	687a      	ldr	r2, [r7, #4]
 8001a76:	212c      	movs	r1, #44	; 0x2c
 8001a78:	fb01 f303 	mul.w	r3, r1, r3
 8001a7c:	4413      	add	r3, r2
 8001a7e:	3344      	adds	r3, #68	; 0x44
 8001a80:	697a      	ldr	r2, [r7, #20]
 8001a82:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8001a84:	78fb      	ldrb	r3, [r7, #3]
 8001a86:	8b3a      	ldrh	r2, [r7, #24]
 8001a88:	6879      	ldr	r1, [r7, #4]
 8001a8a:	202c      	movs	r0, #44	; 0x2c
 8001a8c:	fb00 f303 	mul.w	r3, r0, r3
 8001a90:	440b      	add	r3, r1
 8001a92:	334c      	adds	r3, #76	; 0x4c
 8001a94:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8001a96:	78fb      	ldrb	r3, [r7, #3]
 8001a98:	687a      	ldr	r2, [r7, #4]
 8001a9a:	212c      	movs	r1, #44	; 0x2c
 8001a9c:	fb01 f303 	mul.w	r3, r1, r3
 8001aa0:	4413      	add	r3, r2
 8001aa2:	3360      	adds	r3, #96	; 0x60
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8001aa8:	78fb      	ldrb	r3, [r7, #3]
 8001aaa:	687a      	ldr	r2, [r7, #4]
 8001aac:	212c      	movs	r1, #44	; 0x2c
 8001aae:	fb01 f303 	mul.w	r3, r1, r3
 8001ab2:	4413      	add	r3, r2
 8001ab4:	3350      	adds	r3, #80	; 0x50
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001aba:	78fb      	ldrb	r3, [r7, #3]
 8001abc:	687a      	ldr	r2, [r7, #4]
 8001abe:	212c      	movs	r1, #44	; 0x2c
 8001ac0:	fb01 f303 	mul.w	r3, r1, r3
 8001ac4:	4413      	add	r3, r2
 8001ac6:	3339      	adds	r3, #57	; 0x39
 8001ac8:	78fa      	ldrb	r2, [r7, #3]
 8001aca:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8001acc:	78fb      	ldrb	r3, [r7, #3]
 8001ace:	687a      	ldr	r2, [r7, #4]
 8001ad0:	212c      	movs	r1, #44	; 0x2c
 8001ad2:	fb01 f303 	mul.w	r3, r1, r3
 8001ad6:	4413      	add	r3, r2
 8001ad8:	3361      	adds	r3, #97	; 0x61
 8001ada:	2200      	movs	r2, #0
 8001adc:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	6818      	ldr	r0, [r3, #0]
 8001ae2:	78fb      	ldrb	r3, [r7, #3]
 8001ae4:	222c      	movs	r2, #44	; 0x2c
 8001ae6:	fb02 f303 	mul.w	r3, r2, r3
 8001aea:	3338      	adds	r3, #56	; 0x38
 8001aec:	687a      	ldr	r2, [r7, #4]
 8001aee:	18d1      	adds	r1, r2, r3
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	691b      	ldr	r3, [r3, #16]
 8001af4:	b2db      	uxtb	r3, r3
 8001af6:	461a      	mov	r2, r3
 8001af8:	f003 fa9e 	bl	8005038 <USB_HC_StartXfer>
 8001afc:	4603      	mov	r3, r0
}
 8001afe:	4618      	mov	r0, r3
 8001b00:	3708      	adds	r7, #8
 8001b02:	46bd      	mov	sp, r7
 8001b04:	bd80      	pop	{r7, pc}
 8001b06:	bf00      	nop

08001b08 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	b086      	sub	sp, #24
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001b16:	693b      	ldr	r3, [r7, #16]
 8001b18:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	4618      	mov	r0, r3
 8001b20:	f002 ff9f 	bl	8004a62 <USB_GetMode>
 8001b24:	4603      	mov	r3, r0
 8001b26:	2b01      	cmp	r3, #1
 8001b28:	f040 80f6 	bne.w	8001d18 <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	4618      	mov	r0, r3
 8001b32:	f002 ff83 	bl	8004a3c <USB_ReadInterrupts>
 8001b36:	4603      	mov	r3, r0
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	f000 80ec 	beq.w	8001d16 <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	4618      	mov	r0, r3
 8001b44:	f002 ff7a 	bl	8004a3c <USB_ReadInterrupts>
 8001b48:	4603      	mov	r3, r0
 8001b4a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b4e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001b52:	d104      	bne.n	8001b5e <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001b5c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	4618      	mov	r0, r3
 8001b64:	f002 ff6a 	bl	8004a3c <USB_ReadInterrupts>
 8001b68:	4603      	mov	r3, r0
 8001b6a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001b6e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001b72:	d104      	bne.n	8001b7e <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001b7c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	4618      	mov	r0, r3
 8001b84:	f002 ff5a 	bl	8004a3c <USB_ReadInterrupts>
 8001b88:	4603      	mov	r3, r0
 8001b8a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001b8e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001b92:	d104      	bne.n	8001b9e <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001b9c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	4618      	mov	r0, r3
 8001ba4:	f002 ff4a 	bl	8004a3c <USB_ReadInterrupts>
 8001ba8:	4603      	mov	r3, r0
 8001baa:	f003 0302 	and.w	r3, r3, #2
 8001bae:	2b02      	cmp	r3, #2
 8001bb0:	d103      	bne.n	8001bba <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	2202      	movs	r2, #2
 8001bb8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	4618      	mov	r0, r3
 8001bc0:	f002 ff3c 	bl	8004a3c <USB_ReadInterrupts>
 8001bc4:	4603      	mov	r3, r0
 8001bc6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001bca:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001bce:	d11c      	bne.n	8001c0a <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8001bd8:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	f003 0301 	and.w	r3, r3, #1
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d10f      	bne.n	8001c0a <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8001bea:	2110      	movs	r1, #16
 8001bec:	6938      	ldr	r0, [r7, #16]
 8001bee:	f002 fe2b 	bl	8004848 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8001bf2:	6938      	ldr	r0, [r7, #16]
 8001bf4:	f002 fe5c 	bl	80048b0 <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	2101      	movs	r1, #1
 8001bfe:	4618      	mov	r0, r3
 8001c00:	f003 f832 	bl	8004c68 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8001c04:	6878      	ldr	r0, [r7, #4]
 8001c06:	f005 fdff 	bl	8007808 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	4618      	mov	r0, r3
 8001c10:	f002 ff14 	bl	8004a3c <USB_ReadInterrupts>
 8001c14:	4603      	mov	r3, r0
 8001c16:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001c1a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001c1e:	d102      	bne.n	8001c26 <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 8001c20:	6878      	ldr	r0, [r7, #4]
 8001c22:	f001 f89e 	bl	8002d62 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	4618      	mov	r0, r3
 8001c2c:	f002 ff06 	bl	8004a3c <USB_ReadInterrupts>
 8001c30:	4603      	mov	r3, r0
 8001c32:	f003 0308 	and.w	r3, r3, #8
 8001c36:	2b08      	cmp	r3, #8
 8001c38:	d106      	bne.n	8001c48 <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8001c3a:	6878      	ldr	r0, [r7, #4]
 8001c3c:	f005 fdc8 	bl	80077d0 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	2208      	movs	r2, #8
 8001c46:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	4618      	mov	r0, r3
 8001c4e:	f002 fef5 	bl	8004a3c <USB_ReadInterrupts>
 8001c52:	4603      	mov	r3, r0
 8001c54:	f003 0310 	and.w	r3, r3, #16
 8001c58:	2b10      	cmp	r3, #16
 8001c5a:	d101      	bne.n	8001c60 <HAL_HCD_IRQHandler+0x158>
 8001c5c:	2301      	movs	r3, #1
 8001c5e:	e000      	b.n	8001c62 <HAL_HCD_IRQHandler+0x15a>
 8001c60:	2300      	movs	r3, #0
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d012      	beq.n	8001c8c <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	699a      	ldr	r2, [r3, #24]
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	f022 0210 	bic.w	r2, r2, #16
 8001c74:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8001c76:	6878      	ldr	r0, [r7, #4]
 8001c78:	f000 ffa1 	bl	8002bbe <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	699a      	ldr	r2, [r3, #24]
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	f042 0210 	orr.w	r2, r2, #16
 8001c8a:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	4618      	mov	r0, r3
 8001c92:	f002 fed3 	bl	8004a3c <USB_ReadInterrupts>
 8001c96:	4603      	mov	r3, r0
 8001c98:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c9c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001ca0:	d13a      	bne.n	8001d18 <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	4618      	mov	r0, r3
 8001ca8:	f003 fb08 	bl	80052bc <USB_HC_ReadInterrupt>
 8001cac:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001cae:	2300      	movs	r3, #0
 8001cb0:	617b      	str	r3, [r7, #20]
 8001cb2:	e025      	b.n	8001d00 <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8001cb4:	697b      	ldr	r3, [r7, #20]
 8001cb6:	f003 030f 	and.w	r3, r3, #15
 8001cba:	68ba      	ldr	r2, [r7, #8]
 8001cbc:	fa22 f303 	lsr.w	r3, r2, r3
 8001cc0:	f003 0301 	and.w	r3, r3, #1
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d018      	beq.n	8001cfa <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8001cc8:	697b      	ldr	r3, [r7, #20]
 8001cca:	015a      	lsls	r2, r3, #5
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	4413      	add	r3, r2
 8001cd0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001cda:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001cde:	d106      	bne.n	8001cee <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8001ce0:	697b      	ldr	r3, [r7, #20]
 8001ce2:	b2db      	uxtb	r3, r3
 8001ce4:	4619      	mov	r1, r3
 8001ce6:	6878      	ldr	r0, [r7, #4]
 8001ce8:	f000 f8ab 	bl	8001e42 <HCD_HC_IN_IRQHandler>
 8001cec:	e005      	b.n	8001cfa <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8001cee:	697b      	ldr	r3, [r7, #20]
 8001cf0:	b2db      	uxtb	r3, r3
 8001cf2:	4619      	mov	r1, r3
 8001cf4:	6878      	ldr	r0, [r7, #4]
 8001cf6:	f000 fbf9 	bl	80024ec <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001cfa:	697b      	ldr	r3, [r7, #20]
 8001cfc:	3301      	adds	r3, #1
 8001cfe:	617b      	str	r3, [r7, #20]
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	689b      	ldr	r3, [r3, #8]
 8001d04:	697a      	ldr	r2, [r7, #20]
 8001d06:	429a      	cmp	r2, r3
 8001d08:	d3d4      	bcc.n	8001cb4 <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001d12:	615a      	str	r2, [r3, #20]
 8001d14:	e000      	b.n	8001d18 <HAL_HCD_IRQHandler+0x210>
      return;
 8001d16:	bf00      	nop
    }
  }
}
 8001d18:	3718      	adds	r7, #24
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	bd80      	pop	{r7, pc}

08001d1e <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8001d1e:	b580      	push	{r7, lr}
 8001d20:	b082      	sub	sp, #8
 8001d22:	af00      	add	r7, sp, #0
 8001d24:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001d2c:	2b01      	cmp	r3, #1
 8001d2e:	d101      	bne.n	8001d34 <HAL_HCD_Start+0x16>
 8001d30:	2302      	movs	r3, #2
 8001d32:	e013      	b.n	8001d5c <HAL_HCD_Start+0x3e>
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	2201      	movs	r2, #1
 8001d38:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	2101      	movs	r1, #1
 8001d42:	4618      	mov	r0, r3
 8001d44:	f002 fff4 	bl	8004d30 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	4618      	mov	r0, r3
 8001d4e:	f002 fd0d 	bl	800476c <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	2200      	movs	r2, #0
 8001d56:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8001d5a:	2300      	movs	r3, #0
}
 8001d5c:	4618      	mov	r0, r3
 8001d5e:	3708      	adds	r7, #8
 8001d60:	46bd      	mov	sp, r7
 8001d62:	bd80      	pop	{r7, pc}

08001d64 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8001d64:	b580      	push	{r7, lr}
 8001d66:	b082      	sub	sp, #8
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001d72:	2b01      	cmp	r3, #1
 8001d74:	d101      	bne.n	8001d7a <HAL_HCD_Stop+0x16>
 8001d76:	2302      	movs	r3, #2
 8001d78:	e00d      	b.n	8001d96 <HAL_HCD_Stop+0x32>
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	2201      	movs	r2, #1
 8001d7e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	4618      	mov	r0, r3
 8001d88:	f003 fbe2 	bl	8005550 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	2200      	movs	r2, #0
 8001d90:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8001d94:	2300      	movs	r3, #0
}
 8001d96:	4618      	mov	r0, r3
 8001d98:	3708      	adds	r7, #8
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	bd80      	pop	{r7, pc}

08001d9e <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8001d9e:	b580      	push	{r7, lr}
 8001da0:	b082      	sub	sp, #8
 8001da2:	af00      	add	r7, sp, #0
 8001da4:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	4618      	mov	r0, r3
 8001dac:	f002 ff96 	bl	8004cdc <USB_ResetPort>
 8001db0:	4603      	mov	r3, r0
}
 8001db2:	4618      	mov	r0, r3
 8001db4:	3708      	adds	r7, #8
 8001db6:	46bd      	mov	sp, r7
 8001db8:	bd80      	pop	{r7, pc}

08001dba <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001dba:	b480      	push	{r7}
 8001dbc:	b083      	sub	sp, #12
 8001dbe:	af00      	add	r7, sp, #0
 8001dc0:	6078      	str	r0, [r7, #4]
 8001dc2:	460b      	mov	r3, r1
 8001dc4:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8001dc6:	78fb      	ldrb	r3, [r7, #3]
 8001dc8:	687a      	ldr	r2, [r7, #4]
 8001dca:	212c      	movs	r1, #44	; 0x2c
 8001dcc:	fb01 f303 	mul.w	r3, r1, r3
 8001dd0:	4413      	add	r3, r2
 8001dd2:	3360      	adds	r3, #96	; 0x60
 8001dd4:	781b      	ldrb	r3, [r3, #0]
}
 8001dd6:	4618      	mov	r0, r3
 8001dd8:	370c      	adds	r7, #12
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de0:	4770      	bx	lr

08001de2 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001de2:	b480      	push	{r7}
 8001de4:	b083      	sub	sp, #12
 8001de6:	af00      	add	r7, sp, #0
 8001de8:	6078      	str	r0, [r7, #4]
 8001dea:	460b      	mov	r3, r1
 8001dec:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8001dee:	78fb      	ldrb	r3, [r7, #3]
 8001df0:	687a      	ldr	r2, [r7, #4]
 8001df2:	212c      	movs	r1, #44	; 0x2c
 8001df4:	fb01 f303 	mul.w	r3, r1, r3
 8001df8:	4413      	add	r3, r2
 8001dfa:	3350      	adds	r3, #80	; 0x50
 8001dfc:	681b      	ldr	r3, [r3, #0]
}
 8001dfe:	4618      	mov	r0, r3
 8001e00:	370c      	adds	r7, #12
 8001e02:	46bd      	mov	sp, r7
 8001e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e08:	4770      	bx	lr

08001e0a <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8001e0a:	b580      	push	{r7, lr}
 8001e0c:	b082      	sub	sp, #8
 8001e0e:	af00      	add	r7, sp, #0
 8001e10:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	4618      	mov	r0, r3
 8001e18:	f002 ffda 	bl	8004dd0 <USB_GetCurrentFrame>
 8001e1c:	4603      	mov	r3, r0
}
 8001e1e:	4618      	mov	r0, r3
 8001e20:	3708      	adds	r7, #8
 8001e22:	46bd      	mov	sp, r7
 8001e24:	bd80      	pop	{r7, pc}

08001e26 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8001e26:	b580      	push	{r7, lr}
 8001e28:	b082      	sub	sp, #8
 8001e2a:	af00      	add	r7, sp, #0
 8001e2c:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	4618      	mov	r0, r3
 8001e34:	f002 ffb5 	bl	8004da2 <USB_GetHostSpeed>
 8001e38:	4603      	mov	r3, r0
}
 8001e3a:	4618      	mov	r0, r3
 8001e3c:	3708      	adds	r7, #8
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	bd80      	pop	{r7, pc}

08001e42 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001e42:	b580      	push	{r7, lr}
 8001e44:	b086      	sub	sp, #24
 8001e46:	af00      	add	r7, sp, #0
 8001e48:	6078      	str	r0, [r7, #4]
 8001e4a:	460b      	mov	r3, r1
 8001e4c:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001e54:	697b      	ldr	r3, [r7, #20]
 8001e56:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8001e58:	78fb      	ldrb	r3, [r7, #3]
 8001e5a:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	015a      	lsls	r2, r3, #5
 8001e60:	693b      	ldr	r3, [r7, #16]
 8001e62:	4413      	add	r3, r2
 8001e64:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e68:	689b      	ldr	r3, [r3, #8]
 8001e6a:	f003 0304 	and.w	r3, r3, #4
 8001e6e:	2b04      	cmp	r3, #4
 8001e70:	d11a      	bne.n	8001ea8 <HCD_HC_IN_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	015a      	lsls	r2, r3, #5
 8001e76:	693b      	ldr	r3, [r7, #16]
 8001e78:	4413      	add	r3, r2
 8001e7a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e7e:	461a      	mov	r2, r3
 8001e80:	2304      	movs	r3, #4
 8001e82:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8001e84:	687a      	ldr	r2, [r7, #4]
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	212c      	movs	r1, #44	; 0x2c
 8001e8a:	fb01 f303 	mul.w	r3, r1, r3
 8001e8e:	4413      	add	r3, r2
 8001e90:	3361      	adds	r3, #97	; 0x61
 8001e92:	2206      	movs	r2, #6
 8001e94:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	68fa      	ldr	r2, [r7, #12]
 8001e9c:	b2d2      	uxtb	r2, r2
 8001e9e:	4611      	mov	r1, r2
 8001ea0:	4618      	mov	r0, r3
 8001ea2:	f003 fa1c 	bl	80052de <USB_HC_Halt>
 8001ea6:	e0af      	b.n	8002008 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	015a      	lsls	r2, r3, #5
 8001eac:	693b      	ldr	r3, [r7, #16]
 8001eae:	4413      	add	r3, r2
 8001eb0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001eb4:	689b      	ldr	r3, [r3, #8]
 8001eb6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001eba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001ebe:	d11b      	bne.n	8001ef8 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	015a      	lsls	r2, r3, #5
 8001ec4:	693b      	ldr	r3, [r7, #16]
 8001ec6:	4413      	add	r3, r2
 8001ec8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ecc:	461a      	mov	r2, r3
 8001ece:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001ed2:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8001ed4:	687a      	ldr	r2, [r7, #4]
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	212c      	movs	r1, #44	; 0x2c
 8001eda:	fb01 f303 	mul.w	r3, r1, r3
 8001ede:	4413      	add	r3, r2
 8001ee0:	3361      	adds	r3, #97	; 0x61
 8001ee2:	2207      	movs	r2, #7
 8001ee4:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	68fa      	ldr	r2, [r7, #12]
 8001eec:	b2d2      	uxtb	r2, r2
 8001eee:	4611      	mov	r1, r2
 8001ef0:	4618      	mov	r0, r3
 8001ef2:	f003 f9f4 	bl	80052de <USB_HC_Halt>
 8001ef6:	e087      	b.n	8002008 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	015a      	lsls	r2, r3, #5
 8001efc:	693b      	ldr	r3, [r7, #16]
 8001efe:	4413      	add	r3, r2
 8001f00:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f04:	689b      	ldr	r3, [r3, #8]
 8001f06:	f003 0320 	and.w	r3, r3, #32
 8001f0a:	2b20      	cmp	r3, #32
 8001f0c:	d109      	bne.n	8001f22 <HCD_HC_IN_IRQHandler+0xe0>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	015a      	lsls	r2, r3, #5
 8001f12:	693b      	ldr	r3, [r7, #16]
 8001f14:	4413      	add	r3, r2
 8001f16:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f1a:	461a      	mov	r2, r3
 8001f1c:	2320      	movs	r3, #32
 8001f1e:	6093      	str	r3, [r2, #8]
 8001f20:	e072      	b.n	8002008 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	015a      	lsls	r2, r3, #5
 8001f26:	693b      	ldr	r3, [r7, #16]
 8001f28:	4413      	add	r3, r2
 8001f2a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f2e:	689b      	ldr	r3, [r3, #8]
 8001f30:	f003 0308 	and.w	r3, r3, #8
 8001f34:	2b08      	cmp	r3, #8
 8001f36:	d11a      	bne.n	8001f6e <HCD_HC_IN_IRQHandler+0x12c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	015a      	lsls	r2, r3, #5
 8001f3c:	693b      	ldr	r3, [r7, #16]
 8001f3e:	4413      	add	r3, r2
 8001f40:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f44:	461a      	mov	r2, r3
 8001f46:	2308      	movs	r3, #8
 8001f48:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8001f4a:	687a      	ldr	r2, [r7, #4]
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	212c      	movs	r1, #44	; 0x2c
 8001f50:	fb01 f303 	mul.w	r3, r1, r3
 8001f54:	4413      	add	r3, r2
 8001f56:	3361      	adds	r3, #97	; 0x61
 8001f58:	2205      	movs	r2, #5
 8001f5a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	68fa      	ldr	r2, [r7, #12]
 8001f62:	b2d2      	uxtb	r2, r2
 8001f64:	4611      	mov	r1, r2
 8001f66:	4618      	mov	r0, r3
 8001f68:	f003 f9b9 	bl	80052de <USB_HC_Halt>
 8001f6c:	e04c      	b.n	8002008 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	015a      	lsls	r2, r3, #5
 8001f72:	693b      	ldr	r3, [r7, #16]
 8001f74:	4413      	add	r3, r2
 8001f76:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f7a:	689b      	ldr	r3, [r3, #8]
 8001f7c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f80:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001f84:	d11b      	bne.n	8001fbe <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	015a      	lsls	r2, r3, #5
 8001f8a:	693b      	ldr	r3, [r7, #16]
 8001f8c:	4413      	add	r3, r2
 8001f8e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f92:	461a      	mov	r2, r3
 8001f94:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001f98:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8001f9a:	687a      	ldr	r2, [r7, #4]
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	212c      	movs	r1, #44	; 0x2c
 8001fa0:	fb01 f303 	mul.w	r3, r1, r3
 8001fa4:	4413      	add	r3, r2
 8001fa6:	3361      	adds	r3, #97	; 0x61
 8001fa8:	2208      	movs	r2, #8
 8001faa:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	68fa      	ldr	r2, [r7, #12]
 8001fb2:	b2d2      	uxtb	r2, r2
 8001fb4:	4611      	mov	r1, r2
 8001fb6:	4618      	mov	r0, r3
 8001fb8:	f003 f991 	bl	80052de <USB_HC_Halt>
 8001fbc:	e024      	b.n	8002008 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	015a      	lsls	r2, r3, #5
 8001fc2:	693b      	ldr	r3, [r7, #16]
 8001fc4:	4413      	add	r3, r2
 8001fc6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001fca:	689b      	ldr	r3, [r3, #8]
 8001fcc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001fd0:	2b80      	cmp	r3, #128	; 0x80
 8001fd2:	d119      	bne.n	8002008 <HCD_HC_IN_IRQHandler+0x1c6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	015a      	lsls	r2, r3, #5
 8001fd8:	693b      	ldr	r3, [r7, #16]
 8001fda:	4413      	add	r3, r2
 8001fdc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001fe0:	461a      	mov	r2, r3
 8001fe2:	2380      	movs	r3, #128	; 0x80
 8001fe4:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8001fe6:	687a      	ldr	r2, [r7, #4]
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	212c      	movs	r1, #44	; 0x2c
 8001fec:	fb01 f303 	mul.w	r3, r1, r3
 8001ff0:	4413      	add	r3, r2
 8001ff2:	3361      	adds	r3, #97	; 0x61
 8001ff4:	2206      	movs	r2, #6
 8001ff6:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	68fa      	ldr	r2, [r7, #12]
 8001ffe:	b2d2      	uxtb	r2, r2
 8002000:	4611      	mov	r1, r2
 8002002:	4618      	mov	r0, r3
 8002004:	f003 f96b 	bl	80052de <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	015a      	lsls	r2, r3, #5
 800200c:	693b      	ldr	r3, [r7, #16]
 800200e:	4413      	add	r3, r2
 8002010:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002014:	689b      	ldr	r3, [r3, #8]
 8002016:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800201a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800201e:	d112      	bne.n	8002046 <HCD_HC_IN_IRQHandler+0x204>
  {
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	68fa      	ldr	r2, [r7, #12]
 8002026:	b2d2      	uxtb	r2, r2
 8002028:	4611      	mov	r1, r2
 800202a:	4618      	mov	r0, r3
 800202c:	f003 f957 	bl	80052de <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	015a      	lsls	r2, r3, #5
 8002034:	693b      	ldr	r3, [r7, #16]
 8002036:	4413      	add	r3, r2
 8002038:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800203c:	461a      	mov	r2, r3
 800203e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002042:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8002044:	e24e      	b.n	80024e4 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	015a      	lsls	r2, r3, #5
 800204a:	693b      	ldr	r3, [r7, #16]
 800204c:	4413      	add	r3, r2
 800204e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002052:	689b      	ldr	r3, [r3, #8]
 8002054:	f003 0301 	and.w	r3, r3, #1
 8002058:	2b01      	cmp	r3, #1
 800205a:	f040 80df 	bne.w	800221c <HCD_HC_IN_IRQHandler+0x3da>
    if (hhcd->Init.dma_enable != 0U)
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	691b      	ldr	r3, [r3, #16]
 8002062:	2b00      	cmp	r3, #0
 8002064:	d019      	beq.n	800209a <HCD_HC_IN_IRQHandler+0x258>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8002066:	687a      	ldr	r2, [r7, #4]
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	212c      	movs	r1, #44	; 0x2c
 800206c:	fb01 f303 	mul.w	r3, r1, r3
 8002070:	4413      	add	r3, r2
 8002072:	3348      	adds	r3, #72	; 0x48
 8002074:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	0159      	lsls	r1, r3, #5
 800207a:	693b      	ldr	r3, [r7, #16]
 800207c:	440b      	add	r3, r1
 800207e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002082:	691b      	ldr	r3, [r3, #16]
 8002084:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8002088:	1ad2      	subs	r2, r2, r3
 800208a:	6879      	ldr	r1, [r7, #4]
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	202c      	movs	r0, #44	; 0x2c
 8002090:	fb00 f303 	mul.w	r3, r0, r3
 8002094:	440b      	add	r3, r1
 8002096:	3350      	adds	r3, #80	; 0x50
 8002098:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 800209a:	687a      	ldr	r2, [r7, #4]
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	212c      	movs	r1, #44	; 0x2c
 80020a0:	fb01 f303 	mul.w	r3, r1, r3
 80020a4:	4413      	add	r3, r2
 80020a6:	3361      	adds	r3, #97	; 0x61
 80020a8:	2201      	movs	r2, #1
 80020aa:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 80020ac:	687a      	ldr	r2, [r7, #4]
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	212c      	movs	r1, #44	; 0x2c
 80020b2:	fb01 f303 	mul.w	r3, r1, r3
 80020b6:	4413      	add	r3, r2
 80020b8:	335c      	adds	r3, #92	; 0x5c
 80020ba:	2200      	movs	r2, #0
 80020bc:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	015a      	lsls	r2, r3, #5
 80020c2:	693b      	ldr	r3, [r7, #16]
 80020c4:	4413      	add	r3, r2
 80020c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80020ca:	461a      	mov	r2, r3
 80020cc:	2301      	movs	r3, #1
 80020ce:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80020d0:	687a      	ldr	r2, [r7, #4]
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	212c      	movs	r1, #44	; 0x2c
 80020d6:	fb01 f303 	mul.w	r3, r1, r3
 80020da:	4413      	add	r3, r2
 80020dc:	333f      	adds	r3, #63	; 0x3f
 80020de:	781b      	ldrb	r3, [r3, #0]
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d009      	beq.n	80020f8 <HCD_HC_IN_IRQHandler+0x2b6>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 80020e4:	687a      	ldr	r2, [r7, #4]
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	212c      	movs	r1, #44	; 0x2c
 80020ea:	fb01 f303 	mul.w	r3, r1, r3
 80020ee:	4413      	add	r3, r2
 80020f0:	333f      	adds	r3, #63	; 0x3f
 80020f2:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80020f4:	2b02      	cmp	r3, #2
 80020f6:	d111      	bne.n	800211c <HCD_HC_IN_IRQHandler+0x2da>
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	68fa      	ldr	r2, [r7, #12]
 80020fe:	b2d2      	uxtb	r2, r2
 8002100:	4611      	mov	r1, r2
 8002102:	4618      	mov	r0, r3
 8002104:	f003 f8eb 	bl	80052de <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	015a      	lsls	r2, r3, #5
 800210c:	693b      	ldr	r3, [r7, #16]
 800210e:	4413      	add	r3, r2
 8002110:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002114:	461a      	mov	r2, r3
 8002116:	2310      	movs	r3, #16
 8002118:	6093      	str	r3, [r2, #8]
 800211a:	e03a      	b.n	8002192 <HCD_HC_IN_IRQHandler+0x350>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 800211c:	687a      	ldr	r2, [r7, #4]
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	212c      	movs	r1, #44	; 0x2c
 8002122:	fb01 f303 	mul.w	r3, r1, r3
 8002126:	4413      	add	r3, r2
 8002128:	333f      	adds	r3, #63	; 0x3f
 800212a:	781b      	ldrb	r3, [r3, #0]
 800212c:	2b03      	cmp	r3, #3
 800212e:	d009      	beq.n	8002144 <HCD_HC_IN_IRQHandler+0x302>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC))
 8002130:	687a      	ldr	r2, [r7, #4]
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	212c      	movs	r1, #44	; 0x2c
 8002136:	fb01 f303 	mul.w	r3, r1, r3
 800213a:	4413      	add	r3, r2
 800213c:	333f      	adds	r3, #63	; 0x3f
 800213e:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8002140:	2b01      	cmp	r3, #1
 8002142:	d126      	bne.n	8002192 <HCD_HC_IN_IRQHandler+0x350>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	015a      	lsls	r2, r3, #5
 8002148:	693b      	ldr	r3, [r7, #16]
 800214a:	4413      	add	r3, r2
 800214c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	68fa      	ldr	r2, [r7, #12]
 8002154:	0151      	lsls	r1, r2, #5
 8002156:	693a      	ldr	r2, [r7, #16]
 8002158:	440a      	add	r2, r1
 800215a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800215e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002162:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002164:	687a      	ldr	r2, [r7, #4]
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	212c      	movs	r1, #44	; 0x2c
 800216a:	fb01 f303 	mul.w	r3, r1, r3
 800216e:	4413      	add	r3, r2
 8002170:	3360      	adds	r3, #96	; 0x60
 8002172:	2201      	movs	r2, #1
 8002174:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	b2d9      	uxtb	r1, r3
 800217a:	687a      	ldr	r2, [r7, #4]
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	202c      	movs	r0, #44	; 0x2c
 8002180:	fb00 f303 	mul.w	r3, r0, r3
 8002184:	4413      	add	r3, r2
 8002186:	3360      	adds	r3, #96	; 0x60
 8002188:	781b      	ldrb	r3, [r3, #0]
 800218a:	461a      	mov	r2, r3
 800218c:	6878      	ldr	r0, [r7, #4]
 800218e:	f005 fb49 	bl	8007824 <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	691b      	ldr	r3, [r3, #16]
 8002196:	2b01      	cmp	r3, #1
 8002198:	d12b      	bne.n	80021f2 <HCD_HC_IN_IRQHandler+0x3b0>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 800219a:	687a      	ldr	r2, [r7, #4]
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	212c      	movs	r1, #44	; 0x2c
 80021a0:	fb01 f303 	mul.w	r3, r1, r3
 80021a4:	4413      	add	r3, r2
 80021a6:	3348      	adds	r3, #72	; 0x48
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	6879      	ldr	r1, [r7, #4]
 80021ac:	68fa      	ldr	r2, [r7, #12]
 80021ae:	202c      	movs	r0, #44	; 0x2c
 80021b0:	fb00 f202 	mul.w	r2, r0, r2
 80021b4:	440a      	add	r2, r1
 80021b6:	3240      	adds	r2, #64	; 0x40
 80021b8:	8812      	ldrh	r2, [r2, #0]
 80021ba:	fbb3 f3f2 	udiv	r3, r3, r2
 80021be:	f003 0301 	and.w	r3, r3, #1
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	f000 818e 	beq.w	80024e4 <HCD_HC_IN_IRQHandler+0x6a2>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 80021c8:	687a      	ldr	r2, [r7, #4]
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	212c      	movs	r1, #44	; 0x2c
 80021ce:	fb01 f303 	mul.w	r3, r1, r3
 80021d2:	4413      	add	r3, r2
 80021d4:	3354      	adds	r3, #84	; 0x54
 80021d6:	781b      	ldrb	r3, [r3, #0]
 80021d8:	f083 0301 	eor.w	r3, r3, #1
 80021dc:	b2d8      	uxtb	r0, r3
 80021de:	687a      	ldr	r2, [r7, #4]
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	212c      	movs	r1, #44	; 0x2c
 80021e4:	fb01 f303 	mul.w	r3, r1, r3
 80021e8:	4413      	add	r3, r2
 80021ea:	3354      	adds	r3, #84	; 0x54
 80021ec:	4602      	mov	r2, r0
 80021ee:	701a      	strb	r2, [r3, #0]
}
 80021f0:	e178      	b.n	80024e4 <HCD_HC_IN_IRQHandler+0x6a2>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 80021f2:	687a      	ldr	r2, [r7, #4]
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	212c      	movs	r1, #44	; 0x2c
 80021f8:	fb01 f303 	mul.w	r3, r1, r3
 80021fc:	4413      	add	r3, r2
 80021fe:	3354      	adds	r3, #84	; 0x54
 8002200:	781b      	ldrb	r3, [r3, #0]
 8002202:	f083 0301 	eor.w	r3, r3, #1
 8002206:	b2d8      	uxtb	r0, r3
 8002208:	687a      	ldr	r2, [r7, #4]
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	212c      	movs	r1, #44	; 0x2c
 800220e:	fb01 f303 	mul.w	r3, r1, r3
 8002212:	4413      	add	r3, r2
 8002214:	3354      	adds	r3, #84	; 0x54
 8002216:	4602      	mov	r2, r0
 8002218:	701a      	strb	r2, [r3, #0]
}
 800221a:	e163      	b.n	80024e4 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	015a      	lsls	r2, r3, #5
 8002220:	693b      	ldr	r3, [r7, #16]
 8002222:	4413      	add	r3, r2
 8002224:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002228:	689b      	ldr	r3, [r3, #8]
 800222a:	f003 0302 	and.w	r3, r3, #2
 800222e:	2b02      	cmp	r3, #2
 8002230:	f040 80f6 	bne.w	8002420 <HCD_HC_IN_IRQHandler+0x5de>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8002234:	687a      	ldr	r2, [r7, #4]
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	212c      	movs	r1, #44	; 0x2c
 800223a:	fb01 f303 	mul.w	r3, r1, r3
 800223e:	4413      	add	r3, r2
 8002240:	3361      	adds	r3, #97	; 0x61
 8002242:	781b      	ldrb	r3, [r3, #0]
 8002244:	2b01      	cmp	r3, #1
 8002246:	d109      	bne.n	800225c <HCD_HC_IN_IRQHandler+0x41a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002248:	687a      	ldr	r2, [r7, #4]
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	212c      	movs	r1, #44	; 0x2c
 800224e:	fb01 f303 	mul.w	r3, r1, r3
 8002252:	4413      	add	r3, r2
 8002254:	3360      	adds	r3, #96	; 0x60
 8002256:	2201      	movs	r2, #1
 8002258:	701a      	strb	r2, [r3, #0]
 800225a:	e0c9      	b.n	80023f0 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 800225c:	687a      	ldr	r2, [r7, #4]
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	212c      	movs	r1, #44	; 0x2c
 8002262:	fb01 f303 	mul.w	r3, r1, r3
 8002266:	4413      	add	r3, r2
 8002268:	3361      	adds	r3, #97	; 0x61
 800226a:	781b      	ldrb	r3, [r3, #0]
 800226c:	2b05      	cmp	r3, #5
 800226e:	d109      	bne.n	8002284 <HCD_HC_IN_IRQHandler+0x442>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 8002270:	687a      	ldr	r2, [r7, #4]
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	212c      	movs	r1, #44	; 0x2c
 8002276:	fb01 f303 	mul.w	r3, r1, r3
 800227a:	4413      	add	r3, r2
 800227c:	3360      	adds	r3, #96	; 0x60
 800227e:	2205      	movs	r2, #5
 8002280:	701a      	strb	r2, [r3, #0]
 8002282:	e0b5      	b.n	80023f0 <HCD_HC_IN_IRQHandler+0x5ae>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002284:	687a      	ldr	r2, [r7, #4]
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	212c      	movs	r1, #44	; 0x2c
 800228a:	fb01 f303 	mul.w	r3, r1, r3
 800228e:	4413      	add	r3, r2
 8002290:	3361      	adds	r3, #97	; 0x61
 8002292:	781b      	ldrb	r3, [r3, #0]
 8002294:	2b06      	cmp	r3, #6
 8002296:	d009      	beq.n	80022ac <HCD_HC_IN_IRQHandler+0x46a>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8002298:	687a      	ldr	r2, [r7, #4]
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	212c      	movs	r1, #44	; 0x2c
 800229e:	fb01 f303 	mul.w	r3, r1, r3
 80022a2:	4413      	add	r3, r2
 80022a4:	3361      	adds	r3, #97	; 0x61
 80022a6:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80022a8:	2b08      	cmp	r3, #8
 80022aa:	d150      	bne.n	800234e <HCD_HC_IN_IRQHandler+0x50c>
      hhcd->hc[ch_num].ErrCnt++;
 80022ac:	687a      	ldr	r2, [r7, #4]
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	212c      	movs	r1, #44	; 0x2c
 80022b2:	fb01 f303 	mul.w	r3, r1, r3
 80022b6:	4413      	add	r3, r2
 80022b8:	335c      	adds	r3, #92	; 0x5c
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	1c5a      	adds	r2, r3, #1
 80022be:	6879      	ldr	r1, [r7, #4]
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	202c      	movs	r0, #44	; 0x2c
 80022c4:	fb00 f303 	mul.w	r3, r0, r3
 80022c8:	440b      	add	r3, r1
 80022ca:	335c      	adds	r3, #92	; 0x5c
 80022cc:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80022ce:	687a      	ldr	r2, [r7, #4]
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	212c      	movs	r1, #44	; 0x2c
 80022d4:	fb01 f303 	mul.w	r3, r1, r3
 80022d8:	4413      	add	r3, r2
 80022da:	335c      	adds	r3, #92	; 0x5c
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	2b02      	cmp	r3, #2
 80022e0:	d912      	bls.n	8002308 <HCD_HC_IN_IRQHandler+0x4c6>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80022e2:	687a      	ldr	r2, [r7, #4]
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	212c      	movs	r1, #44	; 0x2c
 80022e8:	fb01 f303 	mul.w	r3, r1, r3
 80022ec:	4413      	add	r3, r2
 80022ee:	335c      	adds	r3, #92	; 0x5c
 80022f0:	2200      	movs	r2, #0
 80022f2:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80022f4:	687a      	ldr	r2, [r7, #4]
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	212c      	movs	r1, #44	; 0x2c
 80022fa:	fb01 f303 	mul.w	r3, r1, r3
 80022fe:	4413      	add	r3, r2
 8002300:	3360      	adds	r3, #96	; 0x60
 8002302:	2204      	movs	r2, #4
 8002304:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002306:	e073      	b.n	80023f0 <HCD_HC_IN_IRQHandler+0x5ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002308:	687a      	ldr	r2, [r7, #4]
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	212c      	movs	r1, #44	; 0x2c
 800230e:	fb01 f303 	mul.w	r3, r1, r3
 8002312:	4413      	add	r3, r2
 8002314:	3360      	adds	r3, #96	; 0x60
 8002316:	2202      	movs	r2, #2
 8002318:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	015a      	lsls	r2, r3, #5
 800231e:	693b      	ldr	r3, [r7, #16]
 8002320:	4413      	add	r3, r2
 8002322:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800232a:	68bb      	ldr	r3, [r7, #8]
 800232c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002330:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002332:	68bb      	ldr	r3, [r7, #8]
 8002334:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002338:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	015a      	lsls	r2, r3, #5
 800233e:	693b      	ldr	r3, [r7, #16]
 8002340:	4413      	add	r3, r2
 8002342:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002346:	461a      	mov	r2, r3
 8002348:	68bb      	ldr	r3, [r7, #8]
 800234a:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800234c:	e050      	b.n	80023f0 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 800234e:	687a      	ldr	r2, [r7, #4]
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	212c      	movs	r1, #44	; 0x2c
 8002354:	fb01 f303 	mul.w	r3, r1, r3
 8002358:	4413      	add	r3, r2
 800235a:	3361      	adds	r3, #97	; 0x61
 800235c:	781b      	ldrb	r3, [r3, #0]
 800235e:	2b03      	cmp	r3, #3
 8002360:	d122      	bne.n	80023a8 <HCD_HC_IN_IRQHandler+0x566>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002362:	687a      	ldr	r2, [r7, #4]
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	212c      	movs	r1, #44	; 0x2c
 8002368:	fb01 f303 	mul.w	r3, r1, r3
 800236c:	4413      	add	r3, r2
 800236e:	3360      	adds	r3, #96	; 0x60
 8002370:	2202      	movs	r2, #2
 8002372:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	015a      	lsls	r2, r3, #5
 8002378:	693b      	ldr	r3, [r7, #16]
 800237a:	4413      	add	r3, r2
 800237c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002384:	68bb      	ldr	r3, [r7, #8]
 8002386:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800238a:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 800238c:	68bb      	ldr	r3, [r7, #8]
 800238e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002392:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	015a      	lsls	r2, r3, #5
 8002398:	693b      	ldr	r3, [r7, #16]
 800239a:	4413      	add	r3, r2
 800239c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023a0:	461a      	mov	r2, r3
 80023a2:	68bb      	ldr	r3, [r7, #8]
 80023a4:	6013      	str	r3, [r2, #0]
 80023a6:	e023      	b.n	80023f0 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 80023a8:	687a      	ldr	r2, [r7, #4]
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	212c      	movs	r1, #44	; 0x2c
 80023ae:	fb01 f303 	mul.w	r3, r1, r3
 80023b2:	4413      	add	r3, r2
 80023b4:	3361      	adds	r3, #97	; 0x61
 80023b6:	781b      	ldrb	r3, [r3, #0]
 80023b8:	2b07      	cmp	r3, #7
 80023ba:	d119      	bne.n	80023f0 <HCD_HC_IN_IRQHandler+0x5ae>
      hhcd->hc[ch_num].ErrCnt++;
 80023bc:	687a      	ldr	r2, [r7, #4]
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	212c      	movs	r1, #44	; 0x2c
 80023c2:	fb01 f303 	mul.w	r3, r1, r3
 80023c6:	4413      	add	r3, r2
 80023c8:	335c      	adds	r3, #92	; 0x5c
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	1c5a      	adds	r2, r3, #1
 80023ce:	6879      	ldr	r1, [r7, #4]
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	202c      	movs	r0, #44	; 0x2c
 80023d4:	fb00 f303 	mul.w	r3, r0, r3
 80023d8:	440b      	add	r3, r1
 80023da:	335c      	adds	r3, #92	; 0x5c
 80023dc:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 80023de:	687a      	ldr	r2, [r7, #4]
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	212c      	movs	r1, #44	; 0x2c
 80023e4:	fb01 f303 	mul.w	r3, r1, r3
 80023e8:	4413      	add	r3, r2
 80023ea:	3360      	adds	r3, #96	; 0x60
 80023ec:	2204      	movs	r2, #4
 80023ee:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	015a      	lsls	r2, r3, #5
 80023f4:	693b      	ldr	r3, [r7, #16]
 80023f6:	4413      	add	r3, r2
 80023f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023fc:	461a      	mov	r2, r3
 80023fe:	2302      	movs	r3, #2
 8002400:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	b2d9      	uxtb	r1, r3
 8002406:	687a      	ldr	r2, [r7, #4]
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	202c      	movs	r0, #44	; 0x2c
 800240c:	fb00 f303 	mul.w	r3, r0, r3
 8002410:	4413      	add	r3, r2
 8002412:	3360      	adds	r3, #96	; 0x60
 8002414:	781b      	ldrb	r3, [r3, #0]
 8002416:	461a      	mov	r2, r3
 8002418:	6878      	ldr	r0, [r7, #4]
 800241a:	f005 fa03 	bl	8007824 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 800241e:	e061      	b.n	80024e4 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	015a      	lsls	r2, r3, #5
 8002424:	693b      	ldr	r3, [r7, #16]
 8002426:	4413      	add	r3, r2
 8002428:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800242c:	689b      	ldr	r3, [r3, #8]
 800242e:	f003 0310 	and.w	r3, r3, #16
 8002432:	2b10      	cmp	r3, #16
 8002434:	d156      	bne.n	80024e4 <HCD_HC_IN_IRQHandler+0x6a2>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8002436:	687a      	ldr	r2, [r7, #4]
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	212c      	movs	r1, #44	; 0x2c
 800243c:	fb01 f303 	mul.w	r3, r1, r3
 8002440:	4413      	add	r3, r2
 8002442:	333f      	adds	r3, #63	; 0x3f
 8002444:	781b      	ldrb	r3, [r3, #0]
 8002446:	2b03      	cmp	r3, #3
 8002448:	d111      	bne.n	800246e <HCD_HC_IN_IRQHandler+0x62c>
      hhcd->hc[ch_num].ErrCnt = 0U;
 800244a:	687a      	ldr	r2, [r7, #4]
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	212c      	movs	r1, #44	; 0x2c
 8002450:	fb01 f303 	mul.w	r3, r1, r3
 8002454:	4413      	add	r3, r2
 8002456:	335c      	adds	r3, #92	; 0x5c
 8002458:	2200      	movs	r2, #0
 800245a:	601a      	str	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	68fa      	ldr	r2, [r7, #12]
 8002462:	b2d2      	uxtb	r2, r2
 8002464:	4611      	mov	r1, r2
 8002466:	4618      	mov	r0, r3
 8002468:	f002 ff39 	bl	80052de <USB_HC_Halt>
 800246c:	e031      	b.n	80024d2 <HCD_HC_IN_IRQHandler+0x690>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800246e:	687a      	ldr	r2, [r7, #4]
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	212c      	movs	r1, #44	; 0x2c
 8002474:	fb01 f303 	mul.w	r3, r1, r3
 8002478:	4413      	add	r3, r2
 800247a:	333f      	adds	r3, #63	; 0x3f
 800247c:	781b      	ldrb	r3, [r3, #0]
 800247e:	2b00      	cmp	r3, #0
 8002480:	d009      	beq.n	8002496 <HCD_HC_IN_IRQHandler+0x654>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8002482:	687a      	ldr	r2, [r7, #4]
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	212c      	movs	r1, #44	; 0x2c
 8002488:	fb01 f303 	mul.w	r3, r1, r3
 800248c:	4413      	add	r3, r2
 800248e:	333f      	adds	r3, #63	; 0x3f
 8002490:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002492:	2b02      	cmp	r3, #2
 8002494:	d11d      	bne.n	80024d2 <HCD_HC_IN_IRQHandler+0x690>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8002496:	687a      	ldr	r2, [r7, #4]
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	212c      	movs	r1, #44	; 0x2c
 800249c:	fb01 f303 	mul.w	r3, r1, r3
 80024a0:	4413      	add	r3, r2
 80024a2:	335c      	adds	r3, #92	; 0x5c
 80024a4:	2200      	movs	r2, #0
 80024a6:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	691b      	ldr	r3, [r3, #16]
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d110      	bne.n	80024d2 <HCD_HC_IN_IRQHandler+0x690>
        hhcd->hc[ch_num].state = HC_NAK;
 80024b0:	687a      	ldr	r2, [r7, #4]
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	212c      	movs	r1, #44	; 0x2c
 80024b6:	fb01 f303 	mul.w	r3, r1, r3
 80024ba:	4413      	add	r3, r2
 80024bc:	3361      	adds	r3, #97	; 0x61
 80024be:	2203      	movs	r2, #3
 80024c0:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	68fa      	ldr	r2, [r7, #12]
 80024c8:	b2d2      	uxtb	r2, r2
 80024ca:	4611      	mov	r1, r2
 80024cc:	4618      	mov	r0, r3
 80024ce:	f002 ff06 	bl	80052de <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	015a      	lsls	r2, r3, #5
 80024d6:	693b      	ldr	r3, [r7, #16]
 80024d8:	4413      	add	r3, r2
 80024da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024de:	461a      	mov	r2, r3
 80024e0:	2310      	movs	r3, #16
 80024e2:	6093      	str	r3, [r2, #8]
}
 80024e4:	bf00      	nop
 80024e6:	3718      	adds	r7, #24
 80024e8:	46bd      	mov	sp, r7
 80024ea:	bd80      	pop	{r7, pc}

080024ec <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80024ec:	b580      	push	{r7, lr}
 80024ee:	b088      	sub	sp, #32
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	6078      	str	r0, [r7, #4]
 80024f4:	460b      	mov	r3, r1
 80024f6:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80024fe:	69fb      	ldr	r3, [r7, #28]
 8002500:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 8002502:	78fb      	ldrb	r3, [r7, #3]
 8002504:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8002506:	697b      	ldr	r3, [r7, #20]
 8002508:	015a      	lsls	r2, r3, #5
 800250a:	69bb      	ldr	r3, [r7, #24]
 800250c:	4413      	add	r3, r2
 800250e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002512:	689b      	ldr	r3, [r3, #8]
 8002514:	f003 0304 	and.w	r3, r3, #4
 8002518:	2b04      	cmp	r3, #4
 800251a:	d11a      	bne.n	8002552 <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 800251c:	697b      	ldr	r3, [r7, #20]
 800251e:	015a      	lsls	r2, r3, #5
 8002520:	69bb      	ldr	r3, [r7, #24]
 8002522:	4413      	add	r3, r2
 8002524:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002528:	461a      	mov	r2, r3
 800252a:	2304      	movs	r3, #4
 800252c:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 800252e:	687a      	ldr	r2, [r7, #4]
 8002530:	697b      	ldr	r3, [r7, #20]
 8002532:	212c      	movs	r1, #44	; 0x2c
 8002534:	fb01 f303 	mul.w	r3, r1, r3
 8002538:	4413      	add	r3, r2
 800253a:	3361      	adds	r3, #97	; 0x61
 800253c:	2206      	movs	r2, #6
 800253e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	697a      	ldr	r2, [r7, #20]
 8002546:	b2d2      	uxtb	r2, r2
 8002548:	4611      	mov	r1, r2
 800254a:	4618      	mov	r0, r3
 800254c:	f002 fec7 	bl	80052de <USB_HC_Halt>
  }
  else
  {
    /* ... */
  }
}
 8002550:	e331      	b.n	8002bb6 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8002552:	697b      	ldr	r3, [r7, #20]
 8002554:	015a      	lsls	r2, r3, #5
 8002556:	69bb      	ldr	r3, [r7, #24]
 8002558:	4413      	add	r3, r2
 800255a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800255e:	689b      	ldr	r3, [r3, #8]
 8002560:	f003 0320 	and.w	r3, r3, #32
 8002564:	2b20      	cmp	r3, #32
 8002566:	d12e      	bne.n	80025c6 <HCD_HC_OUT_IRQHandler+0xda>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8002568:	697b      	ldr	r3, [r7, #20]
 800256a:	015a      	lsls	r2, r3, #5
 800256c:	69bb      	ldr	r3, [r7, #24]
 800256e:	4413      	add	r3, r2
 8002570:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002574:	461a      	mov	r2, r3
 8002576:	2320      	movs	r3, #32
 8002578:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 800257a:	687a      	ldr	r2, [r7, #4]
 800257c:	697b      	ldr	r3, [r7, #20]
 800257e:	212c      	movs	r1, #44	; 0x2c
 8002580:	fb01 f303 	mul.w	r3, r1, r3
 8002584:	4413      	add	r3, r2
 8002586:	333d      	adds	r3, #61	; 0x3d
 8002588:	781b      	ldrb	r3, [r3, #0]
 800258a:	2b01      	cmp	r3, #1
 800258c:	f040 8313 	bne.w	8002bb6 <HCD_HC_OUT_IRQHandler+0x6ca>
      hhcd->hc[ch_num].do_ping = 0U;
 8002590:	687a      	ldr	r2, [r7, #4]
 8002592:	697b      	ldr	r3, [r7, #20]
 8002594:	212c      	movs	r1, #44	; 0x2c
 8002596:	fb01 f303 	mul.w	r3, r1, r3
 800259a:	4413      	add	r3, r2
 800259c:	333d      	adds	r3, #61	; 0x3d
 800259e:	2200      	movs	r2, #0
 80025a0:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80025a2:	687a      	ldr	r2, [r7, #4]
 80025a4:	697b      	ldr	r3, [r7, #20]
 80025a6:	212c      	movs	r1, #44	; 0x2c
 80025a8:	fb01 f303 	mul.w	r3, r1, r3
 80025ac:	4413      	add	r3, r2
 80025ae:	3360      	adds	r3, #96	; 0x60
 80025b0:	2202      	movs	r2, #2
 80025b2:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	697a      	ldr	r2, [r7, #20]
 80025ba:	b2d2      	uxtb	r2, r2
 80025bc:	4611      	mov	r1, r2
 80025be:	4618      	mov	r0, r3
 80025c0:	f002 fe8d 	bl	80052de <USB_HC_Halt>
}
 80025c4:	e2f7      	b.n	8002bb6 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 80025c6:	697b      	ldr	r3, [r7, #20]
 80025c8:	015a      	lsls	r2, r3, #5
 80025ca:	69bb      	ldr	r3, [r7, #24]
 80025cc:	4413      	add	r3, r2
 80025ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025d2:	689b      	ldr	r3, [r3, #8]
 80025d4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80025d8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80025dc:	d112      	bne.n	8002604 <HCD_HC_OUT_IRQHandler+0x118>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 80025de:	697b      	ldr	r3, [r7, #20]
 80025e0:	015a      	lsls	r2, r3, #5
 80025e2:	69bb      	ldr	r3, [r7, #24]
 80025e4:	4413      	add	r3, r2
 80025e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025ea:	461a      	mov	r2, r3
 80025ec:	f44f 7300 	mov.w	r3, #512	; 0x200
 80025f0:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	697a      	ldr	r2, [r7, #20]
 80025f8:	b2d2      	uxtb	r2, r2
 80025fa:	4611      	mov	r1, r2
 80025fc:	4618      	mov	r0, r3
 80025fe:	f002 fe6e 	bl	80052de <USB_HC_Halt>
}
 8002602:	e2d8      	b.n	8002bb6 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8002604:	697b      	ldr	r3, [r7, #20]
 8002606:	015a      	lsls	r2, r3, #5
 8002608:	69bb      	ldr	r3, [r7, #24]
 800260a:	4413      	add	r3, r2
 800260c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002610:	689b      	ldr	r3, [r3, #8]
 8002612:	f003 0301 	and.w	r3, r3, #1
 8002616:	2b01      	cmp	r3, #1
 8002618:	d140      	bne.n	800269c <HCD_HC_OUT_IRQHandler+0x1b0>
    hhcd->hc[ch_num].ErrCnt = 0U;
 800261a:	687a      	ldr	r2, [r7, #4]
 800261c:	697b      	ldr	r3, [r7, #20]
 800261e:	212c      	movs	r1, #44	; 0x2c
 8002620:	fb01 f303 	mul.w	r3, r1, r3
 8002624:	4413      	add	r3, r2
 8002626:	335c      	adds	r3, #92	; 0x5c
 8002628:	2200      	movs	r2, #0
 800262a:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 800262c:	697b      	ldr	r3, [r7, #20]
 800262e:	015a      	lsls	r2, r3, #5
 8002630:	69bb      	ldr	r3, [r7, #24]
 8002632:	4413      	add	r3, r2
 8002634:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002638:	689b      	ldr	r3, [r3, #8]
 800263a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800263e:	2b40      	cmp	r3, #64	; 0x40
 8002640:	d111      	bne.n	8002666 <HCD_HC_OUT_IRQHandler+0x17a>
      hhcd->hc[ch_num].do_ping = 1U;
 8002642:	687a      	ldr	r2, [r7, #4]
 8002644:	697b      	ldr	r3, [r7, #20]
 8002646:	212c      	movs	r1, #44	; 0x2c
 8002648:	fb01 f303 	mul.w	r3, r1, r3
 800264c:	4413      	add	r3, r2
 800264e:	333d      	adds	r3, #61	; 0x3d
 8002650:	2201      	movs	r2, #1
 8002652:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8002654:	697b      	ldr	r3, [r7, #20]
 8002656:	015a      	lsls	r2, r3, #5
 8002658:	69bb      	ldr	r3, [r7, #24]
 800265a:	4413      	add	r3, r2
 800265c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002660:	461a      	mov	r2, r3
 8002662:	2340      	movs	r3, #64	; 0x40
 8002664:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8002666:	697b      	ldr	r3, [r7, #20]
 8002668:	015a      	lsls	r2, r3, #5
 800266a:	69bb      	ldr	r3, [r7, #24]
 800266c:	4413      	add	r3, r2
 800266e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002672:	461a      	mov	r2, r3
 8002674:	2301      	movs	r3, #1
 8002676:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8002678:	687a      	ldr	r2, [r7, #4]
 800267a:	697b      	ldr	r3, [r7, #20]
 800267c:	212c      	movs	r1, #44	; 0x2c
 800267e:	fb01 f303 	mul.w	r3, r1, r3
 8002682:	4413      	add	r3, r2
 8002684:	3361      	adds	r3, #97	; 0x61
 8002686:	2201      	movs	r2, #1
 8002688:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	697a      	ldr	r2, [r7, #20]
 8002690:	b2d2      	uxtb	r2, r2
 8002692:	4611      	mov	r1, r2
 8002694:	4618      	mov	r0, r3
 8002696:	f002 fe22 	bl	80052de <USB_HC_Halt>
}
 800269a:	e28c      	b.n	8002bb6 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 800269c:	697b      	ldr	r3, [r7, #20]
 800269e:	015a      	lsls	r2, r3, #5
 80026a0:	69bb      	ldr	r3, [r7, #24]
 80026a2:	4413      	add	r3, r2
 80026a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026a8:	689b      	ldr	r3, [r3, #8]
 80026aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026ae:	2b40      	cmp	r3, #64	; 0x40
 80026b0:	d12c      	bne.n	800270c <HCD_HC_OUT_IRQHandler+0x220>
    hhcd->hc[ch_num].state = HC_NYET;
 80026b2:	687a      	ldr	r2, [r7, #4]
 80026b4:	697b      	ldr	r3, [r7, #20]
 80026b6:	212c      	movs	r1, #44	; 0x2c
 80026b8:	fb01 f303 	mul.w	r3, r1, r3
 80026bc:	4413      	add	r3, r2
 80026be:	3361      	adds	r3, #97	; 0x61
 80026c0:	2204      	movs	r2, #4
 80026c2:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 80026c4:	687a      	ldr	r2, [r7, #4]
 80026c6:	697b      	ldr	r3, [r7, #20]
 80026c8:	212c      	movs	r1, #44	; 0x2c
 80026ca:	fb01 f303 	mul.w	r3, r1, r3
 80026ce:	4413      	add	r3, r2
 80026d0:	333d      	adds	r3, #61	; 0x3d
 80026d2:	2201      	movs	r2, #1
 80026d4:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 80026d6:	687a      	ldr	r2, [r7, #4]
 80026d8:	697b      	ldr	r3, [r7, #20]
 80026da:	212c      	movs	r1, #44	; 0x2c
 80026dc:	fb01 f303 	mul.w	r3, r1, r3
 80026e0:	4413      	add	r3, r2
 80026e2:	335c      	adds	r3, #92	; 0x5c
 80026e4:	2200      	movs	r2, #0
 80026e6:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	697a      	ldr	r2, [r7, #20]
 80026ee:	b2d2      	uxtb	r2, r2
 80026f0:	4611      	mov	r1, r2
 80026f2:	4618      	mov	r0, r3
 80026f4:	f002 fdf3 	bl	80052de <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 80026f8:	697b      	ldr	r3, [r7, #20]
 80026fa:	015a      	lsls	r2, r3, #5
 80026fc:	69bb      	ldr	r3, [r7, #24]
 80026fe:	4413      	add	r3, r2
 8002700:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002704:	461a      	mov	r2, r3
 8002706:	2340      	movs	r3, #64	; 0x40
 8002708:	6093      	str	r3, [r2, #8]
}
 800270a:	e254      	b.n	8002bb6 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 800270c:	697b      	ldr	r3, [r7, #20]
 800270e:	015a      	lsls	r2, r3, #5
 8002710:	69bb      	ldr	r3, [r7, #24]
 8002712:	4413      	add	r3, r2
 8002714:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002718:	689b      	ldr	r3, [r3, #8]
 800271a:	f003 0308 	and.w	r3, r3, #8
 800271e:	2b08      	cmp	r3, #8
 8002720:	d11a      	bne.n	8002758 <HCD_HC_OUT_IRQHandler+0x26c>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8002722:	697b      	ldr	r3, [r7, #20]
 8002724:	015a      	lsls	r2, r3, #5
 8002726:	69bb      	ldr	r3, [r7, #24]
 8002728:	4413      	add	r3, r2
 800272a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800272e:	461a      	mov	r2, r3
 8002730:	2308      	movs	r3, #8
 8002732:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8002734:	687a      	ldr	r2, [r7, #4]
 8002736:	697b      	ldr	r3, [r7, #20]
 8002738:	212c      	movs	r1, #44	; 0x2c
 800273a:	fb01 f303 	mul.w	r3, r1, r3
 800273e:	4413      	add	r3, r2
 8002740:	3361      	adds	r3, #97	; 0x61
 8002742:	2205      	movs	r2, #5
 8002744:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	697a      	ldr	r2, [r7, #20]
 800274c:	b2d2      	uxtb	r2, r2
 800274e:	4611      	mov	r1, r2
 8002750:	4618      	mov	r0, r3
 8002752:	f002 fdc4 	bl	80052de <USB_HC_Halt>
}
 8002756:	e22e      	b.n	8002bb6 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8002758:	697b      	ldr	r3, [r7, #20]
 800275a:	015a      	lsls	r2, r3, #5
 800275c:	69bb      	ldr	r3, [r7, #24]
 800275e:	4413      	add	r3, r2
 8002760:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002764:	689b      	ldr	r3, [r3, #8]
 8002766:	f003 0310 	and.w	r3, r3, #16
 800276a:	2b10      	cmp	r3, #16
 800276c:	d140      	bne.n	80027f0 <HCD_HC_OUT_IRQHandler+0x304>
    hhcd->hc[ch_num].ErrCnt = 0U;
 800276e:	687a      	ldr	r2, [r7, #4]
 8002770:	697b      	ldr	r3, [r7, #20]
 8002772:	212c      	movs	r1, #44	; 0x2c
 8002774:	fb01 f303 	mul.w	r3, r1, r3
 8002778:	4413      	add	r3, r2
 800277a:	335c      	adds	r3, #92	; 0x5c
 800277c:	2200      	movs	r2, #0
 800277e:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8002780:	687a      	ldr	r2, [r7, #4]
 8002782:	697b      	ldr	r3, [r7, #20]
 8002784:	212c      	movs	r1, #44	; 0x2c
 8002786:	fb01 f303 	mul.w	r3, r1, r3
 800278a:	4413      	add	r3, r2
 800278c:	3361      	adds	r3, #97	; 0x61
 800278e:	2203      	movs	r2, #3
 8002790:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8002792:	687a      	ldr	r2, [r7, #4]
 8002794:	697b      	ldr	r3, [r7, #20]
 8002796:	212c      	movs	r1, #44	; 0x2c
 8002798:	fb01 f303 	mul.w	r3, r1, r3
 800279c:	4413      	add	r3, r2
 800279e:	333d      	adds	r3, #61	; 0x3d
 80027a0:	781b      	ldrb	r3, [r3, #0]
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d112      	bne.n	80027cc <HCD_HC_OUT_IRQHandler+0x2e0>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 80027a6:	687a      	ldr	r2, [r7, #4]
 80027a8:	697b      	ldr	r3, [r7, #20]
 80027aa:	212c      	movs	r1, #44	; 0x2c
 80027ac:	fb01 f303 	mul.w	r3, r1, r3
 80027b0:	4413      	add	r3, r2
 80027b2:	333c      	adds	r3, #60	; 0x3c
 80027b4:	781b      	ldrb	r3, [r3, #0]
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d108      	bne.n	80027cc <HCD_HC_OUT_IRQHandler+0x2e0>
        hhcd->hc[ch_num].do_ping = 1U;
 80027ba:	687a      	ldr	r2, [r7, #4]
 80027bc:	697b      	ldr	r3, [r7, #20]
 80027be:	212c      	movs	r1, #44	; 0x2c
 80027c0:	fb01 f303 	mul.w	r3, r1, r3
 80027c4:	4413      	add	r3, r2
 80027c6:	333d      	adds	r3, #61	; 0x3d
 80027c8:	2201      	movs	r2, #1
 80027ca:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	697a      	ldr	r2, [r7, #20]
 80027d2:	b2d2      	uxtb	r2, r2
 80027d4:	4611      	mov	r1, r2
 80027d6:	4618      	mov	r0, r3
 80027d8:	f002 fd81 	bl	80052de <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80027dc:	697b      	ldr	r3, [r7, #20]
 80027de:	015a      	lsls	r2, r3, #5
 80027e0:	69bb      	ldr	r3, [r7, #24]
 80027e2:	4413      	add	r3, r2
 80027e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027e8:	461a      	mov	r2, r3
 80027ea:	2310      	movs	r3, #16
 80027ec:	6093      	str	r3, [r2, #8]
}
 80027ee:	e1e2      	b.n	8002bb6 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 80027f0:	697b      	ldr	r3, [r7, #20]
 80027f2:	015a      	lsls	r2, r3, #5
 80027f4:	69bb      	ldr	r3, [r7, #24]
 80027f6:	4413      	add	r3, r2
 80027f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027fc:	689b      	ldr	r3, [r3, #8]
 80027fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002802:	2b80      	cmp	r3, #128	; 0x80
 8002804:	d164      	bne.n	80028d0 <HCD_HC_OUT_IRQHandler+0x3e4>
    if (hhcd->Init.dma_enable == 0U)
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	691b      	ldr	r3, [r3, #16]
 800280a:	2b00      	cmp	r3, #0
 800280c:	d111      	bne.n	8002832 <HCD_HC_OUT_IRQHandler+0x346>
      hhcd->hc[ch_num].state = HC_XACTERR;
 800280e:	687a      	ldr	r2, [r7, #4]
 8002810:	697b      	ldr	r3, [r7, #20]
 8002812:	212c      	movs	r1, #44	; 0x2c
 8002814:	fb01 f303 	mul.w	r3, r1, r3
 8002818:	4413      	add	r3, r2
 800281a:	3361      	adds	r3, #97	; 0x61
 800281c:	2206      	movs	r2, #6
 800281e:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	697a      	ldr	r2, [r7, #20]
 8002826:	b2d2      	uxtb	r2, r2
 8002828:	4611      	mov	r1, r2
 800282a:	4618      	mov	r0, r3
 800282c:	f002 fd57 	bl	80052de <USB_HC_Halt>
 8002830:	e044      	b.n	80028bc <HCD_HC_OUT_IRQHandler+0x3d0>
      hhcd->hc[ch_num].ErrCnt++;
 8002832:	687a      	ldr	r2, [r7, #4]
 8002834:	697b      	ldr	r3, [r7, #20]
 8002836:	212c      	movs	r1, #44	; 0x2c
 8002838:	fb01 f303 	mul.w	r3, r1, r3
 800283c:	4413      	add	r3, r2
 800283e:	335c      	adds	r3, #92	; 0x5c
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	1c5a      	adds	r2, r3, #1
 8002844:	6879      	ldr	r1, [r7, #4]
 8002846:	697b      	ldr	r3, [r7, #20]
 8002848:	202c      	movs	r0, #44	; 0x2c
 800284a:	fb00 f303 	mul.w	r3, r0, r3
 800284e:	440b      	add	r3, r1
 8002850:	335c      	adds	r3, #92	; 0x5c
 8002852:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002854:	687a      	ldr	r2, [r7, #4]
 8002856:	697b      	ldr	r3, [r7, #20]
 8002858:	212c      	movs	r1, #44	; 0x2c
 800285a:	fb01 f303 	mul.w	r3, r1, r3
 800285e:	4413      	add	r3, r2
 8002860:	335c      	adds	r3, #92	; 0x5c
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	2b02      	cmp	r3, #2
 8002866:	d920      	bls.n	80028aa <HCD_HC_OUT_IRQHandler+0x3be>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002868:	687a      	ldr	r2, [r7, #4]
 800286a:	697b      	ldr	r3, [r7, #20]
 800286c:	212c      	movs	r1, #44	; 0x2c
 800286e:	fb01 f303 	mul.w	r3, r1, r3
 8002872:	4413      	add	r3, r2
 8002874:	335c      	adds	r3, #92	; 0x5c
 8002876:	2200      	movs	r2, #0
 8002878:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 800287a:	687a      	ldr	r2, [r7, #4]
 800287c:	697b      	ldr	r3, [r7, #20]
 800287e:	212c      	movs	r1, #44	; 0x2c
 8002880:	fb01 f303 	mul.w	r3, r1, r3
 8002884:	4413      	add	r3, r2
 8002886:	3360      	adds	r3, #96	; 0x60
 8002888:	2204      	movs	r2, #4
 800288a:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800288c:	697b      	ldr	r3, [r7, #20]
 800288e:	b2d9      	uxtb	r1, r3
 8002890:	687a      	ldr	r2, [r7, #4]
 8002892:	697b      	ldr	r3, [r7, #20]
 8002894:	202c      	movs	r0, #44	; 0x2c
 8002896:	fb00 f303 	mul.w	r3, r0, r3
 800289a:	4413      	add	r3, r2
 800289c:	3360      	adds	r3, #96	; 0x60
 800289e:	781b      	ldrb	r3, [r3, #0]
 80028a0:	461a      	mov	r2, r3
 80028a2:	6878      	ldr	r0, [r7, #4]
 80028a4:	f004 ffbe 	bl	8007824 <HAL_HCD_HC_NotifyURBChange_Callback>
 80028a8:	e008      	b.n	80028bc <HCD_HC_OUT_IRQHandler+0x3d0>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80028aa:	687a      	ldr	r2, [r7, #4]
 80028ac:	697b      	ldr	r3, [r7, #20]
 80028ae:	212c      	movs	r1, #44	; 0x2c
 80028b0:	fb01 f303 	mul.w	r3, r1, r3
 80028b4:	4413      	add	r3, r2
 80028b6:	3360      	adds	r3, #96	; 0x60
 80028b8:	2202      	movs	r2, #2
 80028ba:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 80028bc:	697b      	ldr	r3, [r7, #20]
 80028be:	015a      	lsls	r2, r3, #5
 80028c0:	69bb      	ldr	r3, [r7, #24]
 80028c2:	4413      	add	r3, r2
 80028c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028c8:	461a      	mov	r2, r3
 80028ca:	2380      	movs	r3, #128	; 0x80
 80028cc:	6093      	str	r3, [r2, #8]
}
 80028ce:	e172      	b.n	8002bb6 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 80028d0:	697b      	ldr	r3, [r7, #20]
 80028d2:	015a      	lsls	r2, r3, #5
 80028d4:	69bb      	ldr	r3, [r7, #24]
 80028d6:	4413      	add	r3, r2
 80028d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028dc:	689b      	ldr	r3, [r3, #8]
 80028de:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80028e2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80028e6:	d11b      	bne.n	8002920 <HCD_HC_OUT_IRQHandler+0x434>
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80028e8:	687a      	ldr	r2, [r7, #4]
 80028ea:	697b      	ldr	r3, [r7, #20]
 80028ec:	212c      	movs	r1, #44	; 0x2c
 80028ee:	fb01 f303 	mul.w	r3, r1, r3
 80028f2:	4413      	add	r3, r2
 80028f4:	3361      	adds	r3, #97	; 0x61
 80028f6:	2208      	movs	r2, #8
 80028f8:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	697a      	ldr	r2, [r7, #20]
 8002900:	b2d2      	uxtb	r2, r2
 8002902:	4611      	mov	r1, r2
 8002904:	4618      	mov	r0, r3
 8002906:	f002 fcea 	bl	80052de <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 800290a:	697b      	ldr	r3, [r7, #20]
 800290c:	015a      	lsls	r2, r3, #5
 800290e:	69bb      	ldr	r3, [r7, #24]
 8002910:	4413      	add	r3, r2
 8002912:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002916:	461a      	mov	r2, r3
 8002918:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800291c:	6093      	str	r3, [r2, #8]
}
 800291e:	e14a      	b.n	8002bb6 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8002920:	697b      	ldr	r3, [r7, #20]
 8002922:	015a      	lsls	r2, r3, #5
 8002924:	69bb      	ldr	r3, [r7, #24]
 8002926:	4413      	add	r3, r2
 8002928:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800292c:	689b      	ldr	r3, [r3, #8]
 800292e:	f003 0302 	and.w	r3, r3, #2
 8002932:	2b02      	cmp	r3, #2
 8002934:	f040 813f 	bne.w	8002bb6 <HCD_HC_OUT_IRQHandler+0x6ca>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8002938:	687a      	ldr	r2, [r7, #4]
 800293a:	697b      	ldr	r3, [r7, #20]
 800293c:	212c      	movs	r1, #44	; 0x2c
 800293e:	fb01 f303 	mul.w	r3, r1, r3
 8002942:	4413      	add	r3, r2
 8002944:	3361      	adds	r3, #97	; 0x61
 8002946:	781b      	ldrb	r3, [r3, #0]
 8002948:	2b01      	cmp	r3, #1
 800294a:	d17d      	bne.n	8002a48 <HCD_HC_OUT_IRQHandler+0x55c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 800294c:	687a      	ldr	r2, [r7, #4]
 800294e:	697b      	ldr	r3, [r7, #20]
 8002950:	212c      	movs	r1, #44	; 0x2c
 8002952:	fb01 f303 	mul.w	r3, r1, r3
 8002956:	4413      	add	r3, r2
 8002958:	3360      	adds	r3, #96	; 0x60
 800295a:	2201      	movs	r2, #1
 800295c:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 800295e:	687a      	ldr	r2, [r7, #4]
 8002960:	697b      	ldr	r3, [r7, #20]
 8002962:	212c      	movs	r1, #44	; 0x2c
 8002964:	fb01 f303 	mul.w	r3, r1, r3
 8002968:	4413      	add	r3, r2
 800296a:	333f      	adds	r3, #63	; 0x3f
 800296c:	781b      	ldrb	r3, [r3, #0]
 800296e:	2b02      	cmp	r3, #2
 8002970:	d00a      	beq.n	8002988 <HCD_HC_OUT_IRQHandler+0x49c>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8002972:	687a      	ldr	r2, [r7, #4]
 8002974:	697b      	ldr	r3, [r7, #20]
 8002976:	212c      	movs	r1, #44	; 0x2c
 8002978:	fb01 f303 	mul.w	r3, r1, r3
 800297c:	4413      	add	r3, r2
 800297e:	333f      	adds	r3, #63	; 0x3f
 8002980:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8002982:	2b03      	cmp	r3, #3
 8002984:	f040 8100 	bne.w	8002b88 <HCD_HC_OUT_IRQHandler+0x69c>
        if (hhcd->Init.dma_enable == 0U)
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	691b      	ldr	r3, [r3, #16]
 800298c:	2b00      	cmp	r3, #0
 800298e:	d113      	bne.n	80029b8 <HCD_HC_OUT_IRQHandler+0x4cc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 8002990:	687a      	ldr	r2, [r7, #4]
 8002992:	697b      	ldr	r3, [r7, #20]
 8002994:	212c      	movs	r1, #44	; 0x2c
 8002996:	fb01 f303 	mul.w	r3, r1, r3
 800299a:	4413      	add	r3, r2
 800299c:	3355      	adds	r3, #85	; 0x55
 800299e:	781b      	ldrb	r3, [r3, #0]
 80029a0:	f083 0301 	eor.w	r3, r3, #1
 80029a4:	b2d8      	uxtb	r0, r3
 80029a6:	687a      	ldr	r2, [r7, #4]
 80029a8:	697b      	ldr	r3, [r7, #20]
 80029aa:	212c      	movs	r1, #44	; 0x2c
 80029ac:	fb01 f303 	mul.w	r3, r1, r3
 80029b0:	4413      	add	r3, r2
 80029b2:	3355      	adds	r3, #85	; 0x55
 80029b4:	4602      	mov	r2, r0
 80029b6:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	691b      	ldr	r3, [r3, #16]
 80029bc:	2b01      	cmp	r3, #1
 80029be:	f040 80e3 	bne.w	8002b88 <HCD_HC_OUT_IRQHandler+0x69c>
 80029c2:	687a      	ldr	r2, [r7, #4]
 80029c4:	697b      	ldr	r3, [r7, #20]
 80029c6:	212c      	movs	r1, #44	; 0x2c
 80029c8:	fb01 f303 	mul.w	r3, r1, r3
 80029cc:	4413      	add	r3, r2
 80029ce:	334c      	adds	r3, #76	; 0x4c
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	f000 80d8 	beq.w	8002b88 <HCD_HC_OUT_IRQHandler+0x69c>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 80029d8:	687a      	ldr	r2, [r7, #4]
 80029da:	697b      	ldr	r3, [r7, #20]
 80029dc:	212c      	movs	r1, #44	; 0x2c
 80029de:	fb01 f303 	mul.w	r3, r1, r3
 80029e2:	4413      	add	r3, r2
 80029e4:	334c      	adds	r3, #76	; 0x4c
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	6879      	ldr	r1, [r7, #4]
 80029ea:	697a      	ldr	r2, [r7, #20]
 80029ec:	202c      	movs	r0, #44	; 0x2c
 80029ee:	fb00 f202 	mul.w	r2, r0, r2
 80029f2:	440a      	add	r2, r1
 80029f4:	3240      	adds	r2, #64	; 0x40
 80029f6:	8812      	ldrh	r2, [r2, #0]
 80029f8:	4413      	add	r3, r2
 80029fa:	3b01      	subs	r3, #1
 80029fc:	6879      	ldr	r1, [r7, #4]
 80029fe:	697a      	ldr	r2, [r7, #20]
 8002a00:	202c      	movs	r0, #44	; 0x2c
 8002a02:	fb00 f202 	mul.w	r2, r0, r2
 8002a06:	440a      	add	r2, r1
 8002a08:	3240      	adds	r2, #64	; 0x40
 8002a0a:	8812      	ldrh	r2, [r2, #0]
 8002a0c:	fbb3 f3f2 	udiv	r3, r3, r2
 8002a10:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	f003 0301 	and.w	r3, r3, #1
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	f000 80b5 	beq.w	8002b88 <HCD_HC_OUT_IRQHandler+0x69c>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 8002a1e:	687a      	ldr	r2, [r7, #4]
 8002a20:	697b      	ldr	r3, [r7, #20]
 8002a22:	212c      	movs	r1, #44	; 0x2c
 8002a24:	fb01 f303 	mul.w	r3, r1, r3
 8002a28:	4413      	add	r3, r2
 8002a2a:	3355      	adds	r3, #85	; 0x55
 8002a2c:	781b      	ldrb	r3, [r3, #0]
 8002a2e:	f083 0301 	eor.w	r3, r3, #1
 8002a32:	b2d8      	uxtb	r0, r3
 8002a34:	687a      	ldr	r2, [r7, #4]
 8002a36:	697b      	ldr	r3, [r7, #20]
 8002a38:	212c      	movs	r1, #44	; 0x2c
 8002a3a:	fb01 f303 	mul.w	r3, r1, r3
 8002a3e:	4413      	add	r3, r2
 8002a40:	3355      	adds	r3, #85	; 0x55
 8002a42:	4602      	mov	r2, r0
 8002a44:	701a      	strb	r2, [r3, #0]
 8002a46:	e09f      	b.n	8002b88 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8002a48:	687a      	ldr	r2, [r7, #4]
 8002a4a:	697b      	ldr	r3, [r7, #20]
 8002a4c:	212c      	movs	r1, #44	; 0x2c
 8002a4e:	fb01 f303 	mul.w	r3, r1, r3
 8002a52:	4413      	add	r3, r2
 8002a54:	3361      	adds	r3, #97	; 0x61
 8002a56:	781b      	ldrb	r3, [r3, #0]
 8002a58:	2b03      	cmp	r3, #3
 8002a5a:	d109      	bne.n	8002a70 <HCD_HC_OUT_IRQHandler+0x584>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002a5c:	687a      	ldr	r2, [r7, #4]
 8002a5e:	697b      	ldr	r3, [r7, #20]
 8002a60:	212c      	movs	r1, #44	; 0x2c
 8002a62:	fb01 f303 	mul.w	r3, r1, r3
 8002a66:	4413      	add	r3, r2
 8002a68:	3360      	adds	r3, #96	; 0x60
 8002a6a:	2202      	movs	r2, #2
 8002a6c:	701a      	strb	r2, [r3, #0]
 8002a6e:	e08b      	b.n	8002b88 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8002a70:	687a      	ldr	r2, [r7, #4]
 8002a72:	697b      	ldr	r3, [r7, #20]
 8002a74:	212c      	movs	r1, #44	; 0x2c
 8002a76:	fb01 f303 	mul.w	r3, r1, r3
 8002a7a:	4413      	add	r3, r2
 8002a7c:	3361      	adds	r3, #97	; 0x61
 8002a7e:	781b      	ldrb	r3, [r3, #0]
 8002a80:	2b04      	cmp	r3, #4
 8002a82:	d109      	bne.n	8002a98 <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002a84:	687a      	ldr	r2, [r7, #4]
 8002a86:	697b      	ldr	r3, [r7, #20]
 8002a88:	212c      	movs	r1, #44	; 0x2c
 8002a8a:	fb01 f303 	mul.w	r3, r1, r3
 8002a8e:	4413      	add	r3, r2
 8002a90:	3360      	adds	r3, #96	; 0x60
 8002a92:	2202      	movs	r2, #2
 8002a94:	701a      	strb	r2, [r3, #0]
 8002a96:	e077      	b.n	8002b88 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8002a98:	687a      	ldr	r2, [r7, #4]
 8002a9a:	697b      	ldr	r3, [r7, #20]
 8002a9c:	212c      	movs	r1, #44	; 0x2c
 8002a9e:	fb01 f303 	mul.w	r3, r1, r3
 8002aa2:	4413      	add	r3, r2
 8002aa4:	3361      	adds	r3, #97	; 0x61
 8002aa6:	781b      	ldrb	r3, [r3, #0]
 8002aa8:	2b05      	cmp	r3, #5
 8002aaa:	d109      	bne.n	8002ac0 <HCD_HC_OUT_IRQHandler+0x5d4>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8002aac:	687a      	ldr	r2, [r7, #4]
 8002aae:	697b      	ldr	r3, [r7, #20]
 8002ab0:	212c      	movs	r1, #44	; 0x2c
 8002ab2:	fb01 f303 	mul.w	r3, r1, r3
 8002ab6:	4413      	add	r3, r2
 8002ab8:	3360      	adds	r3, #96	; 0x60
 8002aba:	2205      	movs	r2, #5
 8002abc:	701a      	strb	r2, [r3, #0]
 8002abe:	e063      	b.n	8002b88 <HCD_HC_OUT_IRQHandler+0x69c>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002ac0:	687a      	ldr	r2, [r7, #4]
 8002ac2:	697b      	ldr	r3, [r7, #20]
 8002ac4:	212c      	movs	r1, #44	; 0x2c
 8002ac6:	fb01 f303 	mul.w	r3, r1, r3
 8002aca:	4413      	add	r3, r2
 8002acc:	3361      	adds	r3, #97	; 0x61
 8002ace:	781b      	ldrb	r3, [r3, #0]
 8002ad0:	2b06      	cmp	r3, #6
 8002ad2:	d009      	beq.n	8002ae8 <HCD_HC_OUT_IRQHandler+0x5fc>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8002ad4:	687a      	ldr	r2, [r7, #4]
 8002ad6:	697b      	ldr	r3, [r7, #20]
 8002ad8:	212c      	movs	r1, #44	; 0x2c
 8002ada:	fb01 f303 	mul.w	r3, r1, r3
 8002ade:	4413      	add	r3, r2
 8002ae0:	3361      	adds	r3, #97	; 0x61
 8002ae2:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002ae4:	2b08      	cmp	r3, #8
 8002ae6:	d14f      	bne.n	8002b88 <HCD_HC_OUT_IRQHandler+0x69c>
      hhcd->hc[ch_num].ErrCnt++;
 8002ae8:	687a      	ldr	r2, [r7, #4]
 8002aea:	697b      	ldr	r3, [r7, #20]
 8002aec:	212c      	movs	r1, #44	; 0x2c
 8002aee:	fb01 f303 	mul.w	r3, r1, r3
 8002af2:	4413      	add	r3, r2
 8002af4:	335c      	adds	r3, #92	; 0x5c
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	1c5a      	adds	r2, r3, #1
 8002afa:	6879      	ldr	r1, [r7, #4]
 8002afc:	697b      	ldr	r3, [r7, #20]
 8002afe:	202c      	movs	r0, #44	; 0x2c
 8002b00:	fb00 f303 	mul.w	r3, r0, r3
 8002b04:	440b      	add	r3, r1
 8002b06:	335c      	adds	r3, #92	; 0x5c
 8002b08:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002b0a:	687a      	ldr	r2, [r7, #4]
 8002b0c:	697b      	ldr	r3, [r7, #20]
 8002b0e:	212c      	movs	r1, #44	; 0x2c
 8002b10:	fb01 f303 	mul.w	r3, r1, r3
 8002b14:	4413      	add	r3, r2
 8002b16:	335c      	adds	r3, #92	; 0x5c
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	2b02      	cmp	r3, #2
 8002b1c:	d912      	bls.n	8002b44 <HCD_HC_OUT_IRQHandler+0x658>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002b1e:	687a      	ldr	r2, [r7, #4]
 8002b20:	697b      	ldr	r3, [r7, #20]
 8002b22:	212c      	movs	r1, #44	; 0x2c
 8002b24:	fb01 f303 	mul.w	r3, r1, r3
 8002b28:	4413      	add	r3, r2
 8002b2a:	335c      	adds	r3, #92	; 0x5c
 8002b2c:	2200      	movs	r2, #0
 8002b2e:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002b30:	687a      	ldr	r2, [r7, #4]
 8002b32:	697b      	ldr	r3, [r7, #20]
 8002b34:	212c      	movs	r1, #44	; 0x2c
 8002b36:	fb01 f303 	mul.w	r3, r1, r3
 8002b3a:	4413      	add	r3, r2
 8002b3c:	3360      	adds	r3, #96	; 0x60
 8002b3e:	2204      	movs	r2, #4
 8002b40:	701a      	strb	r2, [r3, #0]
 8002b42:	e021      	b.n	8002b88 <HCD_HC_OUT_IRQHandler+0x69c>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002b44:	687a      	ldr	r2, [r7, #4]
 8002b46:	697b      	ldr	r3, [r7, #20]
 8002b48:	212c      	movs	r1, #44	; 0x2c
 8002b4a:	fb01 f303 	mul.w	r3, r1, r3
 8002b4e:	4413      	add	r3, r2
 8002b50:	3360      	adds	r3, #96	; 0x60
 8002b52:	2202      	movs	r2, #2
 8002b54:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002b56:	697b      	ldr	r3, [r7, #20]
 8002b58:	015a      	lsls	r2, r3, #5
 8002b5a:	69bb      	ldr	r3, [r7, #24]
 8002b5c:	4413      	add	r3, r2
 8002b5e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002b66:	693b      	ldr	r3, [r7, #16]
 8002b68:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002b6c:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002b6e:	693b      	ldr	r3, [r7, #16]
 8002b70:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002b74:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002b76:	697b      	ldr	r3, [r7, #20]
 8002b78:	015a      	lsls	r2, r3, #5
 8002b7a:	69bb      	ldr	r3, [r7, #24]
 8002b7c:	4413      	add	r3, r2
 8002b7e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b82:	461a      	mov	r2, r3
 8002b84:	693b      	ldr	r3, [r7, #16]
 8002b86:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8002b88:	697b      	ldr	r3, [r7, #20]
 8002b8a:	015a      	lsls	r2, r3, #5
 8002b8c:	69bb      	ldr	r3, [r7, #24]
 8002b8e:	4413      	add	r3, r2
 8002b90:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b94:	461a      	mov	r2, r3
 8002b96:	2302      	movs	r3, #2
 8002b98:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002b9a:	697b      	ldr	r3, [r7, #20]
 8002b9c:	b2d9      	uxtb	r1, r3
 8002b9e:	687a      	ldr	r2, [r7, #4]
 8002ba0:	697b      	ldr	r3, [r7, #20]
 8002ba2:	202c      	movs	r0, #44	; 0x2c
 8002ba4:	fb00 f303 	mul.w	r3, r0, r3
 8002ba8:	4413      	add	r3, r2
 8002baa:	3360      	adds	r3, #96	; 0x60
 8002bac:	781b      	ldrb	r3, [r3, #0]
 8002bae:	461a      	mov	r2, r3
 8002bb0:	6878      	ldr	r0, [r7, #4]
 8002bb2:	f004 fe37 	bl	8007824 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8002bb6:	bf00      	nop
 8002bb8:	3720      	adds	r7, #32
 8002bba:	46bd      	mov	sp, r7
 8002bbc:	bd80      	pop	{r7, pc}

08002bbe <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002bbe:	b580      	push	{r7, lr}
 8002bc0:	b08a      	sub	sp, #40	; 0x28
 8002bc2:	af00      	add	r7, sp, #0
 8002bc4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002bcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bce:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	6a1b      	ldr	r3, [r3, #32]
 8002bd6:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8002bd8:	69fb      	ldr	r3, [r7, #28]
 8002bda:	f003 030f 	and.w	r3, r3, #15
 8002bde:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8002be0:	69fb      	ldr	r3, [r7, #28]
 8002be2:	0c5b      	lsrs	r3, r3, #17
 8002be4:	f003 030f 	and.w	r3, r3, #15
 8002be8:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002bea:	69fb      	ldr	r3, [r7, #28]
 8002bec:	091b      	lsrs	r3, r3, #4
 8002bee:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002bf2:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8002bf4:	697b      	ldr	r3, [r7, #20]
 8002bf6:	2b02      	cmp	r3, #2
 8002bf8:	d004      	beq.n	8002c04 <HCD_RXQLVL_IRQHandler+0x46>
 8002bfa:	697b      	ldr	r3, [r7, #20]
 8002bfc:	2b05      	cmp	r3, #5
 8002bfe:	f000 80a9 	beq.w	8002d54 <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8002c02:	e0aa      	b.n	8002d5a <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8002c04:	693b      	ldr	r3, [r7, #16]
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	f000 80a6 	beq.w	8002d58 <HCD_RXQLVL_IRQHandler+0x19a>
 8002c0c:	687a      	ldr	r2, [r7, #4]
 8002c0e:	69bb      	ldr	r3, [r7, #24]
 8002c10:	212c      	movs	r1, #44	; 0x2c
 8002c12:	fb01 f303 	mul.w	r3, r1, r3
 8002c16:	4413      	add	r3, r2
 8002c18:	3344      	adds	r3, #68	; 0x44
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	f000 809b 	beq.w	8002d58 <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 8002c22:	687a      	ldr	r2, [r7, #4]
 8002c24:	69bb      	ldr	r3, [r7, #24]
 8002c26:	212c      	movs	r1, #44	; 0x2c
 8002c28:	fb01 f303 	mul.w	r3, r1, r3
 8002c2c:	4413      	add	r3, r2
 8002c2e:	3350      	adds	r3, #80	; 0x50
 8002c30:	681a      	ldr	r2, [r3, #0]
 8002c32:	693b      	ldr	r3, [r7, #16]
 8002c34:	441a      	add	r2, r3
 8002c36:	6879      	ldr	r1, [r7, #4]
 8002c38:	69bb      	ldr	r3, [r7, #24]
 8002c3a:	202c      	movs	r0, #44	; 0x2c
 8002c3c:	fb00 f303 	mul.w	r3, r0, r3
 8002c40:	440b      	add	r3, r1
 8002c42:	334c      	adds	r3, #76	; 0x4c
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	429a      	cmp	r2, r3
 8002c48:	d87a      	bhi.n	8002d40 <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	6818      	ldr	r0, [r3, #0]
 8002c4e:	687a      	ldr	r2, [r7, #4]
 8002c50:	69bb      	ldr	r3, [r7, #24]
 8002c52:	212c      	movs	r1, #44	; 0x2c
 8002c54:	fb01 f303 	mul.w	r3, r1, r3
 8002c58:	4413      	add	r3, r2
 8002c5a:	3344      	adds	r3, #68	; 0x44
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	693a      	ldr	r2, [r7, #16]
 8002c60:	b292      	uxth	r2, r2
 8002c62:	4619      	mov	r1, r3
 8002c64:	f001 fe92 	bl	800498c <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8002c68:	687a      	ldr	r2, [r7, #4]
 8002c6a:	69bb      	ldr	r3, [r7, #24]
 8002c6c:	212c      	movs	r1, #44	; 0x2c
 8002c6e:	fb01 f303 	mul.w	r3, r1, r3
 8002c72:	4413      	add	r3, r2
 8002c74:	3344      	adds	r3, #68	; 0x44
 8002c76:	681a      	ldr	r2, [r3, #0]
 8002c78:	693b      	ldr	r3, [r7, #16]
 8002c7a:	441a      	add	r2, r3
 8002c7c:	6879      	ldr	r1, [r7, #4]
 8002c7e:	69bb      	ldr	r3, [r7, #24]
 8002c80:	202c      	movs	r0, #44	; 0x2c
 8002c82:	fb00 f303 	mul.w	r3, r0, r3
 8002c86:	440b      	add	r3, r1
 8002c88:	3344      	adds	r3, #68	; 0x44
 8002c8a:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8002c8c:	687a      	ldr	r2, [r7, #4]
 8002c8e:	69bb      	ldr	r3, [r7, #24]
 8002c90:	212c      	movs	r1, #44	; 0x2c
 8002c92:	fb01 f303 	mul.w	r3, r1, r3
 8002c96:	4413      	add	r3, r2
 8002c98:	3350      	adds	r3, #80	; 0x50
 8002c9a:	681a      	ldr	r2, [r3, #0]
 8002c9c:	693b      	ldr	r3, [r7, #16]
 8002c9e:	441a      	add	r2, r3
 8002ca0:	6879      	ldr	r1, [r7, #4]
 8002ca2:	69bb      	ldr	r3, [r7, #24]
 8002ca4:	202c      	movs	r0, #44	; 0x2c
 8002ca6:	fb00 f303 	mul.w	r3, r0, r3
 8002caa:	440b      	add	r3, r1
 8002cac:	3350      	adds	r3, #80	; 0x50
 8002cae:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8002cb0:	69bb      	ldr	r3, [r7, #24]
 8002cb2:	015a      	lsls	r2, r3, #5
 8002cb4:	6a3b      	ldr	r3, [r7, #32]
 8002cb6:	4413      	add	r3, r2
 8002cb8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002cbc:	691b      	ldr	r3, [r3, #16]
 8002cbe:	0cdb      	lsrs	r3, r3, #19
 8002cc0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002cc4:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8002cc6:	687a      	ldr	r2, [r7, #4]
 8002cc8:	69bb      	ldr	r3, [r7, #24]
 8002cca:	212c      	movs	r1, #44	; 0x2c
 8002ccc:	fb01 f303 	mul.w	r3, r1, r3
 8002cd0:	4413      	add	r3, r2
 8002cd2:	3340      	adds	r3, #64	; 0x40
 8002cd4:	881b      	ldrh	r3, [r3, #0]
 8002cd6:	461a      	mov	r2, r3
 8002cd8:	693b      	ldr	r3, [r7, #16]
 8002cda:	4293      	cmp	r3, r2
 8002cdc:	d13c      	bne.n	8002d58 <HCD_RXQLVL_IRQHandler+0x19a>
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d039      	beq.n	8002d58 <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002ce4:	69bb      	ldr	r3, [r7, #24]
 8002ce6:	015a      	lsls	r2, r3, #5
 8002ce8:	6a3b      	ldr	r3, [r7, #32]
 8002cea:	4413      	add	r3, r2
 8002cec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002cf4:	68bb      	ldr	r3, [r7, #8]
 8002cf6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002cfa:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002cfc:	68bb      	ldr	r3, [r7, #8]
 8002cfe:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002d02:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002d04:	69bb      	ldr	r3, [r7, #24]
 8002d06:	015a      	lsls	r2, r3, #5
 8002d08:	6a3b      	ldr	r3, [r7, #32]
 8002d0a:	4413      	add	r3, r2
 8002d0c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d10:	461a      	mov	r2, r3
 8002d12:	68bb      	ldr	r3, [r7, #8]
 8002d14:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 8002d16:	687a      	ldr	r2, [r7, #4]
 8002d18:	69bb      	ldr	r3, [r7, #24]
 8002d1a:	212c      	movs	r1, #44	; 0x2c
 8002d1c:	fb01 f303 	mul.w	r3, r1, r3
 8002d20:	4413      	add	r3, r2
 8002d22:	3354      	adds	r3, #84	; 0x54
 8002d24:	781b      	ldrb	r3, [r3, #0]
 8002d26:	f083 0301 	eor.w	r3, r3, #1
 8002d2a:	b2d8      	uxtb	r0, r3
 8002d2c:	687a      	ldr	r2, [r7, #4]
 8002d2e:	69bb      	ldr	r3, [r7, #24]
 8002d30:	212c      	movs	r1, #44	; 0x2c
 8002d32:	fb01 f303 	mul.w	r3, r1, r3
 8002d36:	4413      	add	r3, r2
 8002d38:	3354      	adds	r3, #84	; 0x54
 8002d3a:	4602      	mov	r2, r0
 8002d3c:	701a      	strb	r2, [r3, #0]
      break;
 8002d3e:	e00b      	b.n	8002d58 <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002d40:	687a      	ldr	r2, [r7, #4]
 8002d42:	69bb      	ldr	r3, [r7, #24]
 8002d44:	212c      	movs	r1, #44	; 0x2c
 8002d46:	fb01 f303 	mul.w	r3, r1, r3
 8002d4a:	4413      	add	r3, r2
 8002d4c:	3360      	adds	r3, #96	; 0x60
 8002d4e:	2204      	movs	r2, #4
 8002d50:	701a      	strb	r2, [r3, #0]
      break;
 8002d52:	e001      	b.n	8002d58 <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 8002d54:	bf00      	nop
 8002d56:	e000      	b.n	8002d5a <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 8002d58:	bf00      	nop
  }
}
 8002d5a:	bf00      	nop
 8002d5c:	3728      	adds	r7, #40	; 0x28
 8002d5e:	46bd      	mov	sp, r7
 8002d60:	bd80      	pop	{r7, pc}

08002d62 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002d62:	b580      	push	{r7, lr}
 8002d64:	b086      	sub	sp, #24
 8002d66:	af00      	add	r7, sp, #0
 8002d68:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002d70:	697b      	ldr	r3, [r7, #20]
 8002d72:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8002d74:	693b      	ldr	r3, [r7, #16]
 8002d76:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8002d7e:	693b      	ldr	r3, [r7, #16]
 8002d80:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8002d88:	68bb      	ldr	r3, [r7, #8]
 8002d8a:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8002d8e:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	f003 0302 	and.w	r3, r3, #2
 8002d96:	2b02      	cmp	r3, #2
 8002d98:	d10b      	bne.n	8002db2 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	f003 0301 	and.w	r3, r3, #1
 8002da0:	2b01      	cmp	r3, #1
 8002da2:	d102      	bne.n	8002daa <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8002da4:	6878      	ldr	r0, [r7, #4]
 8002da6:	f004 fd21 	bl	80077ec <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8002daa:	68bb      	ldr	r3, [r7, #8]
 8002dac:	f043 0302 	orr.w	r3, r3, #2
 8002db0:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	f003 0308 	and.w	r3, r3, #8
 8002db8:	2b08      	cmp	r3, #8
 8002dba:	d132      	bne.n	8002e22 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8002dbc:	68bb      	ldr	r3, [r7, #8]
 8002dbe:	f043 0308 	orr.w	r3, r3, #8
 8002dc2:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	f003 0304 	and.w	r3, r3, #4
 8002dca:	2b04      	cmp	r3, #4
 8002dcc:	d126      	bne.n	8002e1c <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	699b      	ldr	r3, [r3, #24]
 8002dd2:	2b02      	cmp	r3, #2
 8002dd4:	d113      	bne.n	8002dfe <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8002ddc:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002de0:	d106      	bne.n	8002df0 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	2102      	movs	r1, #2
 8002de8:	4618      	mov	r0, r3
 8002dea:	f001 ff3d 	bl	8004c68 <USB_InitFSLSPClkSel>
 8002dee:	e011      	b.n	8002e14 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	2101      	movs	r1, #1
 8002df6:	4618      	mov	r0, r3
 8002df8:	f001 ff36 	bl	8004c68 <USB_InitFSLSPClkSel>
 8002dfc:	e00a      	b.n	8002e14 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	68db      	ldr	r3, [r3, #12]
 8002e02:	2b01      	cmp	r3, #1
 8002e04:	d106      	bne.n	8002e14 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8002e06:	693b      	ldr	r3, [r7, #16]
 8002e08:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002e0c:	461a      	mov	r2, r3
 8002e0e:	f64e 2360 	movw	r3, #60000	; 0xea60
 8002e12:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8002e14:	6878      	ldr	r0, [r7, #4]
 8002e16:	f004 fd13 	bl	8007840 <HAL_HCD_PortEnabled_Callback>
 8002e1a:	e002      	b.n	8002e22 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8002e1c:	6878      	ldr	r0, [r7, #4]
 8002e1e:	f004 fd1d 	bl	800785c <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	f003 0320 	and.w	r3, r3, #32
 8002e28:	2b20      	cmp	r3, #32
 8002e2a:	d103      	bne.n	8002e34 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8002e2c:	68bb      	ldr	r3, [r7, #8]
 8002e2e:	f043 0320 	orr.w	r3, r3, #32
 8002e32:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8002e34:	693b      	ldr	r3, [r7, #16]
 8002e36:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002e3a:	461a      	mov	r2, r3
 8002e3c:	68bb      	ldr	r3, [r7, #8]
 8002e3e:	6013      	str	r3, [r2, #0]
}
 8002e40:	bf00      	nop
 8002e42:	3718      	adds	r7, #24
 8002e44:	46bd      	mov	sp, r7
 8002e46:	bd80      	pop	{r7, pc}

08002e48 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002e48:	b580      	push	{r7, lr}
 8002e4a:	b084      	sub	sp, #16
 8002e4c:	af00      	add	r7, sp, #0
 8002e4e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d101      	bne.n	8002e5a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002e56:	2301      	movs	r3, #1
 8002e58:	e12b      	b.n	80030b2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e60:	b2db      	uxtb	r3, r3
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d106      	bne.n	8002e74 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	2200      	movs	r2, #0
 8002e6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002e6e:	6878      	ldr	r0, [r7, #4]
 8002e70:	f7fd fecc 	bl	8000c0c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	2224      	movs	r2, #36	; 0x24
 8002e78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	681a      	ldr	r2, [r3, #0]
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	f022 0201 	bic.w	r2, r2, #1
 8002e8a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	681a      	ldr	r2, [r3, #0]
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002e9a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	681a      	ldr	r2, [r3, #0]
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002eaa:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002eac:	f001 fa20 	bl	80042f0 <HAL_RCC_GetPCLK1Freq>
 8002eb0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	685b      	ldr	r3, [r3, #4]
 8002eb6:	4a81      	ldr	r2, [pc, #516]	; (80030bc <HAL_I2C_Init+0x274>)
 8002eb8:	4293      	cmp	r3, r2
 8002eba:	d807      	bhi.n	8002ecc <HAL_I2C_Init+0x84>
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	4a80      	ldr	r2, [pc, #512]	; (80030c0 <HAL_I2C_Init+0x278>)
 8002ec0:	4293      	cmp	r3, r2
 8002ec2:	bf94      	ite	ls
 8002ec4:	2301      	movls	r3, #1
 8002ec6:	2300      	movhi	r3, #0
 8002ec8:	b2db      	uxtb	r3, r3
 8002eca:	e006      	b.n	8002eda <HAL_I2C_Init+0x92>
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	4a7d      	ldr	r2, [pc, #500]	; (80030c4 <HAL_I2C_Init+0x27c>)
 8002ed0:	4293      	cmp	r3, r2
 8002ed2:	bf94      	ite	ls
 8002ed4:	2301      	movls	r3, #1
 8002ed6:	2300      	movhi	r3, #0
 8002ed8:	b2db      	uxtb	r3, r3
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d001      	beq.n	8002ee2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002ede:	2301      	movs	r3, #1
 8002ee0:	e0e7      	b.n	80030b2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	4a78      	ldr	r2, [pc, #480]	; (80030c8 <HAL_I2C_Init+0x280>)
 8002ee6:	fba2 2303 	umull	r2, r3, r2, r3
 8002eea:	0c9b      	lsrs	r3, r3, #18
 8002eec:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	685b      	ldr	r3, [r3, #4]
 8002ef4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	68ba      	ldr	r2, [r7, #8]
 8002efe:	430a      	orrs	r2, r1
 8002f00:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	6a1b      	ldr	r3, [r3, #32]
 8002f08:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	685b      	ldr	r3, [r3, #4]
 8002f10:	4a6a      	ldr	r2, [pc, #424]	; (80030bc <HAL_I2C_Init+0x274>)
 8002f12:	4293      	cmp	r3, r2
 8002f14:	d802      	bhi.n	8002f1c <HAL_I2C_Init+0xd4>
 8002f16:	68bb      	ldr	r3, [r7, #8]
 8002f18:	3301      	adds	r3, #1
 8002f1a:	e009      	b.n	8002f30 <HAL_I2C_Init+0xe8>
 8002f1c:	68bb      	ldr	r3, [r7, #8]
 8002f1e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002f22:	fb02 f303 	mul.w	r3, r2, r3
 8002f26:	4a69      	ldr	r2, [pc, #420]	; (80030cc <HAL_I2C_Init+0x284>)
 8002f28:	fba2 2303 	umull	r2, r3, r2, r3
 8002f2c:	099b      	lsrs	r3, r3, #6
 8002f2e:	3301      	adds	r3, #1
 8002f30:	687a      	ldr	r2, [r7, #4]
 8002f32:	6812      	ldr	r2, [r2, #0]
 8002f34:	430b      	orrs	r3, r1
 8002f36:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	69db      	ldr	r3, [r3, #28]
 8002f3e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002f42:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	685b      	ldr	r3, [r3, #4]
 8002f4a:	495c      	ldr	r1, [pc, #368]	; (80030bc <HAL_I2C_Init+0x274>)
 8002f4c:	428b      	cmp	r3, r1
 8002f4e:	d819      	bhi.n	8002f84 <HAL_I2C_Init+0x13c>
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	1e59      	subs	r1, r3, #1
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	685b      	ldr	r3, [r3, #4]
 8002f58:	005b      	lsls	r3, r3, #1
 8002f5a:	fbb1 f3f3 	udiv	r3, r1, r3
 8002f5e:	1c59      	adds	r1, r3, #1
 8002f60:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002f64:	400b      	ands	r3, r1
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d00a      	beq.n	8002f80 <HAL_I2C_Init+0x138>
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	1e59      	subs	r1, r3, #1
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	685b      	ldr	r3, [r3, #4]
 8002f72:	005b      	lsls	r3, r3, #1
 8002f74:	fbb1 f3f3 	udiv	r3, r1, r3
 8002f78:	3301      	adds	r3, #1
 8002f7a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f7e:	e051      	b.n	8003024 <HAL_I2C_Init+0x1dc>
 8002f80:	2304      	movs	r3, #4
 8002f82:	e04f      	b.n	8003024 <HAL_I2C_Init+0x1dc>
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	689b      	ldr	r3, [r3, #8]
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d111      	bne.n	8002fb0 <HAL_I2C_Init+0x168>
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	1e58      	subs	r0, r3, #1
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	6859      	ldr	r1, [r3, #4]
 8002f94:	460b      	mov	r3, r1
 8002f96:	005b      	lsls	r3, r3, #1
 8002f98:	440b      	add	r3, r1
 8002f9a:	fbb0 f3f3 	udiv	r3, r0, r3
 8002f9e:	3301      	adds	r3, #1
 8002fa0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	bf0c      	ite	eq
 8002fa8:	2301      	moveq	r3, #1
 8002faa:	2300      	movne	r3, #0
 8002fac:	b2db      	uxtb	r3, r3
 8002fae:	e012      	b.n	8002fd6 <HAL_I2C_Init+0x18e>
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	1e58      	subs	r0, r3, #1
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	6859      	ldr	r1, [r3, #4]
 8002fb8:	460b      	mov	r3, r1
 8002fba:	009b      	lsls	r3, r3, #2
 8002fbc:	440b      	add	r3, r1
 8002fbe:	0099      	lsls	r1, r3, #2
 8002fc0:	440b      	add	r3, r1
 8002fc2:	fbb0 f3f3 	udiv	r3, r0, r3
 8002fc6:	3301      	adds	r3, #1
 8002fc8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	bf0c      	ite	eq
 8002fd0:	2301      	moveq	r3, #1
 8002fd2:	2300      	movne	r3, #0
 8002fd4:	b2db      	uxtb	r3, r3
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d001      	beq.n	8002fde <HAL_I2C_Init+0x196>
 8002fda:	2301      	movs	r3, #1
 8002fdc:	e022      	b.n	8003024 <HAL_I2C_Init+0x1dc>
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	689b      	ldr	r3, [r3, #8]
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d10e      	bne.n	8003004 <HAL_I2C_Init+0x1bc>
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	1e58      	subs	r0, r3, #1
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	6859      	ldr	r1, [r3, #4]
 8002fee:	460b      	mov	r3, r1
 8002ff0:	005b      	lsls	r3, r3, #1
 8002ff2:	440b      	add	r3, r1
 8002ff4:	fbb0 f3f3 	udiv	r3, r0, r3
 8002ff8:	3301      	adds	r3, #1
 8002ffa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ffe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003002:	e00f      	b.n	8003024 <HAL_I2C_Init+0x1dc>
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	1e58      	subs	r0, r3, #1
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	6859      	ldr	r1, [r3, #4]
 800300c:	460b      	mov	r3, r1
 800300e:	009b      	lsls	r3, r3, #2
 8003010:	440b      	add	r3, r1
 8003012:	0099      	lsls	r1, r3, #2
 8003014:	440b      	add	r3, r1
 8003016:	fbb0 f3f3 	udiv	r3, r0, r3
 800301a:	3301      	adds	r3, #1
 800301c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003020:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003024:	6879      	ldr	r1, [r7, #4]
 8003026:	6809      	ldr	r1, [r1, #0]
 8003028:	4313      	orrs	r3, r2
 800302a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	69da      	ldr	r2, [r3, #28]
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	6a1b      	ldr	r3, [r3, #32]
 800303e:	431a      	orrs	r2, r3
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	430a      	orrs	r2, r1
 8003046:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	689b      	ldr	r3, [r3, #8]
 800304e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003052:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003056:	687a      	ldr	r2, [r7, #4]
 8003058:	6911      	ldr	r1, [r2, #16]
 800305a:	687a      	ldr	r2, [r7, #4]
 800305c:	68d2      	ldr	r2, [r2, #12]
 800305e:	4311      	orrs	r1, r2
 8003060:	687a      	ldr	r2, [r7, #4]
 8003062:	6812      	ldr	r2, [r2, #0]
 8003064:	430b      	orrs	r3, r1
 8003066:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	68db      	ldr	r3, [r3, #12]
 800306e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	695a      	ldr	r2, [r3, #20]
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	699b      	ldr	r3, [r3, #24]
 800307a:	431a      	orrs	r2, r3
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	430a      	orrs	r2, r1
 8003082:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	681a      	ldr	r2, [r3, #0]
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	f042 0201 	orr.w	r2, r2, #1
 8003092:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	2200      	movs	r2, #0
 8003098:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	2220      	movs	r2, #32
 800309e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	2200      	movs	r2, #0
 80030a6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	2200      	movs	r2, #0
 80030ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80030b0:	2300      	movs	r3, #0
}
 80030b2:	4618      	mov	r0, r3
 80030b4:	3710      	adds	r7, #16
 80030b6:	46bd      	mov	sp, r7
 80030b8:	bd80      	pop	{r7, pc}
 80030ba:	bf00      	nop
 80030bc:	000186a0 	.word	0x000186a0
 80030c0:	001e847f 	.word	0x001e847f
 80030c4:	003d08ff 	.word	0x003d08ff
 80030c8:	431bde83 	.word	0x431bde83
 80030cc:	10624dd3 	.word	0x10624dd3

080030d0 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 80030d0:	b580      	push	{r7, lr}
 80030d2:	b088      	sub	sp, #32
 80030d4:	af00      	add	r7, sp, #0
 80030d6:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d101      	bne.n	80030e2 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 80030de:	2301      	movs	r3, #1
 80030e0:	e128      	b.n	8003334 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80030e8:	b2db      	uxtb	r3, r3
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d109      	bne.n	8003102 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	2200      	movs	r2, #0
 80030f2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	4a90      	ldr	r2, [pc, #576]	; (800333c <HAL_I2S_Init+0x26c>)
 80030fa:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 80030fc:	6878      	ldr	r0, [r7, #4]
 80030fe:	f7fd fdcd 	bl	8000c9c <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	2202      	movs	r2, #2
 8003106:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	69db      	ldr	r3, [r3, #28]
 8003110:	687a      	ldr	r2, [r7, #4]
 8003112:	6812      	ldr	r2, [r2, #0]
 8003114:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003118:	f023 030f 	bic.w	r3, r3, #15
 800311c:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	2202      	movs	r2, #2
 8003124:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	695b      	ldr	r3, [r3, #20]
 800312a:	2b02      	cmp	r3, #2
 800312c:	d060      	beq.n	80031f0 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	68db      	ldr	r3, [r3, #12]
 8003132:	2b00      	cmp	r3, #0
 8003134:	d102      	bne.n	800313c <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8003136:	2310      	movs	r3, #16
 8003138:	617b      	str	r3, [r7, #20]
 800313a:	e001      	b.n	8003140 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 800313c:	2320      	movs	r3, #32
 800313e:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	689b      	ldr	r3, [r3, #8]
 8003144:	2b20      	cmp	r3, #32
 8003146:	d802      	bhi.n	800314e <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8003148:	697b      	ldr	r3, [r7, #20]
 800314a:	005b      	lsls	r3, r3, #1
 800314c:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 800314e:	2001      	movs	r0, #1
 8003150:	f001 f9c4 	bl	80044dc <HAL_RCCEx_GetPeriphCLKFreq>
 8003154:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	691b      	ldr	r3, [r3, #16]
 800315a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800315e:	d125      	bne.n	80031ac <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	68db      	ldr	r3, [r3, #12]
 8003164:	2b00      	cmp	r3, #0
 8003166:	d010      	beq.n	800318a <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003168:	697b      	ldr	r3, [r7, #20]
 800316a:	009b      	lsls	r3, r3, #2
 800316c:	68fa      	ldr	r2, [r7, #12]
 800316e:	fbb2 f2f3 	udiv	r2, r2, r3
 8003172:	4613      	mov	r3, r2
 8003174:	009b      	lsls	r3, r3, #2
 8003176:	4413      	add	r3, r2
 8003178:	005b      	lsls	r3, r3, #1
 800317a:	461a      	mov	r2, r3
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	695b      	ldr	r3, [r3, #20]
 8003180:	fbb2 f3f3 	udiv	r3, r2, r3
 8003184:	3305      	adds	r3, #5
 8003186:	613b      	str	r3, [r7, #16]
 8003188:	e01f      	b.n	80031ca <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800318a:	697b      	ldr	r3, [r7, #20]
 800318c:	00db      	lsls	r3, r3, #3
 800318e:	68fa      	ldr	r2, [r7, #12]
 8003190:	fbb2 f2f3 	udiv	r2, r2, r3
 8003194:	4613      	mov	r3, r2
 8003196:	009b      	lsls	r3, r3, #2
 8003198:	4413      	add	r3, r2
 800319a:	005b      	lsls	r3, r3, #1
 800319c:	461a      	mov	r2, r3
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	695b      	ldr	r3, [r3, #20]
 80031a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80031a6:	3305      	adds	r3, #5
 80031a8:	613b      	str	r3, [r7, #16]
 80031aa:	e00e      	b.n	80031ca <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80031ac:	68fa      	ldr	r2, [r7, #12]
 80031ae:	697b      	ldr	r3, [r7, #20]
 80031b0:	fbb2 f2f3 	udiv	r2, r2, r3
 80031b4:	4613      	mov	r3, r2
 80031b6:	009b      	lsls	r3, r3, #2
 80031b8:	4413      	add	r3, r2
 80031ba:	005b      	lsls	r3, r3, #1
 80031bc:	461a      	mov	r2, r3
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	695b      	ldr	r3, [r3, #20]
 80031c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80031c6:	3305      	adds	r3, #5
 80031c8:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 80031ca:	693b      	ldr	r3, [r7, #16]
 80031cc:	4a5c      	ldr	r2, [pc, #368]	; (8003340 <HAL_I2S_Init+0x270>)
 80031ce:	fba2 2303 	umull	r2, r3, r2, r3
 80031d2:	08db      	lsrs	r3, r3, #3
 80031d4:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 80031d6:	693b      	ldr	r3, [r7, #16]
 80031d8:	f003 0301 	and.w	r3, r3, #1
 80031dc:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 80031de:	693a      	ldr	r2, [r7, #16]
 80031e0:	69bb      	ldr	r3, [r7, #24]
 80031e2:	1ad3      	subs	r3, r2, r3
 80031e4:	085b      	lsrs	r3, r3, #1
 80031e6:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 80031e8:	69bb      	ldr	r3, [r7, #24]
 80031ea:	021b      	lsls	r3, r3, #8
 80031ec:	61bb      	str	r3, [r7, #24]
 80031ee:	e003      	b.n	80031f8 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 80031f0:	2302      	movs	r3, #2
 80031f2:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 80031f4:	2300      	movs	r3, #0
 80031f6:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 80031f8:	69fb      	ldr	r3, [r7, #28]
 80031fa:	2b01      	cmp	r3, #1
 80031fc:	d902      	bls.n	8003204 <HAL_I2S_Init+0x134>
 80031fe:	69fb      	ldr	r3, [r7, #28]
 8003200:	2bff      	cmp	r3, #255	; 0xff
 8003202:	d907      	bls.n	8003214 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003208:	f043 0210 	orr.w	r2, r3, #16
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8003210:	2301      	movs	r3, #1
 8003212:	e08f      	b.n	8003334 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	691a      	ldr	r2, [r3, #16]
 8003218:	69bb      	ldr	r3, [r7, #24]
 800321a:	ea42 0103 	orr.w	r1, r2, r3
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	69fa      	ldr	r2, [r7, #28]
 8003224:	430a      	orrs	r2, r1
 8003226:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	69db      	ldr	r3, [r3, #28]
 800322e:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003232:	f023 030f 	bic.w	r3, r3, #15
 8003236:	687a      	ldr	r2, [r7, #4]
 8003238:	6851      	ldr	r1, [r2, #4]
 800323a:	687a      	ldr	r2, [r7, #4]
 800323c:	6892      	ldr	r2, [r2, #8]
 800323e:	4311      	orrs	r1, r2
 8003240:	687a      	ldr	r2, [r7, #4]
 8003242:	68d2      	ldr	r2, [r2, #12]
 8003244:	4311      	orrs	r1, r2
 8003246:	687a      	ldr	r2, [r7, #4]
 8003248:	6992      	ldr	r2, [r2, #24]
 800324a:	430a      	orrs	r2, r1
 800324c:	431a      	orrs	r2, r3
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003256:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	6a1b      	ldr	r3, [r3, #32]
 800325c:	2b01      	cmp	r3, #1
 800325e:	d161      	bne.n	8003324 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	4a38      	ldr	r2, [pc, #224]	; (8003344 <HAL_I2S_Init+0x274>)
 8003264:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	4a37      	ldr	r2, [pc, #220]	; (8003348 <HAL_I2S_Init+0x278>)
 800326c:	4293      	cmp	r3, r2
 800326e:	d101      	bne.n	8003274 <HAL_I2S_Init+0x1a4>
 8003270:	4b36      	ldr	r3, [pc, #216]	; (800334c <HAL_I2S_Init+0x27c>)
 8003272:	e001      	b.n	8003278 <HAL_I2S_Init+0x1a8>
 8003274:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003278:	69db      	ldr	r3, [r3, #28]
 800327a:	687a      	ldr	r2, [r7, #4]
 800327c:	6812      	ldr	r2, [r2, #0]
 800327e:	4932      	ldr	r1, [pc, #200]	; (8003348 <HAL_I2S_Init+0x278>)
 8003280:	428a      	cmp	r2, r1
 8003282:	d101      	bne.n	8003288 <HAL_I2S_Init+0x1b8>
 8003284:	4a31      	ldr	r2, [pc, #196]	; (800334c <HAL_I2S_Init+0x27c>)
 8003286:	e001      	b.n	800328c <HAL_I2S_Init+0x1bc>
 8003288:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 800328c:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003290:	f023 030f 	bic.w	r3, r3, #15
 8003294:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	4a2b      	ldr	r2, [pc, #172]	; (8003348 <HAL_I2S_Init+0x278>)
 800329c:	4293      	cmp	r3, r2
 800329e:	d101      	bne.n	80032a4 <HAL_I2S_Init+0x1d4>
 80032a0:	4b2a      	ldr	r3, [pc, #168]	; (800334c <HAL_I2S_Init+0x27c>)
 80032a2:	e001      	b.n	80032a8 <HAL_I2S_Init+0x1d8>
 80032a4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80032a8:	2202      	movs	r2, #2
 80032aa:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	4a25      	ldr	r2, [pc, #148]	; (8003348 <HAL_I2S_Init+0x278>)
 80032b2:	4293      	cmp	r3, r2
 80032b4:	d101      	bne.n	80032ba <HAL_I2S_Init+0x1ea>
 80032b6:	4b25      	ldr	r3, [pc, #148]	; (800334c <HAL_I2S_Init+0x27c>)
 80032b8:	e001      	b.n	80032be <HAL_I2S_Init+0x1ee>
 80032ba:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80032be:	69db      	ldr	r3, [r3, #28]
 80032c0:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	685b      	ldr	r3, [r3, #4]
 80032c6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80032ca:	d003      	beq.n	80032d4 <HAL_I2S_Init+0x204>
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	685b      	ldr	r3, [r3, #4]
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d103      	bne.n	80032dc <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 80032d4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80032d8:	613b      	str	r3, [r7, #16]
 80032da:	e001      	b.n	80032e0 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 80032dc:	2300      	movs	r3, #0
 80032de:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 80032e0:	693b      	ldr	r3, [r7, #16]
 80032e2:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	689b      	ldr	r3, [r3, #8]
 80032e8:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80032ea:	4313      	orrs	r3, r2
 80032ec:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	68db      	ldr	r3, [r3, #12]
 80032f2:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80032f4:	4313      	orrs	r3, r2
 80032f6:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	699b      	ldr	r3, [r3, #24]
 80032fc:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80032fe:	4313      	orrs	r3, r2
 8003300:	b29a      	uxth	r2, r3
 8003302:	897b      	ldrh	r3, [r7, #10]
 8003304:	4313      	orrs	r3, r2
 8003306:	b29b      	uxth	r3, r3
 8003308:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800330c:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	4a0d      	ldr	r2, [pc, #52]	; (8003348 <HAL_I2S_Init+0x278>)
 8003314:	4293      	cmp	r3, r2
 8003316:	d101      	bne.n	800331c <HAL_I2S_Init+0x24c>
 8003318:	4b0c      	ldr	r3, [pc, #48]	; (800334c <HAL_I2S_Init+0x27c>)
 800331a:	e001      	b.n	8003320 <HAL_I2S_Init+0x250>
 800331c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003320:	897a      	ldrh	r2, [r7, #10]
 8003322:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	2200      	movs	r2, #0
 8003328:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	2201      	movs	r2, #1
 800332e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8003332:	2300      	movs	r3, #0
}
 8003334:	4618      	mov	r0, r3
 8003336:	3720      	adds	r7, #32
 8003338:	46bd      	mov	sp, r7
 800333a:	bd80      	pop	{r7, pc}
 800333c:	08003447 	.word	0x08003447
 8003340:	cccccccd 	.word	0xcccccccd
 8003344:	0800355d 	.word	0x0800355d
 8003348:	40003800 	.word	0x40003800
 800334c:	40003400 	.word	0x40003400

08003350 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003350:	b480      	push	{r7}
 8003352:	b083      	sub	sp, #12
 8003354:	af00      	add	r7, sp, #0
 8003356:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8003358:	bf00      	nop
 800335a:	370c      	adds	r7, #12
 800335c:	46bd      	mov	sp, r7
 800335e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003362:	4770      	bx	lr

08003364 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003364:	b480      	push	{r7}
 8003366:	b083      	sub	sp, #12
 8003368:	af00      	add	r7, sp, #0
 800336a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 800336c:	bf00      	nop
 800336e:	370c      	adds	r7, #12
 8003370:	46bd      	mov	sp, r7
 8003372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003376:	4770      	bx	lr

08003378 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8003378:	b480      	push	{r7}
 800337a:	b083      	sub	sp, #12
 800337c:	af00      	add	r7, sp, #0
 800337e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8003380:	bf00      	nop
 8003382:	370c      	adds	r7, #12
 8003384:	46bd      	mov	sp, r7
 8003386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800338a:	4770      	bx	lr

0800338c <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 800338c:	b580      	push	{r7, lr}
 800338e:	b082      	sub	sp, #8
 8003390:	af00      	add	r7, sp, #0
 8003392:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003398:	881a      	ldrh	r2, [r3, #0]
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033a4:	1c9a      	adds	r2, r3, #2
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033ae:	b29b      	uxth	r3, r3
 80033b0:	3b01      	subs	r3, #1
 80033b2:	b29a      	uxth	r2, r3
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033bc:	b29b      	uxth	r3, r3
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d10e      	bne.n	80033e0 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	685a      	ldr	r2, [r3, #4]
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80033d0:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	2201      	movs	r2, #1
 80033d6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 80033da:	6878      	ldr	r0, [r7, #4]
 80033dc:	f7ff ffb8 	bl	8003350 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80033e0:	bf00      	nop
 80033e2:	3708      	adds	r7, #8
 80033e4:	46bd      	mov	sp, r7
 80033e6:	bd80      	pop	{r7, pc}

080033e8 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 80033e8:	b580      	push	{r7, lr}
 80033ea:	b082      	sub	sp, #8
 80033ec:	af00      	add	r7, sp, #0
 80033ee:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	68da      	ldr	r2, [r3, #12]
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033fa:	b292      	uxth	r2, r2
 80033fc:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003402:	1c9a      	adds	r2, r3, #2
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800340c:	b29b      	uxth	r3, r3
 800340e:	3b01      	subs	r3, #1
 8003410:	b29a      	uxth	r2, r3
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800341a:	b29b      	uxth	r3, r3
 800341c:	2b00      	cmp	r3, #0
 800341e:	d10e      	bne.n	800343e <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	685a      	ldr	r2, [r3, #4]
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800342e:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	2201      	movs	r2, #1
 8003434:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8003438:	6878      	ldr	r0, [r7, #4]
 800343a:	f7ff ff93 	bl	8003364 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 800343e:	bf00      	nop
 8003440:	3708      	adds	r7, #8
 8003442:	46bd      	mov	sp, r7
 8003444:	bd80      	pop	{r7, pc}

08003446 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8003446:	b580      	push	{r7, lr}
 8003448:	b086      	sub	sp, #24
 800344a:	af00      	add	r7, sp, #0
 800344c:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	689b      	ldr	r3, [r3, #8]
 8003454:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800345c:	b2db      	uxtb	r3, r3
 800345e:	2b04      	cmp	r3, #4
 8003460:	d13a      	bne.n	80034d8 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8003462:	697b      	ldr	r3, [r7, #20]
 8003464:	f003 0301 	and.w	r3, r3, #1
 8003468:	2b01      	cmp	r3, #1
 800346a:	d109      	bne.n	8003480 <I2S_IRQHandler+0x3a>
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	685b      	ldr	r3, [r3, #4]
 8003472:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003476:	2b40      	cmp	r3, #64	; 0x40
 8003478:	d102      	bne.n	8003480 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 800347a:	6878      	ldr	r0, [r7, #4]
 800347c:	f7ff ffb4 	bl	80033e8 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8003480:	697b      	ldr	r3, [r7, #20]
 8003482:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003486:	2b40      	cmp	r3, #64	; 0x40
 8003488:	d126      	bne.n	80034d8 <I2S_IRQHandler+0x92>
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	685b      	ldr	r3, [r3, #4]
 8003490:	f003 0320 	and.w	r3, r3, #32
 8003494:	2b20      	cmp	r3, #32
 8003496:	d11f      	bne.n	80034d8 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	685a      	ldr	r2, [r3, #4]
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80034a6:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80034a8:	2300      	movs	r3, #0
 80034aa:	613b      	str	r3, [r7, #16]
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	68db      	ldr	r3, [r3, #12]
 80034b2:	613b      	str	r3, [r7, #16]
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	689b      	ldr	r3, [r3, #8]
 80034ba:	613b      	str	r3, [r7, #16]
 80034bc:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	2201      	movs	r2, #1
 80034c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034ca:	f043 0202 	orr.w	r2, r3, #2
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80034d2:	6878      	ldr	r0, [r7, #4]
 80034d4:	f7ff ff50 	bl	8003378 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80034de:	b2db      	uxtb	r3, r3
 80034e0:	2b03      	cmp	r3, #3
 80034e2:	d136      	bne.n	8003552 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 80034e4:	697b      	ldr	r3, [r7, #20]
 80034e6:	f003 0302 	and.w	r3, r3, #2
 80034ea:	2b02      	cmp	r3, #2
 80034ec:	d109      	bne.n	8003502 <I2S_IRQHandler+0xbc>
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	685b      	ldr	r3, [r3, #4]
 80034f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034f8:	2b80      	cmp	r3, #128	; 0x80
 80034fa:	d102      	bne.n	8003502 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 80034fc:	6878      	ldr	r0, [r7, #4]
 80034fe:	f7ff ff45 	bl	800338c <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8003502:	697b      	ldr	r3, [r7, #20]
 8003504:	f003 0308 	and.w	r3, r3, #8
 8003508:	2b08      	cmp	r3, #8
 800350a:	d122      	bne.n	8003552 <I2S_IRQHandler+0x10c>
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	685b      	ldr	r3, [r3, #4]
 8003512:	f003 0320 	and.w	r3, r3, #32
 8003516:	2b20      	cmp	r3, #32
 8003518:	d11b      	bne.n	8003552 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	685a      	ldr	r2, [r3, #4]
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003528:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 800352a:	2300      	movs	r3, #0
 800352c:	60fb      	str	r3, [r7, #12]
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	689b      	ldr	r3, [r3, #8]
 8003534:	60fb      	str	r3, [r7, #12]
 8003536:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	2201      	movs	r2, #1
 800353c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003544:	f043 0204 	orr.w	r2, r3, #4
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800354c:	6878      	ldr	r0, [r7, #4]
 800354e:	f7ff ff13 	bl	8003378 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003552:	bf00      	nop
 8003554:	3718      	adds	r7, #24
 8003556:	46bd      	mov	sp, r7
 8003558:	bd80      	pop	{r7, pc}
	...

0800355c <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 800355c:	b580      	push	{r7, lr}
 800355e:	b088      	sub	sp, #32
 8003560:	af00      	add	r7, sp, #0
 8003562:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	689b      	ldr	r3, [r3, #8]
 800356a:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	4a92      	ldr	r2, [pc, #584]	; (80037bc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003572:	4293      	cmp	r3, r2
 8003574:	d101      	bne.n	800357a <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8003576:	4b92      	ldr	r3, [pc, #584]	; (80037c0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003578:	e001      	b.n	800357e <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 800357a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800357e:	689b      	ldr	r3, [r3, #8]
 8003580:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	685b      	ldr	r3, [r3, #4]
 8003588:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	4a8b      	ldr	r2, [pc, #556]	; (80037bc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003590:	4293      	cmp	r3, r2
 8003592:	d101      	bne.n	8003598 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8003594:	4b8a      	ldr	r3, [pc, #552]	; (80037c0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003596:	e001      	b.n	800359c <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8003598:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800359c:	685b      	ldr	r3, [r3, #4]
 800359e:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	685b      	ldr	r3, [r3, #4]
 80035a4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80035a8:	d004      	beq.n	80035b4 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	685b      	ldr	r3, [r3, #4]
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	f040 8099 	bne.w	80036e6 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 80035b4:	69fb      	ldr	r3, [r7, #28]
 80035b6:	f003 0302 	and.w	r3, r3, #2
 80035ba:	2b02      	cmp	r3, #2
 80035bc:	d107      	bne.n	80035ce <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 80035be:	697b      	ldr	r3, [r7, #20]
 80035c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d002      	beq.n	80035ce <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 80035c8:	6878      	ldr	r0, [r7, #4]
 80035ca:	f000 f925 	bl	8003818 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 80035ce:	69bb      	ldr	r3, [r7, #24]
 80035d0:	f003 0301 	and.w	r3, r3, #1
 80035d4:	2b01      	cmp	r3, #1
 80035d6:	d107      	bne.n	80035e8 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 80035d8:	693b      	ldr	r3, [r7, #16]
 80035da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d002      	beq.n	80035e8 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 80035e2:	6878      	ldr	r0, [r7, #4]
 80035e4:	f000 f9c8 	bl	8003978 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80035e8:	69bb      	ldr	r3, [r7, #24]
 80035ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035ee:	2b40      	cmp	r3, #64	; 0x40
 80035f0:	d13a      	bne.n	8003668 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 80035f2:	693b      	ldr	r3, [r7, #16]
 80035f4:	f003 0320 	and.w	r3, r3, #32
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d035      	beq.n	8003668 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	4a6e      	ldr	r2, [pc, #440]	; (80037bc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003602:	4293      	cmp	r3, r2
 8003604:	d101      	bne.n	800360a <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8003606:	4b6e      	ldr	r3, [pc, #440]	; (80037c0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003608:	e001      	b.n	800360e <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 800360a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800360e:	685a      	ldr	r2, [r3, #4]
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	4969      	ldr	r1, [pc, #420]	; (80037bc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003616:	428b      	cmp	r3, r1
 8003618:	d101      	bne.n	800361e <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 800361a:	4b69      	ldr	r3, [pc, #420]	; (80037c0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800361c:	e001      	b.n	8003622 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 800361e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003622:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003626:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	685a      	ldr	r2, [r3, #4]
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003636:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003638:	2300      	movs	r3, #0
 800363a:	60fb      	str	r3, [r7, #12]
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	68db      	ldr	r3, [r3, #12]
 8003642:	60fb      	str	r3, [r7, #12]
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	689b      	ldr	r3, [r3, #8]
 800364a:	60fb      	str	r3, [r7, #12]
 800364c:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	2201      	movs	r2, #1
 8003652:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800365a:	f043 0202 	orr.w	r2, r3, #2
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003662:	6878      	ldr	r0, [r7, #4]
 8003664:	f7ff fe88 	bl	8003378 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003668:	69fb      	ldr	r3, [r7, #28]
 800366a:	f003 0308 	and.w	r3, r3, #8
 800366e:	2b08      	cmp	r3, #8
 8003670:	f040 80c3 	bne.w	80037fa <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8003674:	697b      	ldr	r3, [r7, #20]
 8003676:	f003 0320 	and.w	r3, r3, #32
 800367a:	2b00      	cmp	r3, #0
 800367c:	f000 80bd 	beq.w	80037fa <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	685a      	ldr	r2, [r3, #4]
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800368e:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	4a49      	ldr	r2, [pc, #292]	; (80037bc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003696:	4293      	cmp	r3, r2
 8003698:	d101      	bne.n	800369e <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 800369a:	4b49      	ldr	r3, [pc, #292]	; (80037c0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800369c:	e001      	b.n	80036a2 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 800369e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80036a2:	685a      	ldr	r2, [r3, #4]
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	4944      	ldr	r1, [pc, #272]	; (80037bc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80036aa:	428b      	cmp	r3, r1
 80036ac:	d101      	bne.n	80036b2 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 80036ae:	4b44      	ldr	r3, [pc, #272]	; (80037c0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80036b0:	e001      	b.n	80036b6 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 80036b2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80036b6:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80036ba:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80036bc:	2300      	movs	r3, #0
 80036be:	60bb      	str	r3, [r7, #8]
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	689b      	ldr	r3, [r3, #8]
 80036c6:	60bb      	str	r3, [r7, #8]
 80036c8:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	2201      	movs	r2, #1
 80036ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036d6:	f043 0204 	orr.w	r2, r3, #4
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80036de:	6878      	ldr	r0, [r7, #4]
 80036e0:	f7ff fe4a 	bl	8003378 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80036e4:	e089      	b.n	80037fa <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 80036e6:	69bb      	ldr	r3, [r7, #24]
 80036e8:	f003 0302 	and.w	r3, r3, #2
 80036ec:	2b02      	cmp	r3, #2
 80036ee:	d107      	bne.n	8003700 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 80036f0:	693b      	ldr	r3, [r7, #16]
 80036f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d002      	beq.n	8003700 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 80036fa:	6878      	ldr	r0, [r7, #4]
 80036fc:	f000 f8be 	bl	800387c <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8003700:	69fb      	ldr	r3, [r7, #28]
 8003702:	f003 0301 	and.w	r3, r3, #1
 8003706:	2b01      	cmp	r3, #1
 8003708:	d107      	bne.n	800371a <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 800370a:	697b      	ldr	r3, [r7, #20]
 800370c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003710:	2b00      	cmp	r3, #0
 8003712:	d002      	beq.n	800371a <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8003714:	6878      	ldr	r0, [r7, #4]
 8003716:	f000 f8fd 	bl	8003914 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800371a:	69fb      	ldr	r3, [r7, #28]
 800371c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003720:	2b40      	cmp	r3, #64	; 0x40
 8003722:	d12f      	bne.n	8003784 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8003724:	697b      	ldr	r3, [r7, #20]
 8003726:	f003 0320 	and.w	r3, r3, #32
 800372a:	2b00      	cmp	r3, #0
 800372c:	d02a      	beq.n	8003784 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	685a      	ldr	r2, [r3, #4]
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800373c:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	4a1e      	ldr	r2, [pc, #120]	; (80037bc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003744:	4293      	cmp	r3, r2
 8003746:	d101      	bne.n	800374c <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8003748:	4b1d      	ldr	r3, [pc, #116]	; (80037c0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800374a:	e001      	b.n	8003750 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 800374c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003750:	685a      	ldr	r2, [r3, #4]
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	4919      	ldr	r1, [pc, #100]	; (80037bc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003758:	428b      	cmp	r3, r1
 800375a:	d101      	bne.n	8003760 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 800375c:	4b18      	ldr	r3, [pc, #96]	; (80037c0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800375e:	e001      	b.n	8003764 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8003760:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003764:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003768:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	2201      	movs	r2, #1
 800376e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003776:	f043 0202 	orr.w	r2, r3, #2
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800377e:	6878      	ldr	r0, [r7, #4]
 8003780:	f7ff fdfa 	bl	8003378 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8003784:	69bb      	ldr	r3, [r7, #24]
 8003786:	f003 0308 	and.w	r3, r3, #8
 800378a:	2b08      	cmp	r3, #8
 800378c:	d136      	bne.n	80037fc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 800378e:	693b      	ldr	r3, [r7, #16]
 8003790:	f003 0320 	and.w	r3, r3, #32
 8003794:	2b00      	cmp	r3, #0
 8003796:	d031      	beq.n	80037fc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	4a07      	ldr	r2, [pc, #28]	; (80037bc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800379e:	4293      	cmp	r3, r2
 80037a0:	d101      	bne.n	80037a6 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 80037a2:	4b07      	ldr	r3, [pc, #28]	; (80037c0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80037a4:	e001      	b.n	80037aa <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 80037a6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80037aa:	685a      	ldr	r2, [r3, #4]
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	4902      	ldr	r1, [pc, #8]	; (80037bc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80037b2:	428b      	cmp	r3, r1
 80037b4:	d106      	bne.n	80037c4 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 80037b6:	4b02      	ldr	r3, [pc, #8]	; (80037c0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80037b8:	e006      	b.n	80037c8 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 80037ba:	bf00      	nop
 80037bc:	40003800 	.word	0x40003800
 80037c0:	40003400 	.word	0x40003400
 80037c4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80037c8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80037cc:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	685a      	ldr	r2, [r3, #4]
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80037dc:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	2201      	movs	r2, #1
 80037e2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037ea:	f043 0204 	orr.w	r2, r3, #4
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80037f2:	6878      	ldr	r0, [r7, #4]
 80037f4:	f7ff fdc0 	bl	8003378 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80037f8:	e000      	b.n	80037fc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80037fa:	bf00      	nop
}
 80037fc:	bf00      	nop
 80037fe:	3720      	adds	r7, #32
 8003800:	46bd      	mov	sp, r7
 8003802:	bd80      	pop	{r7, pc}

08003804 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003804:	b480      	push	{r7}
 8003806:	b083      	sub	sp, #12
 8003808:	af00      	add	r7, sp, #0
 800380a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 800380c:	bf00      	nop
 800380e:	370c      	adds	r7, #12
 8003810:	46bd      	mov	sp, r7
 8003812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003816:	4770      	bx	lr

08003818 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8003818:	b580      	push	{r7, lr}
 800381a:	b082      	sub	sp, #8
 800381c:	af00      	add	r7, sp, #0
 800381e:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003824:	1c99      	adds	r1, r3, #2
 8003826:	687a      	ldr	r2, [r7, #4]
 8003828:	6251      	str	r1, [r2, #36]	; 0x24
 800382a:	881a      	ldrh	r2, [r3, #0]
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003836:	b29b      	uxth	r3, r3
 8003838:	3b01      	subs	r3, #1
 800383a:	b29a      	uxth	r2, r3
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003844:	b29b      	uxth	r3, r3
 8003846:	2b00      	cmp	r3, #0
 8003848:	d113      	bne.n	8003872 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	685a      	ldr	r2, [r3, #4]
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003858:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800385e:	b29b      	uxth	r3, r3
 8003860:	2b00      	cmp	r3, #0
 8003862:	d106      	bne.n	8003872 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	2201      	movs	r2, #1
 8003868:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800386c:	6878      	ldr	r0, [r7, #4]
 800386e:	f7ff ffc9 	bl	8003804 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003872:	bf00      	nop
 8003874:	3708      	adds	r7, #8
 8003876:	46bd      	mov	sp, r7
 8003878:	bd80      	pop	{r7, pc}
	...

0800387c <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 800387c:	b580      	push	{r7, lr}
 800387e:	b082      	sub	sp, #8
 8003880:	af00      	add	r7, sp, #0
 8003882:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003888:	1c99      	adds	r1, r3, #2
 800388a:	687a      	ldr	r2, [r7, #4]
 800388c:	6251      	str	r1, [r2, #36]	; 0x24
 800388e:	8819      	ldrh	r1, [r3, #0]
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	4a1d      	ldr	r2, [pc, #116]	; (800390c <I2SEx_TxISR_I2SExt+0x90>)
 8003896:	4293      	cmp	r3, r2
 8003898:	d101      	bne.n	800389e <I2SEx_TxISR_I2SExt+0x22>
 800389a:	4b1d      	ldr	r3, [pc, #116]	; (8003910 <I2SEx_TxISR_I2SExt+0x94>)
 800389c:	e001      	b.n	80038a2 <I2SEx_TxISR_I2SExt+0x26>
 800389e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80038a2:	460a      	mov	r2, r1
 80038a4:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038aa:	b29b      	uxth	r3, r3
 80038ac:	3b01      	subs	r3, #1
 80038ae:	b29a      	uxth	r2, r3
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038b8:	b29b      	uxth	r3, r3
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d121      	bne.n	8003902 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	4a12      	ldr	r2, [pc, #72]	; (800390c <I2SEx_TxISR_I2SExt+0x90>)
 80038c4:	4293      	cmp	r3, r2
 80038c6:	d101      	bne.n	80038cc <I2SEx_TxISR_I2SExt+0x50>
 80038c8:	4b11      	ldr	r3, [pc, #68]	; (8003910 <I2SEx_TxISR_I2SExt+0x94>)
 80038ca:	e001      	b.n	80038d0 <I2SEx_TxISR_I2SExt+0x54>
 80038cc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80038d0:	685a      	ldr	r2, [r3, #4]
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	490d      	ldr	r1, [pc, #52]	; (800390c <I2SEx_TxISR_I2SExt+0x90>)
 80038d8:	428b      	cmp	r3, r1
 80038da:	d101      	bne.n	80038e0 <I2SEx_TxISR_I2SExt+0x64>
 80038dc:	4b0c      	ldr	r3, [pc, #48]	; (8003910 <I2SEx_TxISR_I2SExt+0x94>)
 80038de:	e001      	b.n	80038e4 <I2SEx_TxISR_I2SExt+0x68>
 80038e0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80038e4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80038e8:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80038ee:	b29b      	uxth	r3, r3
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d106      	bne.n	8003902 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	2201      	movs	r2, #1
 80038f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80038fc:	6878      	ldr	r0, [r7, #4]
 80038fe:	f7ff ff81 	bl	8003804 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003902:	bf00      	nop
 8003904:	3708      	adds	r7, #8
 8003906:	46bd      	mov	sp, r7
 8003908:	bd80      	pop	{r7, pc}
 800390a:	bf00      	nop
 800390c:	40003800 	.word	0x40003800
 8003910:	40003400 	.word	0x40003400

08003914 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8003914:	b580      	push	{r7, lr}
 8003916:	b082      	sub	sp, #8
 8003918:	af00      	add	r7, sp, #0
 800391a:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	68d8      	ldr	r0, [r3, #12]
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003926:	1c99      	adds	r1, r3, #2
 8003928:	687a      	ldr	r2, [r7, #4]
 800392a:	62d1      	str	r1, [r2, #44]	; 0x2c
 800392c:	b282      	uxth	r2, r0
 800392e:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003934:	b29b      	uxth	r3, r3
 8003936:	3b01      	subs	r3, #1
 8003938:	b29a      	uxth	r2, r3
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003942:	b29b      	uxth	r3, r3
 8003944:	2b00      	cmp	r3, #0
 8003946:	d113      	bne.n	8003970 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	685a      	ldr	r2, [r3, #4]
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003956:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800395c:	b29b      	uxth	r3, r3
 800395e:	2b00      	cmp	r3, #0
 8003960:	d106      	bne.n	8003970 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	2201      	movs	r2, #1
 8003966:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800396a:	6878      	ldr	r0, [r7, #4]
 800396c:	f7ff ff4a 	bl	8003804 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003970:	bf00      	nop
 8003972:	3708      	adds	r7, #8
 8003974:	46bd      	mov	sp, r7
 8003976:	bd80      	pop	{r7, pc}

08003978 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8003978:	b580      	push	{r7, lr}
 800397a:	b082      	sub	sp, #8
 800397c:	af00      	add	r7, sp, #0
 800397e:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	4a20      	ldr	r2, [pc, #128]	; (8003a08 <I2SEx_RxISR_I2SExt+0x90>)
 8003986:	4293      	cmp	r3, r2
 8003988:	d101      	bne.n	800398e <I2SEx_RxISR_I2SExt+0x16>
 800398a:	4b20      	ldr	r3, [pc, #128]	; (8003a0c <I2SEx_RxISR_I2SExt+0x94>)
 800398c:	e001      	b.n	8003992 <I2SEx_RxISR_I2SExt+0x1a>
 800398e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003992:	68d8      	ldr	r0, [r3, #12]
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003998:	1c99      	adds	r1, r3, #2
 800399a:	687a      	ldr	r2, [r7, #4]
 800399c:	62d1      	str	r1, [r2, #44]	; 0x2c
 800399e:	b282      	uxth	r2, r0
 80039a0:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80039a6:	b29b      	uxth	r3, r3
 80039a8:	3b01      	subs	r3, #1
 80039aa:	b29a      	uxth	r2, r3
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80039b4:	b29b      	uxth	r3, r3
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d121      	bne.n	80039fe <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	4a12      	ldr	r2, [pc, #72]	; (8003a08 <I2SEx_RxISR_I2SExt+0x90>)
 80039c0:	4293      	cmp	r3, r2
 80039c2:	d101      	bne.n	80039c8 <I2SEx_RxISR_I2SExt+0x50>
 80039c4:	4b11      	ldr	r3, [pc, #68]	; (8003a0c <I2SEx_RxISR_I2SExt+0x94>)
 80039c6:	e001      	b.n	80039cc <I2SEx_RxISR_I2SExt+0x54>
 80039c8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80039cc:	685a      	ldr	r2, [r3, #4]
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	490d      	ldr	r1, [pc, #52]	; (8003a08 <I2SEx_RxISR_I2SExt+0x90>)
 80039d4:	428b      	cmp	r3, r1
 80039d6:	d101      	bne.n	80039dc <I2SEx_RxISR_I2SExt+0x64>
 80039d8:	4b0c      	ldr	r3, [pc, #48]	; (8003a0c <I2SEx_RxISR_I2SExt+0x94>)
 80039da:	e001      	b.n	80039e0 <I2SEx_RxISR_I2SExt+0x68>
 80039dc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80039e0:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80039e4:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039ea:	b29b      	uxth	r3, r3
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d106      	bne.n	80039fe <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	2201      	movs	r2, #1
 80039f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80039f8:	6878      	ldr	r0, [r7, #4]
 80039fa:	f7ff ff03 	bl	8003804 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80039fe:	bf00      	nop
 8003a00:	3708      	adds	r7, #8
 8003a02:	46bd      	mov	sp, r7
 8003a04:	bd80      	pop	{r7, pc}
 8003a06:	bf00      	nop
 8003a08:	40003800 	.word	0x40003800
 8003a0c:	40003400 	.word	0x40003400

08003a10 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003a10:	b580      	push	{r7, lr}
 8003a12:	b086      	sub	sp, #24
 8003a14:	af00      	add	r7, sp, #0
 8003a16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d101      	bne.n	8003a22 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003a1e:	2301      	movs	r3, #1
 8003a20:	e267      	b.n	8003ef2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	f003 0301 	and.w	r3, r3, #1
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d075      	beq.n	8003b1a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003a2e:	4b88      	ldr	r3, [pc, #544]	; (8003c50 <HAL_RCC_OscConfig+0x240>)
 8003a30:	689b      	ldr	r3, [r3, #8]
 8003a32:	f003 030c 	and.w	r3, r3, #12
 8003a36:	2b04      	cmp	r3, #4
 8003a38:	d00c      	beq.n	8003a54 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003a3a:	4b85      	ldr	r3, [pc, #532]	; (8003c50 <HAL_RCC_OscConfig+0x240>)
 8003a3c:	689b      	ldr	r3, [r3, #8]
 8003a3e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003a42:	2b08      	cmp	r3, #8
 8003a44:	d112      	bne.n	8003a6c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003a46:	4b82      	ldr	r3, [pc, #520]	; (8003c50 <HAL_RCC_OscConfig+0x240>)
 8003a48:	685b      	ldr	r3, [r3, #4]
 8003a4a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003a4e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003a52:	d10b      	bne.n	8003a6c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a54:	4b7e      	ldr	r3, [pc, #504]	; (8003c50 <HAL_RCC_OscConfig+0x240>)
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d05b      	beq.n	8003b18 <HAL_RCC_OscConfig+0x108>
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	685b      	ldr	r3, [r3, #4]
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d157      	bne.n	8003b18 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003a68:	2301      	movs	r3, #1
 8003a6a:	e242      	b.n	8003ef2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	685b      	ldr	r3, [r3, #4]
 8003a70:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a74:	d106      	bne.n	8003a84 <HAL_RCC_OscConfig+0x74>
 8003a76:	4b76      	ldr	r3, [pc, #472]	; (8003c50 <HAL_RCC_OscConfig+0x240>)
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	4a75      	ldr	r2, [pc, #468]	; (8003c50 <HAL_RCC_OscConfig+0x240>)
 8003a7c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a80:	6013      	str	r3, [r2, #0]
 8003a82:	e01d      	b.n	8003ac0 <HAL_RCC_OscConfig+0xb0>
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	685b      	ldr	r3, [r3, #4]
 8003a88:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003a8c:	d10c      	bne.n	8003aa8 <HAL_RCC_OscConfig+0x98>
 8003a8e:	4b70      	ldr	r3, [pc, #448]	; (8003c50 <HAL_RCC_OscConfig+0x240>)
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	4a6f      	ldr	r2, [pc, #444]	; (8003c50 <HAL_RCC_OscConfig+0x240>)
 8003a94:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003a98:	6013      	str	r3, [r2, #0]
 8003a9a:	4b6d      	ldr	r3, [pc, #436]	; (8003c50 <HAL_RCC_OscConfig+0x240>)
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	4a6c      	ldr	r2, [pc, #432]	; (8003c50 <HAL_RCC_OscConfig+0x240>)
 8003aa0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003aa4:	6013      	str	r3, [r2, #0]
 8003aa6:	e00b      	b.n	8003ac0 <HAL_RCC_OscConfig+0xb0>
 8003aa8:	4b69      	ldr	r3, [pc, #420]	; (8003c50 <HAL_RCC_OscConfig+0x240>)
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	4a68      	ldr	r2, [pc, #416]	; (8003c50 <HAL_RCC_OscConfig+0x240>)
 8003aae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003ab2:	6013      	str	r3, [r2, #0]
 8003ab4:	4b66      	ldr	r3, [pc, #408]	; (8003c50 <HAL_RCC_OscConfig+0x240>)
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	4a65      	ldr	r2, [pc, #404]	; (8003c50 <HAL_RCC_OscConfig+0x240>)
 8003aba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003abe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	685b      	ldr	r3, [r3, #4]
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d013      	beq.n	8003af0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ac8:	f7fd fabc 	bl	8001044 <HAL_GetTick>
 8003acc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003ace:	e008      	b.n	8003ae2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003ad0:	f7fd fab8 	bl	8001044 <HAL_GetTick>
 8003ad4:	4602      	mov	r2, r0
 8003ad6:	693b      	ldr	r3, [r7, #16]
 8003ad8:	1ad3      	subs	r3, r2, r3
 8003ada:	2b64      	cmp	r3, #100	; 0x64
 8003adc:	d901      	bls.n	8003ae2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003ade:	2303      	movs	r3, #3
 8003ae0:	e207      	b.n	8003ef2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003ae2:	4b5b      	ldr	r3, [pc, #364]	; (8003c50 <HAL_RCC_OscConfig+0x240>)
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d0f0      	beq.n	8003ad0 <HAL_RCC_OscConfig+0xc0>
 8003aee:	e014      	b.n	8003b1a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003af0:	f7fd faa8 	bl	8001044 <HAL_GetTick>
 8003af4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003af6:	e008      	b.n	8003b0a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003af8:	f7fd faa4 	bl	8001044 <HAL_GetTick>
 8003afc:	4602      	mov	r2, r0
 8003afe:	693b      	ldr	r3, [r7, #16]
 8003b00:	1ad3      	subs	r3, r2, r3
 8003b02:	2b64      	cmp	r3, #100	; 0x64
 8003b04:	d901      	bls.n	8003b0a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003b06:	2303      	movs	r3, #3
 8003b08:	e1f3      	b.n	8003ef2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003b0a:	4b51      	ldr	r3, [pc, #324]	; (8003c50 <HAL_RCC_OscConfig+0x240>)
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d1f0      	bne.n	8003af8 <HAL_RCC_OscConfig+0xe8>
 8003b16:	e000      	b.n	8003b1a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b18:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	f003 0302 	and.w	r3, r3, #2
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d063      	beq.n	8003bee <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003b26:	4b4a      	ldr	r3, [pc, #296]	; (8003c50 <HAL_RCC_OscConfig+0x240>)
 8003b28:	689b      	ldr	r3, [r3, #8]
 8003b2a:	f003 030c 	and.w	r3, r3, #12
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d00b      	beq.n	8003b4a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003b32:	4b47      	ldr	r3, [pc, #284]	; (8003c50 <HAL_RCC_OscConfig+0x240>)
 8003b34:	689b      	ldr	r3, [r3, #8]
 8003b36:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003b3a:	2b08      	cmp	r3, #8
 8003b3c:	d11c      	bne.n	8003b78 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003b3e:	4b44      	ldr	r3, [pc, #272]	; (8003c50 <HAL_RCC_OscConfig+0x240>)
 8003b40:	685b      	ldr	r3, [r3, #4]
 8003b42:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d116      	bne.n	8003b78 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003b4a:	4b41      	ldr	r3, [pc, #260]	; (8003c50 <HAL_RCC_OscConfig+0x240>)
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	f003 0302 	and.w	r3, r3, #2
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d005      	beq.n	8003b62 <HAL_RCC_OscConfig+0x152>
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	68db      	ldr	r3, [r3, #12]
 8003b5a:	2b01      	cmp	r3, #1
 8003b5c:	d001      	beq.n	8003b62 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003b5e:	2301      	movs	r3, #1
 8003b60:	e1c7      	b.n	8003ef2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b62:	4b3b      	ldr	r3, [pc, #236]	; (8003c50 <HAL_RCC_OscConfig+0x240>)
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	691b      	ldr	r3, [r3, #16]
 8003b6e:	00db      	lsls	r3, r3, #3
 8003b70:	4937      	ldr	r1, [pc, #220]	; (8003c50 <HAL_RCC_OscConfig+0x240>)
 8003b72:	4313      	orrs	r3, r2
 8003b74:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003b76:	e03a      	b.n	8003bee <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	68db      	ldr	r3, [r3, #12]
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d020      	beq.n	8003bc2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003b80:	4b34      	ldr	r3, [pc, #208]	; (8003c54 <HAL_RCC_OscConfig+0x244>)
 8003b82:	2201      	movs	r2, #1
 8003b84:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b86:	f7fd fa5d 	bl	8001044 <HAL_GetTick>
 8003b8a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b8c:	e008      	b.n	8003ba0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003b8e:	f7fd fa59 	bl	8001044 <HAL_GetTick>
 8003b92:	4602      	mov	r2, r0
 8003b94:	693b      	ldr	r3, [r7, #16]
 8003b96:	1ad3      	subs	r3, r2, r3
 8003b98:	2b02      	cmp	r3, #2
 8003b9a:	d901      	bls.n	8003ba0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003b9c:	2303      	movs	r3, #3
 8003b9e:	e1a8      	b.n	8003ef2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ba0:	4b2b      	ldr	r3, [pc, #172]	; (8003c50 <HAL_RCC_OscConfig+0x240>)
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	f003 0302 	and.w	r3, r3, #2
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d0f0      	beq.n	8003b8e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003bac:	4b28      	ldr	r3, [pc, #160]	; (8003c50 <HAL_RCC_OscConfig+0x240>)
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	691b      	ldr	r3, [r3, #16]
 8003bb8:	00db      	lsls	r3, r3, #3
 8003bba:	4925      	ldr	r1, [pc, #148]	; (8003c50 <HAL_RCC_OscConfig+0x240>)
 8003bbc:	4313      	orrs	r3, r2
 8003bbe:	600b      	str	r3, [r1, #0]
 8003bc0:	e015      	b.n	8003bee <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003bc2:	4b24      	ldr	r3, [pc, #144]	; (8003c54 <HAL_RCC_OscConfig+0x244>)
 8003bc4:	2200      	movs	r2, #0
 8003bc6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bc8:	f7fd fa3c 	bl	8001044 <HAL_GetTick>
 8003bcc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003bce:	e008      	b.n	8003be2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003bd0:	f7fd fa38 	bl	8001044 <HAL_GetTick>
 8003bd4:	4602      	mov	r2, r0
 8003bd6:	693b      	ldr	r3, [r7, #16]
 8003bd8:	1ad3      	subs	r3, r2, r3
 8003bda:	2b02      	cmp	r3, #2
 8003bdc:	d901      	bls.n	8003be2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003bde:	2303      	movs	r3, #3
 8003be0:	e187      	b.n	8003ef2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003be2:	4b1b      	ldr	r3, [pc, #108]	; (8003c50 <HAL_RCC_OscConfig+0x240>)
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	f003 0302 	and.w	r3, r3, #2
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d1f0      	bne.n	8003bd0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	f003 0308 	and.w	r3, r3, #8
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d036      	beq.n	8003c68 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	695b      	ldr	r3, [r3, #20]
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d016      	beq.n	8003c30 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003c02:	4b15      	ldr	r3, [pc, #84]	; (8003c58 <HAL_RCC_OscConfig+0x248>)
 8003c04:	2201      	movs	r2, #1
 8003c06:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c08:	f7fd fa1c 	bl	8001044 <HAL_GetTick>
 8003c0c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003c0e:	e008      	b.n	8003c22 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003c10:	f7fd fa18 	bl	8001044 <HAL_GetTick>
 8003c14:	4602      	mov	r2, r0
 8003c16:	693b      	ldr	r3, [r7, #16]
 8003c18:	1ad3      	subs	r3, r2, r3
 8003c1a:	2b02      	cmp	r3, #2
 8003c1c:	d901      	bls.n	8003c22 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003c1e:	2303      	movs	r3, #3
 8003c20:	e167      	b.n	8003ef2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003c22:	4b0b      	ldr	r3, [pc, #44]	; (8003c50 <HAL_RCC_OscConfig+0x240>)
 8003c24:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c26:	f003 0302 	and.w	r3, r3, #2
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d0f0      	beq.n	8003c10 <HAL_RCC_OscConfig+0x200>
 8003c2e:	e01b      	b.n	8003c68 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003c30:	4b09      	ldr	r3, [pc, #36]	; (8003c58 <HAL_RCC_OscConfig+0x248>)
 8003c32:	2200      	movs	r2, #0
 8003c34:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003c36:	f7fd fa05 	bl	8001044 <HAL_GetTick>
 8003c3a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003c3c:	e00e      	b.n	8003c5c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003c3e:	f7fd fa01 	bl	8001044 <HAL_GetTick>
 8003c42:	4602      	mov	r2, r0
 8003c44:	693b      	ldr	r3, [r7, #16]
 8003c46:	1ad3      	subs	r3, r2, r3
 8003c48:	2b02      	cmp	r3, #2
 8003c4a:	d907      	bls.n	8003c5c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003c4c:	2303      	movs	r3, #3
 8003c4e:	e150      	b.n	8003ef2 <HAL_RCC_OscConfig+0x4e2>
 8003c50:	40023800 	.word	0x40023800
 8003c54:	42470000 	.word	0x42470000
 8003c58:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003c5c:	4b88      	ldr	r3, [pc, #544]	; (8003e80 <HAL_RCC_OscConfig+0x470>)
 8003c5e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c60:	f003 0302 	and.w	r3, r3, #2
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d1ea      	bne.n	8003c3e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	f003 0304 	and.w	r3, r3, #4
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	f000 8097 	beq.w	8003da4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003c76:	2300      	movs	r3, #0
 8003c78:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003c7a:	4b81      	ldr	r3, [pc, #516]	; (8003e80 <HAL_RCC_OscConfig+0x470>)
 8003c7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d10f      	bne.n	8003ca6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003c86:	2300      	movs	r3, #0
 8003c88:	60bb      	str	r3, [r7, #8]
 8003c8a:	4b7d      	ldr	r3, [pc, #500]	; (8003e80 <HAL_RCC_OscConfig+0x470>)
 8003c8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c8e:	4a7c      	ldr	r2, [pc, #496]	; (8003e80 <HAL_RCC_OscConfig+0x470>)
 8003c90:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c94:	6413      	str	r3, [r2, #64]	; 0x40
 8003c96:	4b7a      	ldr	r3, [pc, #488]	; (8003e80 <HAL_RCC_OscConfig+0x470>)
 8003c98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c9e:	60bb      	str	r3, [r7, #8]
 8003ca0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003ca2:	2301      	movs	r3, #1
 8003ca4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ca6:	4b77      	ldr	r3, [pc, #476]	; (8003e84 <HAL_RCC_OscConfig+0x474>)
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d118      	bne.n	8003ce4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003cb2:	4b74      	ldr	r3, [pc, #464]	; (8003e84 <HAL_RCC_OscConfig+0x474>)
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	4a73      	ldr	r2, [pc, #460]	; (8003e84 <HAL_RCC_OscConfig+0x474>)
 8003cb8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003cbc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003cbe:	f7fd f9c1 	bl	8001044 <HAL_GetTick>
 8003cc2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003cc4:	e008      	b.n	8003cd8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003cc6:	f7fd f9bd 	bl	8001044 <HAL_GetTick>
 8003cca:	4602      	mov	r2, r0
 8003ccc:	693b      	ldr	r3, [r7, #16]
 8003cce:	1ad3      	subs	r3, r2, r3
 8003cd0:	2b02      	cmp	r3, #2
 8003cd2:	d901      	bls.n	8003cd8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003cd4:	2303      	movs	r3, #3
 8003cd6:	e10c      	b.n	8003ef2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003cd8:	4b6a      	ldr	r3, [pc, #424]	; (8003e84 <HAL_RCC_OscConfig+0x474>)
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d0f0      	beq.n	8003cc6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	689b      	ldr	r3, [r3, #8]
 8003ce8:	2b01      	cmp	r3, #1
 8003cea:	d106      	bne.n	8003cfa <HAL_RCC_OscConfig+0x2ea>
 8003cec:	4b64      	ldr	r3, [pc, #400]	; (8003e80 <HAL_RCC_OscConfig+0x470>)
 8003cee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cf0:	4a63      	ldr	r2, [pc, #396]	; (8003e80 <HAL_RCC_OscConfig+0x470>)
 8003cf2:	f043 0301 	orr.w	r3, r3, #1
 8003cf6:	6713      	str	r3, [r2, #112]	; 0x70
 8003cf8:	e01c      	b.n	8003d34 <HAL_RCC_OscConfig+0x324>
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	689b      	ldr	r3, [r3, #8]
 8003cfe:	2b05      	cmp	r3, #5
 8003d00:	d10c      	bne.n	8003d1c <HAL_RCC_OscConfig+0x30c>
 8003d02:	4b5f      	ldr	r3, [pc, #380]	; (8003e80 <HAL_RCC_OscConfig+0x470>)
 8003d04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d06:	4a5e      	ldr	r2, [pc, #376]	; (8003e80 <HAL_RCC_OscConfig+0x470>)
 8003d08:	f043 0304 	orr.w	r3, r3, #4
 8003d0c:	6713      	str	r3, [r2, #112]	; 0x70
 8003d0e:	4b5c      	ldr	r3, [pc, #368]	; (8003e80 <HAL_RCC_OscConfig+0x470>)
 8003d10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d12:	4a5b      	ldr	r2, [pc, #364]	; (8003e80 <HAL_RCC_OscConfig+0x470>)
 8003d14:	f043 0301 	orr.w	r3, r3, #1
 8003d18:	6713      	str	r3, [r2, #112]	; 0x70
 8003d1a:	e00b      	b.n	8003d34 <HAL_RCC_OscConfig+0x324>
 8003d1c:	4b58      	ldr	r3, [pc, #352]	; (8003e80 <HAL_RCC_OscConfig+0x470>)
 8003d1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d20:	4a57      	ldr	r2, [pc, #348]	; (8003e80 <HAL_RCC_OscConfig+0x470>)
 8003d22:	f023 0301 	bic.w	r3, r3, #1
 8003d26:	6713      	str	r3, [r2, #112]	; 0x70
 8003d28:	4b55      	ldr	r3, [pc, #340]	; (8003e80 <HAL_RCC_OscConfig+0x470>)
 8003d2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d2c:	4a54      	ldr	r2, [pc, #336]	; (8003e80 <HAL_RCC_OscConfig+0x470>)
 8003d2e:	f023 0304 	bic.w	r3, r3, #4
 8003d32:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	689b      	ldr	r3, [r3, #8]
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d015      	beq.n	8003d68 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d3c:	f7fd f982 	bl	8001044 <HAL_GetTick>
 8003d40:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d42:	e00a      	b.n	8003d5a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003d44:	f7fd f97e 	bl	8001044 <HAL_GetTick>
 8003d48:	4602      	mov	r2, r0
 8003d4a:	693b      	ldr	r3, [r7, #16]
 8003d4c:	1ad3      	subs	r3, r2, r3
 8003d4e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d52:	4293      	cmp	r3, r2
 8003d54:	d901      	bls.n	8003d5a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003d56:	2303      	movs	r3, #3
 8003d58:	e0cb      	b.n	8003ef2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d5a:	4b49      	ldr	r3, [pc, #292]	; (8003e80 <HAL_RCC_OscConfig+0x470>)
 8003d5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d5e:	f003 0302 	and.w	r3, r3, #2
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d0ee      	beq.n	8003d44 <HAL_RCC_OscConfig+0x334>
 8003d66:	e014      	b.n	8003d92 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003d68:	f7fd f96c 	bl	8001044 <HAL_GetTick>
 8003d6c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003d6e:	e00a      	b.n	8003d86 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003d70:	f7fd f968 	bl	8001044 <HAL_GetTick>
 8003d74:	4602      	mov	r2, r0
 8003d76:	693b      	ldr	r3, [r7, #16]
 8003d78:	1ad3      	subs	r3, r2, r3
 8003d7a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d7e:	4293      	cmp	r3, r2
 8003d80:	d901      	bls.n	8003d86 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003d82:	2303      	movs	r3, #3
 8003d84:	e0b5      	b.n	8003ef2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003d86:	4b3e      	ldr	r3, [pc, #248]	; (8003e80 <HAL_RCC_OscConfig+0x470>)
 8003d88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d8a:	f003 0302 	and.w	r3, r3, #2
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d1ee      	bne.n	8003d70 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003d92:	7dfb      	ldrb	r3, [r7, #23]
 8003d94:	2b01      	cmp	r3, #1
 8003d96:	d105      	bne.n	8003da4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003d98:	4b39      	ldr	r3, [pc, #228]	; (8003e80 <HAL_RCC_OscConfig+0x470>)
 8003d9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d9c:	4a38      	ldr	r2, [pc, #224]	; (8003e80 <HAL_RCC_OscConfig+0x470>)
 8003d9e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003da2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	699b      	ldr	r3, [r3, #24]
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	f000 80a1 	beq.w	8003ef0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003dae:	4b34      	ldr	r3, [pc, #208]	; (8003e80 <HAL_RCC_OscConfig+0x470>)
 8003db0:	689b      	ldr	r3, [r3, #8]
 8003db2:	f003 030c 	and.w	r3, r3, #12
 8003db6:	2b08      	cmp	r3, #8
 8003db8:	d05c      	beq.n	8003e74 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	699b      	ldr	r3, [r3, #24]
 8003dbe:	2b02      	cmp	r3, #2
 8003dc0:	d141      	bne.n	8003e46 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003dc2:	4b31      	ldr	r3, [pc, #196]	; (8003e88 <HAL_RCC_OscConfig+0x478>)
 8003dc4:	2200      	movs	r2, #0
 8003dc6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003dc8:	f7fd f93c 	bl	8001044 <HAL_GetTick>
 8003dcc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003dce:	e008      	b.n	8003de2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003dd0:	f7fd f938 	bl	8001044 <HAL_GetTick>
 8003dd4:	4602      	mov	r2, r0
 8003dd6:	693b      	ldr	r3, [r7, #16]
 8003dd8:	1ad3      	subs	r3, r2, r3
 8003dda:	2b02      	cmp	r3, #2
 8003ddc:	d901      	bls.n	8003de2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003dde:	2303      	movs	r3, #3
 8003de0:	e087      	b.n	8003ef2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003de2:	4b27      	ldr	r3, [pc, #156]	; (8003e80 <HAL_RCC_OscConfig+0x470>)
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d1f0      	bne.n	8003dd0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	69da      	ldr	r2, [r3, #28]
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	6a1b      	ldr	r3, [r3, #32]
 8003df6:	431a      	orrs	r2, r3
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dfc:	019b      	lsls	r3, r3, #6
 8003dfe:	431a      	orrs	r2, r3
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e04:	085b      	lsrs	r3, r3, #1
 8003e06:	3b01      	subs	r3, #1
 8003e08:	041b      	lsls	r3, r3, #16
 8003e0a:	431a      	orrs	r2, r3
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e10:	061b      	lsls	r3, r3, #24
 8003e12:	491b      	ldr	r1, [pc, #108]	; (8003e80 <HAL_RCC_OscConfig+0x470>)
 8003e14:	4313      	orrs	r3, r2
 8003e16:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003e18:	4b1b      	ldr	r3, [pc, #108]	; (8003e88 <HAL_RCC_OscConfig+0x478>)
 8003e1a:	2201      	movs	r2, #1
 8003e1c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e1e:	f7fd f911 	bl	8001044 <HAL_GetTick>
 8003e22:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003e24:	e008      	b.n	8003e38 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003e26:	f7fd f90d 	bl	8001044 <HAL_GetTick>
 8003e2a:	4602      	mov	r2, r0
 8003e2c:	693b      	ldr	r3, [r7, #16]
 8003e2e:	1ad3      	subs	r3, r2, r3
 8003e30:	2b02      	cmp	r3, #2
 8003e32:	d901      	bls.n	8003e38 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003e34:	2303      	movs	r3, #3
 8003e36:	e05c      	b.n	8003ef2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003e38:	4b11      	ldr	r3, [pc, #68]	; (8003e80 <HAL_RCC_OscConfig+0x470>)
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d0f0      	beq.n	8003e26 <HAL_RCC_OscConfig+0x416>
 8003e44:	e054      	b.n	8003ef0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e46:	4b10      	ldr	r3, [pc, #64]	; (8003e88 <HAL_RCC_OscConfig+0x478>)
 8003e48:	2200      	movs	r2, #0
 8003e4a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e4c:	f7fd f8fa 	bl	8001044 <HAL_GetTick>
 8003e50:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e52:	e008      	b.n	8003e66 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003e54:	f7fd f8f6 	bl	8001044 <HAL_GetTick>
 8003e58:	4602      	mov	r2, r0
 8003e5a:	693b      	ldr	r3, [r7, #16]
 8003e5c:	1ad3      	subs	r3, r2, r3
 8003e5e:	2b02      	cmp	r3, #2
 8003e60:	d901      	bls.n	8003e66 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003e62:	2303      	movs	r3, #3
 8003e64:	e045      	b.n	8003ef2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e66:	4b06      	ldr	r3, [pc, #24]	; (8003e80 <HAL_RCC_OscConfig+0x470>)
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d1f0      	bne.n	8003e54 <HAL_RCC_OscConfig+0x444>
 8003e72:	e03d      	b.n	8003ef0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	699b      	ldr	r3, [r3, #24]
 8003e78:	2b01      	cmp	r3, #1
 8003e7a:	d107      	bne.n	8003e8c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003e7c:	2301      	movs	r3, #1
 8003e7e:	e038      	b.n	8003ef2 <HAL_RCC_OscConfig+0x4e2>
 8003e80:	40023800 	.word	0x40023800
 8003e84:	40007000 	.word	0x40007000
 8003e88:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003e8c:	4b1b      	ldr	r3, [pc, #108]	; (8003efc <HAL_RCC_OscConfig+0x4ec>)
 8003e8e:	685b      	ldr	r3, [r3, #4]
 8003e90:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	699b      	ldr	r3, [r3, #24]
 8003e96:	2b01      	cmp	r3, #1
 8003e98:	d028      	beq.n	8003eec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003ea4:	429a      	cmp	r2, r3
 8003ea6:	d121      	bne.n	8003eec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003eb2:	429a      	cmp	r2, r3
 8003eb4:	d11a      	bne.n	8003eec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003eb6:	68fa      	ldr	r2, [r7, #12]
 8003eb8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003ebc:	4013      	ands	r3, r2
 8003ebe:	687a      	ldr	r2, [r7, #4]
 8003ec0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003ec2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003ec4:	4293      	cmp	r3, r2
 8003ec6:	d111      	bne.n	8003eec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ed2:	085b      	lsrs	r3, r3, #1
 8003ed4:	3b01      	subs	r3, #1
 8003ed6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003ed8:	429a      	cmp	r2, r3
 8003eda:	d107      	bne.n	8003eec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ee6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003ee8:	429a      	cmp	r2, r3
 8003eea:	d001      	beq.n	8003ef0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003eec:	2301      	movs	r3, #1
 8003eee:	e000      	b.n	8003ef2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003ef0:	2300      	movs	r3, #0
}
 8003ef2:	4618      	mov	r0, r3
 8003ef4:	3718      	adds	r7, #24
 8003ef6:	46bd      	mov	sp, r7
 8003ef8:	bd80      	pop	{r7, pc}
 8003efa:	bf00      	nop
 8003efc:	40023800 	.word	0x40023800

08003f00 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003f00:	b580      	push	{r7, lr}
 8003f02:	b084      	sub	sp, #16
 8003f04:	af00      	add	r7, sp, #0
 8003f06:	6078      	str	r0, [r7, #4]
 8003f08:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d101      	bne.n	8003f14 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003f10:	2301      	movs	r3, #1
 8003f12:	e0cc      	b.n	80040ae <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003f14:	4b68      	ldr	r3, [pc, #416]	; (80040b8 <HAL_RCC_ClockConfig+0x1b8>)
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	f003 0307 	and.w	r3, r3, #7
 8003f1c:	683a      	ldr	r2, [r7, #0]
 8003f1e:	429a      	cmp	r2, r3
 8003f20:	d90c      	bls.n	8003f3c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f22:	4b65      	ldr	r3, [pc, #404]	; (80040b8 <HAL_RCC_ClockConfig+0x1b8>)
 8003f24:	683a      	ldr	r2, [r7, #0]
 8003f26:	b2d2      	uxtb	r2, r2
 8003f28:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f2a:	4b63      	ldr	r3, [pc, #396]	; (80040b8 <HAL_RCC_ClockConfig+0x1b8>)
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	f003 0307 	and.w	r3, r3, #7
 8003f32:	683a      	ldr	r2, [r7, #0]
 8003f34:	429a      	cmp	r2, r3
 8003f36:	d001      	beq.n	8003f3c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003f38:	2301      	movs	r3, #1
 8003f3a:	e0b8      	b.n	80040ae <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	f003 0302 	and.w	r3, r3, #2
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d020      	beq.n	8003f8a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	f003 0304 	and.w	r3, r3, #4
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d005      	beq.n	8003f60 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003f54:	4b59      	ldr	r3, [pc, #356]	; (80040bc <HAL_RCC_ClockConfig+0x1bc>)
 8003f56:	689b      	ldr	r3, [r3, #8]
 8003f58:	4a58      	ldr	r2, [pc, #352]	; (80040bc <HAL_RCC_ClockConfig+0x1bc>)
 8003f5a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003f5e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	f003 0308 	and.w	r3, r3, #8
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d005      	beq.n	8003f78 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003f6c:	4b53      	ldr	r3, [pc, #332]	; (80040bc <HAL_RCC_ClockConfig+0x1bc>)
 8003f6e:	689b      	ldr	r3, [r3, #8]
 8003f70:	4a52      	ldr	r2, [pc, #328]	; (80040bc <HAL_RCC_ClockConfig+0x1bc>)
 8003f72:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003f76:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003f78:	4b50      	ldr	r3, [pc, #320]	; (80040bc <HAL_RCC_ClockConfig+0x1bc>)
 8003f7a:	689b      	ldr	r3, [r3, #8]
 8003f7c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	689b      	ldr	r3, [r3, #8]
 8003f84:	494d      	ldr	r1, [pc, #308]	; (80040bc <HAL_RCC_ClockConfig+0x1bc>)
 8003f86:	4313      	orrs	r3, r2
 8003f88:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	f003 0301 	and.w	r3, r3, #1
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d044      	beq.n	8004020 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	685b      	ldr	r3, [r3, #4]
 8003f9a:	2b01      	cmp	r3, #1
 8003f9c:	d107      	bne.n	8003fae <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f9e:	4b47      	ldr	r3, [pc, #284]	; (80040bc <HAL_RCC_ClockConfig+0x1bc>)
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d119      	bne.n	8003fde <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003faa:	2301      	movs	r3, #1
 8003fac:	e07f      	b.n	80040ae <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	685b      	ldr	r3, [r3, #4]
 8003fb2:	2b02      	cmp	r3, #2
 8003fb4:	d003      	beq.n	8003fbe <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003fba:	2b03      	cmp	r3, #3
 8003fbc:	d107      	bne.n	8003fce <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003fbe:	4b3f      	ldr	r3, [pc, #252]	; (80040bc <HAL_RCC_ClockConfig+0x1bc>)
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d109      	bne.n	8003fde <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003fca:	2301      	movs	r3, #1
 8003fcc:	e06f      	b.n	80040ae <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003fce:	4b3b      	ldr	r3, [pc, #236]	; (80040bc <HAL_RCC_ClockConfig+0x1bc>)
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	f003 0302 	and.w	r3, r3, #2
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d101      	bne.n	8003fde <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003fda:	2301      	movs	r3, #1
 8003fdc:	e067      	b.n	80040ae <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003fde:	4b37      	ldr	r3, [pc, #220]	; (80040bc <HAL_RCC_ClockConfig+0x1bc>)
 8003fe0:	689b      	ldr	r3, [r3, #8]
 8003fe2:	f023 0203 	bic.w	r2, r3, #3
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	685b      	ldr	r3, [r3, #4]
 8003fea:	4934      	ldr	r1, [pc, #208]	; (80040bc <HAL_RCC_ClockConfig+0x1bc>)
 8003fec:	4313      	orrs	r3, r2
 8003fee:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003ff0:	f7fd f828 	bl	8001044 <HAL_GetTick>
 8003ff4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ff6:	e00a      	b.n	800400e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003ff8:	f7fd f824 	bl	8001044 <HAL_GetTick>
 8003ffc:	4602      	mov	r2, r0
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	1ad3      	subs	r3, r2, r3
 8004002:	f241 3288 	movw	r2, #5000	; 0x1388
 8004006:	4293      	cmp	r3, r2
 8004008:	d901      	bls.n	800400e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800400a:	2303      	movs	r3, #3
 800400c:	e04f      	b.n	80040ae <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800400e:	4b2b      	ldr	r3, [pc, #172]	; (80040bc <HAL_RCC_ClockConfig+0x1bc>)
 8004010:	689b      	ldr	r3, [r3, #8]
 8004012:	f003 020c 	and.w	r2, r3, #12
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	685b      	ldr	r3, [r3, #4]
 800401a:	009b      	lsls	r3, r3, #2
 800401c:	429a      	cmp	r2, r3
 800401e:	d1eb      	bne.n	8003ff8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004020:	4b25      	ldr	r3, [pc, #148]	; (80040b8 <HAL_RCC_ClockConfig+0x1b8>)
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	f003 0307 	and.w	r3, r3, #7
 8004028:	683a      	ldr	r2, [r7, #0]
 800402a:	429a      	cmp	r2, r3
 800402c:	d20c      	bcs.n	8004048 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800402e:	4b22      	ldr	r3, [pc, #136]	; (80040b8 <HAL_RCC_ClockConfig+0x1b8>)
 8004030:	683a      	ldr	r2, [r7, #0]
 8004032:	b2d2      	uxtb	r2, r2
 8004034:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004036:	4b20      	ldr	r3, [pc, #128]	; (80040b8 <HAL_RCC_ClockConfig+0x1b8>)
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	f003 0307 	and.w	r3, r3, #7
 800403e:	683a      	ldr	r2, [r7, #0]
 8004040:	429a      	cmp	r2, r3
 8004042:	d001      	beq.n	8004048 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004044:	2301      	movs	r3, #1
 8004046:	e032      	b.n	80040ae <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	f003 0304 	and.w	r3, r3, #4
 8004050:	2b00      	cmp	r3, #0
 8004052:	d008      	beq.n	8004066 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004054:	4b19      	ldr	r3, [pc, #100]	; (80040bc <HAL_RCC_ClockConfig+0x1bc>)
 8004056:	689b      	ldr	r3, [r3, #8]
 8004058:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	68db      	ldr	r3, [r3, #12]
 8004060:	4916      	ldr	r1, [pc, #88]	; (80040bc <HAL_RCC_ClockConfig+0x1bc>)
 8004062:	4313      	orrs	r3, r2
 8004064:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	f003 0308 	and.w	r3, r3, #8
 800406e:	2b00      	cmp	r3, #0
 8004070:	d009      	beq.n	8004086 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004072:	4b12      	ldr	r3, [pc, #72]	; (80040bc <HAL_RCC_ClockConfig+0x1bc>)
 8004074:	689b      	ldr	r3, [r3, #8]
 8004076:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	691b      	ldr	r3, [r3, #16]
 800407e:	00db      	lsls	r3, r3, #3
 8004080:	490e      	ldr	r1, [pc, #56]	; (80040bc <HAL_RCC_ClockConfig+0x1bc>)
 8004082:	4313      	orrs	r3, r2
 8004084:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004086:	f000 f821 	bl	80040cc <HAL_RCC_GetSysClockFreq>
 800408a:	4602      	mov	r2, r0
 800408c:	4b0b      	ldr	r3, [pc, #44]	; (80040bc <HAL_RCC_ClockConfig+0x1bc>)
 800408e:	689b      	ldr	r3, [r3, #8]
 8004090:	091b      	lsrs	r3, r3, #4
 8004092:	f003 030f 	and.w	r3, r3, #15
 8004096:	490a      	ldr	r1, [pc, #40]	; (80040c0 <HAL_RCC_ClockConfig+0x1c0>)
 8004098:	5ccb      	ldrb	r3, [r1, r3]
 800409a:	fa22 f303 	lsr.w	r3, r2, r3
 800409e:	4a09      	ldr	r2, [pc, #36]	; (80040c4 <HAL_RCC_ClockConfig+0x1c4>)
 80040a0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80040a2:	4b09      	ldr	r3, [pc, #36]	; (80040c8 <HAL_RCC_ClockConfig+0x1c8>)
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	4618      	mov	r0, r3
 80040a8:	f7fc ff88 	bl	8000fbc <HAL_InitTick>

  return HAL_OK;
 80040ac:	2300      	movs	r3, #0
}
 80040ae:	4618      	mov	r0, r3
 80040b0:	3710      	adds	r7, #16
 80040b2:	46bd      	mov	sp, r7
 80040b4:	bd80      	pop	{r7, pc}
 80040b6:	bf00      	nop
 80040b8:	40023c00 	.word	0x40023c00
 80040bc:	40023800 	.word	0x40023800
 80040c0:	08007f04 	.word	0x08007f04
 80040c4:	20000000 	.word	0x20000000
 80040c8:	20000004 	.word	0x20000004

080040cc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80040cc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80040d0:	b094      	sub	sp, #80	; 0x50
 80040d2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80040d4:	2300      	movs	r3, #0
 80040d6:	647b      	str	r3, [r7, #68]	; 0x44
 80040d8:	2300      	movs	r3, #0
 80040da:	64fb      	str	r3, [r7, #76]	; 0x4c
 80040dc:	2300      	movs	r3, #0
 80040de:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80040e0:	2300      	movs	r3, #0
 80040e2:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80040e4:	4b79      	ldr	r3, [pc, #484]	; (80042cc <HAL_RCC_GetSysClockFreq+0x200>)
 80040e6:	689b      	ldr	r3, [r3, #8]
 80040e8:	f003 030c 	and.w	r3, r3, #12
 80040ec:	2b08      	cmp	r3, #8
 80040ee:	d00d      	beq.n	800410c <HAL_RCC_GetSysClockFreq+0x40>
 80040f0:	2b08      	cmp	r3, #8
 80040f2:	f200 80e1 	bhi.w	80042b8 <HAL_RCC_GetSysClockFreq+0x1ec>
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d002      	beq.n	8004100 <HAL_RCC_GetSysClockFreq+0x34>
 80040fa:	2b04      	cmp	r3, #4
 80040fc:	d003      	beq.n	8004106 <HAL_RCC_GetSysClockFreq+0x3a>
 80040fe:	e0db      	b.n	80042b8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004100:	4b73      	ldr	r3, [pc, #460]	; (80042d0 <HAL_RCC_GetSysClockFreq+0x204>)
 8004102:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8004104:	e0db      	b.n	80042be <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004106:	4b73      	ldr	r3, [pc, #460]	; (80042d4 <HAL_RCC_GetSysClockFreq+0x208>)
 8004108:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800410a:	e0d8      	b.n	80042be <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800410c:	4b6f      	ldr	r3, [pc, #444]	; (80042cc <HAL_RCC_GetSysClockFreq+0x200>)
 800410e:	685b      	ldr	r3, [r3, #4]
 8004110:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004114:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004116:	4b6d      	ldr	r3, [pc, #436]	; (80042cc <HAL_RCC_GetSysClockFreq+0x200>)
 8004118:	685b      	ldr	r3, [r3, #4]
 800411a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800411e:	2b00      	cmp	r3, #0
 8004120:	d063      	beq.n	80041ea <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004122:	4b6a      	ldr	r3, [pc, #424]	; (80042cc <HAL_RCC_GetSysClockFreq+0x200>)
 8004124:	685b      	ldr	r3, [r3, #4]
 8004126:	099b      	lsrs	r3, r3, #6
 8004128:	2200      	movs	r2, #0
 800412a:	63bb      	str	r3, [r7, #56]	; 0x38
 800412c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800412e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004130:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004134:	633b      	str	r3, [r7, #48]	; 0x30
 8004136:	2300      	movs	r3, #0
 8004138:	637b      	str	r3, [r7, #52]	; 0x34
 800413a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800413e:	4622      	mov	r2, r4
 8004140:	462b      	mov	r3, r5
 8004142:	f04f 0000 	mov.w	r0, #0
 8004146:	f04f 0100 	mov.w	r1, #0
 800414a:	0159      	lsls	r1, r3, #5
 800414c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004150:	0150      	lsls	r0, r2, #5
 8004152:	4602      	mov	r2, r0
 8004154:	460b      	mov	r3, r1
 8004156:	4621      	mov	r1, r4
 8004158:	1a51      	subs	r1, r2, r1
 800415a:	6139      	str	r1, [r7, #16]
 800415c:	4629      	mov	r1, r5
 800415e:	eb63 0301 	sbc.w	r3, r3, r1
 8004162:	617b      	str	r3, [r7, #20]
 8004164:	f04f 0200 	mov.w	r2, #0
 8004168:	f04f 0300 	mov.w	r3, #0
 800416c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004170:	4659      	mov	r1, fp
 8004172:	018b      	lsls	r3, r1, #6
 8004174:	4651      	mov	r1, sl
 8004176:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800417a:	4651      	mov	r1, sl
 800417c:	018a      	lsls	r2, r1, #6
 800417e:	4651      	mov	r1, sl
 8004180:	ebb2 0801 	subs.w	r8, r2, r1
 8004184:	4659      	mov	r1, fp
 8004186:	eb63 0901 	sbc.w	r9, r3, r1
 800418a:	f04f 0200 	mov.w	r2, #0
 800418e:	f04f 0300 	mov.w	r3, #0
 8004192:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004196:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800419a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800419e:	4690      	mov	r8, r2
 80041a0:	4699      	mov	r9, r3
 80041a2:	4623      	mov	r3, r4
 80041a4:	eb18 0303 	adds.w	r3, r8, r3
 80041a8:	60bb      	str	r3, [r7, #8]
 80041aa:	462b      	mov	r3, r5
 80041ac:	eb49 0303 	adc.w	r3, r9, r3
 80041b0:	60fb      	str	r3, [r7, #12]
 80041b2:	f04f 0200 	mov.w	r2, #0
 80041b6:	f04f 0300 	mov.w	r3, #0
 80041ba:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80041be:	4629      	mov	r1, r5
 80041c0:	024b      	lsls	r3, r1, #9
 80041c2:	4621      	mov	r1, r4
 80041c4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80041c8:	4621      	mov	r1, r4
 80041ca:	024a      	lsls	r2, r1, #9
 80041cc:	4610      	mov	r0, r2
 80041ce:	4619      	mov	r1, r3
 80041d0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80041d2:	2200      	movs	r2, #0
 80041d4:	62bb      	str	r3, [r7, #40]	; 0x28
 80041d6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80041d8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80041dc:	f7fb fffc 	bl	80001d8 <__aeabi_uldivmod>
 80041e0:	4602      	mov	r2, r0
 80041e2:	460b      	mov	r3, r1
 80041e4:	4613      	mov	r3, r2
 80041e6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80041e8:	e058      	b.n	800429c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80041ea:	4b38      	ldr	r3, [pc, #224]	; (80042cc <HAL_RCC_GetSysClockFreq+0x200>)
 80041ec:	685b      	ldr	r3, [r3, #4]
 80041ee:	099b      	lsrs	r3, r3, #6
 80041f0:	2200      	movs	r2, #0
 80041f2:	4618      	mov	r0, r3
 80041f4:	4611      	mov	r1, r2
 80041f6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80041fa:	623b      	str	r3, [r7, #32]
 80041fc:	2300      	movs	r3, #0
 80041fe:	627b      	str	r3, [r7, #36]	; 0x24
 8004200:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004204:	4642      	mov	r2, r8
 8004206:	464b      	mov	r3, r9
 8004208:	f04f 0000 	mov.w	r0, #0
 800420c:	f04f 0100 	mov.w	r1, #0
 8004210:	0159      	lsls	r1, r3, #5
 8004212:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004216:	0150      	lsls	r0, r2, #5
 8004218:	4602      	mov	r2, r0
 800421a:	460b      	mov	r3, r1
 800421c:	4641      	mov	r1, r8
 800421e:	ebb2 0a01 	subs.w	sl, r2, r1
 8004222:	4649      	mov	r1, r9
 8004224:	eb63 0b01 	sbc.w	fp, r3, r1
 8004228:	f04f 0200 	mov.w	r2, #0
 800422c:	f04f 0300 	mov.w	r3, #0
 8004230:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004234:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004238:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800423c:	ebb2 040a 	subs.w	r4, r2, sl
 8004240:	eb63 050b 	sbc.w	r5, r3, fp
 8004244:	f04f 0200 	mov.w	r2, #0
 8004248:	f04f 0300 	mov.w	r3, #0
 800424c:	00eb      	lsls	r3, r5, #3
 800424e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004252:	00e2      	lsls	r2, r4, #3
 8004254:	4614      	mov	r4, r2
 8004256:	461d      	mov	r5, r3
 8004258:	4643      	mov	r3, r8
 800425a:	18e3      	adds	r3, r4, r3
 800425c:	603b      	str	r3, [r7, #0]
 800425e:	464b      	mov	r3, r9
 8004260:	eb45 0303 	adc.w	r3, r5, r3
 8004264:	607b      	str	r3, [r7, #4]
 8004266:	f04f 0200 	mov.w	r2, #0
 800426a:	f04f 0300 	mov.w	r3, #0
 800426e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004272:	4629      	mov	r1, r5
 8004274:	028b      	lsls	r3, r1, #10
 8004276:	4621      	mov	r1, r4
 8004278:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800427c:	4621      	mov	r1, r4
 800427e:	028a      	lsls	r2, r1, #10
 8004280:	4610      	mov	r0, r2
 8004282:	4619      	mov	r1, r3
 8004284:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004286:	2200      	movs	r2, #0
 8004288:	61bb      	str	r3, [r7, #24]
 800428a:	61fa      	str	r2, [r7, #28]
 800428c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004290:	f7fb ffa2 	bl	80001d8 <__aeabi_uldivmod>
 8004294:	4602      	mov	r2, r0
 8004296:	460b      	mov	r3, r1
 8004298:	4613      	mov	r3, r2
 800429a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800429c:	4b0b      	ldr	r3, [pc, #44]	; (80042cc <HAL_RCC_GetSysClockFreq+0x200>)
 800429e:	685b      	ldr	r3, [r3, #4]
 80042a0:	0c1b      	lsrs	r3, r3, #16
 80042a2:	f003 0303 	and.w	r3, r3, #3
 80042a6:	3301      	adds	r3, #1
 80042a8:	005b      	lsls	r3, r3, #1
 80042aa:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80042ac:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80042ae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80042b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80042b4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80042b6:	e002      	b.n	80042be <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80042b8:	4b05      	ldr	r3, [pc, #20]	; (80042d0 <HAL_RCC_GetSysClockFreq+0x204>)
 80042ba:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80042bc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80042be:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80042c0:	4618      	mov	r0, r3
 80042c2:	3750      	adds	r7, #80	; 0x50
 80042c4:	46bd      	mov	sp, r7
 80042c6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80042ca:	bf00      	nop
 80042cc:	40023800 	.word	0x40023800
 80042d0:	00f42400 	.word	0x00f42400
 80042d4:	007a1200 	.word	0x007a1200

080042d8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80042d8:	b480      	push	{r7}
 80042da:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80042dc:	4b03      	ldr	r3, [pc, #12]	; (80042ec <HAL_RCC_GetHCLKFreq+0x14>)
 80042de:	681b      	ldr	r3, [r3, #0]
}
 80042e0:	4618      	mov	r0, r3
 80042e2:	46bd      	mov	sp, r7
 80042e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e8:	4770      	bx	lr
 80042ea:	bf00      	nop
 80042ec:	20000000 	.word	0x20000000

080042f0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80042f0:	b580      	push	{r7, lr}
 80042f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80042f4:	f7ff fff0 	bl	80042d8 <HAL_RCC_GetHCLKFreq>
 80042f8:	4602      	mov	r2, r0
 80042fa:	4b05      	ldr	r3, [pc, #20]	; (8004310 <HAL_RCC_GetPCLK1Freq+0x20>)
 80042fc:	689b      	ldr	r3, [r3, #8]
 80042fe:	0a9b      	lsrs	r3, r3, #10
 8004300:	f003 0307 	and.w	r3, r3, #7
 8004304:	4903      	ldr	r1, [pc, #12]	; (8004314 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004306:	5ccb      	ldrb	r3, [r1, r3]
 8004308:	fa22 f303 	lsr.w	r3, r2, r3
}
 800430c:	4618      	mov	r0, r3
 800430e:	bd80      	pop	{r7, pc}
 8004310:	40023800 	.word	0x40023800
 8004314:	08007f14 	.word	0x08007f14

08004318 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004318:	b580      	push	{r7, lr}
 800431a:	b086      	sub	sp, #24
 800431c:	af00      	add	r7, sp, #0
 800431e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004320:	2300      	movs	r3, #0
 8004322:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8004324:	2300      	movs	r3, #0
 8004326:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	f003 0301 	and.w	r3, r3, #1
 8004330:	2b00      	cmp	r3, #0
 8004332:	d105      	bne.n	8004340 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800433c:	2b00      	cmp	r3, #0
 800433e:	d035      	beq.n	80043ac <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004340:	4b62      	ldr	r3, [pc, #392]	; (80044cc <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8004342:	2200      	movs	r2, #0
 8004344:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004346:	f7fc fe7d 	bl	8001044 <HAL_GetTick>
 800434a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800434c:	e008      	b.n	8004360 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800434e:	f7fc fe79 	bl	8001044 <HAL_GetTick>
 8004352:	4602      	mov	r2, r0
 8004354:	697b      	ldr	r3, [r7, #20]
 8004356:	1ad3      	subs	r3, r2, r3
 8004358:	2b02      	cmp	r3, #2
 800435a:	d901      	bls.n	8004360 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800435c:	2303      	movs	r3, #3
 800435e:	e0b0      	b.n	80044c2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004360:	4b5b      	ldr	r3, [pc, #364]	; (80044d0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004368:	2b00      	cmp	r3, #0
 800436a:	d1f0      	bne.n	800434e <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	685b      	ldr	r3, [r3, #4]
 8004370:	019a      	lsls	r2, r3, #6
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	689b      	ldr	r3, [r3, #8]
 8004376:	071b      	lsls	r3, r3, #28
 8004378:	4955      	ldr	r1, [pc, #340]	; (80044d0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800437a:	4313      	orrs	r3, r2
 800437c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004380:	4b52      	ldr	r3, [pc, #328]	; (80044cc <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8004382:	2201      	movs	r2, #1
 8004384:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004386:	f7fc fe5d 	bl	8001044 <HAL_GetTick>
 800438a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800438c:	e008      	b.n	80043a0 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800438e:	f7fc fe59 	bl	8001044 <HAL_GetTick>
 8004392:	4602      	mov	r2, r0
 8004394:	697b      	ldr	r3, [r7, #20]
 8004396:	1ad3      	subs	r3, r2, r3
 8004398:	2b02      	cmp	r3, #2
 800439a:	d901      	bls.n	80043a0 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800439c:	2303      	movs	r3, #3
 800439e:	e090      	b.n	80044c2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80043a0:	4b4b      	ldr	r3, [pc, #300]	; (80044d0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d0f0      	beq.n	800438e <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	f003 0302 	and.w	r3, r3, #2
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	f000 8083 	beq.w	80044c0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80043ba:	2300      	movs	r3, #0
 80043bc:	60fb      	str	r3, [r7, #12]
 80043be:	4b44      	ldr	r3, [pc, #272]	; (80044d0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80043c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043c2:	4a43      	ldr	r2, [pc, #268]	; (80044d0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80043c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80043c8:	6413      	str	r3, [r2, #64]	; 0x40
 80043ca:	4b41      	ldr	r3, [pc, #260]	; (80044d0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80043cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80043d2:	60fb      	str	r3, [r7, #12]
 80043d4:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80043d6:	4b3f      	ldr	r3, [pc, #252]	; (80044d4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	4a3e      	ldr	r2, [pc, #248]	; (80044d4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80043dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80043e0:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80043e2:	f7fc fe2f 	bl	8001044 <HAL_GetTick>
 80043e6:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80043e8:	e008      	b.n	80043fc <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80043ea:	f7fc fe2b 	bl	8001044 <HAL_GetTick>
 80043ee:	4602      	mov	r2, r0
 80043f0:	697b      	ldr	r3, [r7, #20]
 80043f2:	1ad3      	subs	r3, r2, r3
 80043f4:	2b02      	cmp	r3, #2
 80043f6:	d901      	bls.n	80043fc <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 80043f8:	2303      	movs	r3, #3
 80043fa:	e062      	b.n	80044c2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80043fc:	4b35      	ldr	r3, [pc, #212]	; (80044d4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004404:	2b00      	cmp	r3, #0
 8004406:	d0f0      	beq.n	80043ea <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004408:	4b31      	ldr	r3, [pc, #196]	; (80044d0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800440a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800440c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004410:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004412:	693b      	ldr	r3, [r7, #16]
 8004414:	2b00      	cmp	r3, #0
 8004416:	d02f      	beq.n	8004478 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	68db      	ldr	r3, [r3, #12]
 800441c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004420:	693a      	ldr	r2, [r7, #16]
 8004422:	429a      	cmp	r2, r3
 8004424:	d028      	beq.n	8004478 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004426:	4b2a      	ldr	r3, [pc, #168]	; (80044d0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004428:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800442a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800442e:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004430:	4b29      	ldr	r3, [pc, #164]	; (80044d8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004432:	2201      	movs	r2, #1
 8004434:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004436:	4b28      	ldr	r3, [pc, #160]	; (80044d8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004438:	2200      	movs	r2, #0
 800443a:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800443c:	4a24      	ldr	r2, [pc, #144]	; (80044d0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800443e:	693b      	ldr	r3, [r7, #16]
 8004440:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004442:	4b23      	ldr	r3, [pc, #140]	; (80044d0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004444:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004446:	f003 0301 	and.w	r3, r3, #1
 800444a:	2b01      	cmp	r3, #1
 800444c:	d114      	bne.n	8004478 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800444e:	f7fc fdf9 	bl	8001044 <HAL_GetTick>
 8004452:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004454:	e00a      	b.n	800446c <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004456:	f7fc fdf5 	bl	8001044 <HAL_GetTick>
 800445a:	4602      	mov	r2, r0
 800445c:	697b      	ldr	r3, [r7, #20]
 800445e:	1ad3      	subs	r3, r2, r3
 8004460:	f241 3288 	movw	r2, #5000	; 0x1388
 8004464:	4293      	cmp	r3, r2
 8004466:	d901      	bls.n	800446c <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8004468:	2303      	movs	r3, #3
 800446a:	e02a      	b.n	80044c2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800446c:	4b18      	ldr	r3, [pc, #96]	; (80044d0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800446e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004470:	f003 0302 	and.w	r3, r3, #2
 8004474:	2b00      	cmp	r3, #0
 8004476:	d0ee      	beq.n	8004456 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	68db      	ldr	r3, [r3, #12]
 800447c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004480:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004484:	d10d      	bne.n	80044a2 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8004486:	4b12      	ldr	r3, [pc, #72]	; (80044d0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004488:	689b      	ldr	r3, [r3, #8]
 800448a:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	68db      	ldr	r3, [r3, #12]
 8004492:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8004496:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800449a:	490d      	ldr	r1, [pc, #52]	; (80044d0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800449c:	4313      	orrs	r3, r2
 800449e:	608b      	str	r3, [r1, #8]
 80044a0:	e005      	b.n	80044ae <HAL_RCCEx_PeriphCLKConfig+0x196>
 80044a2:	4b0b      	ldr	r3, [pc, #44]	; (80044d0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80044a4:	689b      	ldr	r3, [r3, #8]
 80044a6:	4a0a      	ldr	r2, [pc, #40]	; (80044d0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80044a8:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80044ac:	6093      	str	r3, [r2, #8]
 80044ae:	4b08      	ldr	r3, [pc, #32]	; (80044d0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80044b0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	68db      	ldr	r3, [r3, #12]
 80044b6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80044ba:	4905      	ldr	r1, [pc, #20]	; (80044d0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80044bc:	4313      	orrs	r3, r2
 80044be:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 80044c0:	2300      	movs	r3, #0
}
 80044c2:	4618      	mov	r0, r3
 80044c4:	3718      	adds	r7, #24
 80044c6:	46bd      	mov	sp, r7
 80044c8:	bd80      	pop	{r7, pc}
 80044ca:	bf00      	nop
 80044cc:	42470068 	.word	0x42470068
 80044d0:	40023800 	.word	0x40023800
 80044d4:	40007000 	.word	0x40007000
 80044d8:	42470e40 	.word	0x42470e40

080044dc <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80044dc:	b480      	push	{r7}
 80044de:	b087      	sub	sp, #28
 80044e0:	af00      	add	r7, sp, #0
 80044e2:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 80044e4:	2300      	movs	r3, #0
 80044e6:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 80044e8:	2300      	movs	r3, #0
 80044ea:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 80044ec:	2300      	movs	r3, #0
 80044ee:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 80044f0:	2300      	movs	r3, #0
 80044f2:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	2b01      	cmp	r3, #1
 80044f8:	d13e      	bne.n	8004578 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 80044fa:	4b23      	ldr	r3, [pc, #140]	; (8004588 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80044fc:	689b      	ldr	r3, [r3, #8]
 80044fe:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004502:	60fb      	str	r3, [r7, #12]
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	2b00      	cmp	r3, #0
 8004508:	d005      	beq.n	8004516 <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	2b01      	cmp	r3, #1
 800450e:	d12f      	bne.n	8004570 <HAL_RCCEx_GetPeriphCLKFreq+0x94>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8004510:	4b1e      	ldr	r3, [pc, #120]	; (800458c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004512:	617b      	str	r3, [r7, #20]
          break;
 8004514:	e02f      	b.n	8004576 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8004516:	4b1c      	ldr	r3, [pc, #112]	; (8004588 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004518:	685b      	ldr	r3, [r3, #4]
 800451a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800451e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004522:	d108      	bne.n	8004536 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004524:	4b18      	ldr	r3, [pc, #96]	; (8004588 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004526:	685b      	ldr	r3, [r3, #4]
 8004528:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800452c:	4a18      	ldr	r2, [pc, #96]	; (8004590 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 800452e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004532:	613b      	str	r3, [r7, #16]
 8004534:	e007      	b.n	8004546 <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004536:	4b14      	ldr	r3, [pc, #80]	; (8004588 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004538:	685b      	ldr	r3, [r3, #4]
 800453a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800453e:	4a15      	ldr	r2, [pc, #84]	; (8004594 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8004540:	fbb2 f3f3 	udiv	r3, r2, r3
 8004544:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8004546:	4b10      	ldr	r3, [pc, #64]	; (8004588 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004548:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800454c:	099b      	lsrs	r3, r3, #6
 800454e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004552:	693b      	ldr	r3, [r7, #16]
 8004554:	fb02 f303 	mul.w	r3, r2, r3
 8004558:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 800455a:	4b0b      	ldr	r3, [pc, #44]	; (8004588 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 800455c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004560:	0f1b      	lsrs	r3, r3, #28
 8004562:	f003 0307 	and.w	r3, r3, #7
 8004566:	68ba      	ldr	r2, [r7, #8]
 8004568:	fbb2 f3f3 	udiv	r3, r2, r3
 800456c:	617b      	str	r3, [r7, #20]
          break;
 800456e:	e002      	b.n	8004576 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8004570:	2300      	movs	r3, #0
 8004572:	617b      	str	r3, [r7, #20]
          break;
 8004574:	bf00      	nop
        }
      }
      break;
 8004576:	bf00      	nop
    }
  }
  return frequency;
 8004578:	697b      	ldr	r3, [r7, #20]
}
 800457a:	4618      	mov	r0, r3
 800457c:	371c      	adds	r7, #28
 800457e:	46bd      	mov	sp, r7
 8004580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004584:	4770      	bx	lr
 8004586:	bf00      	nop
 8004588:	40023800 	.word	0x40023800
 800458c:	00bb8000 	.word	0x00bb8000
 8004590:	007a1200 	.word	0x007a1200
 8004594:	00f42400 	.word	0x00f42400

08004598 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004598:	b580      	push	{r7, lr}
 800459a:	b082      	sub	sp, #8
 800459c:	af00      	add	r7, sp, #0
 800459e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d101      	bne.n	80045aa <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80045a6:	2301      	movs	r3, #1
 80045a8:	e07b      	b.n	80046a2 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d108      	bne.n	80045c4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	685b      	ldr	r3, [r3, #4]
 80045b6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80045ba:	d009      	beq.n	80045d0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	2200      	movs	r2, #0
 80045c0:	61da      	str	r2, [r3, #28]
 80045c2:	e005      	b.n	80045d0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	2200      	movs	r2, #0
 80045c8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	2200      	movs	r2, #0
 80045ce:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	2200      	movs	r2, #0
 80045d4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80045dc:	b2db      	uxtb	r3, r3
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d106      	bne.n	80045f0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	2200      	movs	r2, #0
 80045e6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80045ea:	6878      	ldr	r0, [r7, #4]
 80045ec:	f7fc fbd6 	bl	8000d9c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	2202      	movs	r2, #2
 80045f4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	681a      	ldr	r2, [r3, #0]
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004606:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	685b      	ldr	r3, [r3, #4]
 800460c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	689b      	ldr	r3, [r3, #8]
 8004614:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004618:	431a      	orrs	r2, r3
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	68db      	ldr	r3, [r3, #12]
 800461e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004622:	431a      	orrs	r2, r3
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	691b      	ldr	r3, [r3, #16]
 8004628:	f003 0302 	and.w	r3, r3, #2
 800462c:	431a      	orrs	r2, r3
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	695b      	ldr	r3, [r3, #20]
 8004632:	f003 0301 	and.w	r3, r3, #1
 8004636:	431a      	orrs	r2, r3
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	699b      	ldr	r3, [r3, #24]
 800463c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004640:	431a      	orrs	r2, r3
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	69db      	ldr	r3, [r3, #28]
 8004646:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800464a:	431a      	orrs	r2, r3
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	6a1b      	ldr	r3, [r3, #32]
 8004650:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004654:	ea42 0103 	orr.w	r1, r2, r3
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800465c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	430a      	orrs	r2, r1
 8004666:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	699b      	ldr	r3, [r3, #24]
 800466c:	0c1b      	lsrs	r3, r3, #16
 800466e:	f003 0104 	and.w	r1, r3, #4
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004676:	f003 0210 	and.w	r2, r3, #16
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	430a      	orrs	r2, r1
 8004680:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	69da      	ldr	r2, [r3, #28]
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004690:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	2200      	movs	r2, #0
 8004696:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	2201      	movs	r2, #1
 800469c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80046a0:	2300      	movs	r3, #0
}
 80046a2:	4618      	mov	r0, r3
 80046a4:	3708      	adds	r7, #8
 80046a6:	46bd      	mov	sp, r7
 80046a8:	bd80      	pop	{r7, pc}

080046aa <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80046aa:	b084      	sub	sp, #16
 80046ac:	b580      	push	{r7, lr}
 80046ae:	b084      	sub	sp, #16
 80046b0:	af00      	add	r7, sp, #0
 80046b2:	6078      	str	r0, [r7, #4]
 80046b4:	f107 001c 	add.w	r0, r7, #28
 80046b8:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80046bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046be:	2b01      	cmp	r3, #1
 80046c0:	d122      	bne.n	8004708 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046c6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	68db      	ldr	r3, [r3, #12]
 80046d2:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80046d6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80046da:	687a      	ldr	r2, [r7, #4]
 80046dc:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	68db      	ldr	r3, [r3, #12]
 80046e2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80046ea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80046ec:	2b01      	cmp	r3, #1
 80046ee:	d105      	bne.n	80046fc <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	68db      	ldr	r3, [r3, #12]
 80046f4:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80046fc:	6878      	ldr	r0, [r7, #4]
 80046fe:	f000 f9bf 	bl	8004a80 <USB_CoreReset>
 8004702:	4603      	mov	r3, r0
 8004704:	73fb      	strb	r3, [r7, #15]
 8004706:	e01a      	b.n	800473e <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	68db      	ldr	r3, [r3, #12]
 800470c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004714:	6878      	ldr	r0, [r7, #4]
 8004716:	f000 f9b3 	bl	8004a80 <USB_CoreReset>
 800471a:	4603      	mov	r3, r0
 800471c:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800471e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004720:	2b00      	cmp	r3, #0
 8004722:	d106      	bne.n	8004732 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004728:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	639a      	str	r2, [r3, #56]	; 0x38
 8004730:	e005      	b.n	800473e <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004736:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800473e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004740:	2b01      	cmp	r3, #1
 8004742:	d10b      	bne.n	800475c <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	689b      	ldr	r3, [r3, #8]
 8004748:	f043 0206 	orr.w	r2, r3, #6
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	689b      	ldr	r3, [r3, #8]
 8004754:	f043 0220 	orr.w	r2, r3, #32
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800475c:	7bfb      	ldrb	r3, [r7, #15]
}
 800475e:	4618      	mov	r0, r3
 8004760:	3710      	adds	r7, #16
 8004762:	46bd      	mov	sp, r7
 8004764:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004768:	b004      	add	sp, #16
 800476a:	4770      	bx	lr

0800476c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800476c:	b480      	push	{r7}
 800476e:	b083      	sub	sp, #12
 8004770:	af00      	add	r7, sp, #0
 8004772:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	689b      	ldr	r3, [r3, #8]
 8004778:	f043 0201 	orr.w	r2, r3, #1
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004780:	2300      	movs	r3, #0
}
 8004782:	4618      	mov	r0, r3
 8004784:	370c      	adds	r7, #12
 8004786:	46bd      	mov	sp, r7
 8004788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800478c:	4770      	bx	lr

0800478e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800478e:	b480      	push	{r7}
 8004790:	b083      	sub	sp, #12
 8004792:	af00      	add	r7, sp, #0
 8004794:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	689b      	ldr	r3, [r3, #8]
 800479a:	f023 0201 	bic.w	r2, r3, #1
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80047a2:	2300      	movs	r3, #0
}
 80047a4:	4618      	mov	r0, r3
 80047a6:	370c      	adds	r7, #12
 80047a8:	46bd      	mov	sp, r7
 80047aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ae:	4770      	bx	lr

080047b0 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80047b0:	b580      	push	{r7, lr}
 80047b2:	b084      	sub	sp, #16
 80047b4:	af00      	add	r7, sp, #0
 80047b6:	6078      	str	r0, [r7, #4]
 80047b8:	460b      	mov	r3, r1
 80047ba:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80047bc:	2300      	movs	r3, #0
 80047be:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	68db      	ldr	r3, [r3, #12]
 80047c4:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80047cc:	78fb      	ldrb	r3, [r7, #3]
 80047ce:	2b01      	cmp	r3, #1
 80047d0:	d115      	bne.n	80047fe <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	68db      	ldr	r3, [r3, #12]
 80047d6:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80047de:	2001      	movs	r0, #1
 80047e0:	f7fc fc3c 	bl	800105c <HAL_Delay>
      ms++;
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	3301      	adds	r3, #1
 80047e8:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80047ea:	6878      	ldr	r0, [r7, #4]
 80047ec:	f000 f939 	bl	8004a62 <USB_GetMode>
 80047f0:	4603      	mov	r3, r0
 80047f2:	2b01      	cmp	r3, #1
 80047f4:	d01e      	beq.n	8004834 <USB_SetCurrentMode+0x84>
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	2b31      	cmp	r3, #49	; 0x31
 80047fa:	d9f0      	bls.n	80047de <USB_SetCurrentMode+0x2e>
 80047fc:	e01a      	b.n	8004834 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80047fe:	78fb      	ldrb	r3, [r7, #3]
 8004800:	2b00      	cmp	r3, #0
 8004802:	d115      	bne.n	8004830 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	68db      	ldr	r3, [r3, #12]
 8004808:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004810:	2001      	movs	r0, #1
 8004812:	f7fc fc23 	bl	800105c <HAL_Delay>
      ms++;
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	3301      	adds	r3, #1
 800481a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800481c:	6878      	ldr	r0, [r7, #4]
 800481e:	f000 f920 	bl	8004a62 <USB_GetMode>
 8004822:	4603      	mov	r3, r0
 8004824:	2b00      	cmp	r3, #0
 8004826:	d005      	beq.n	8004834 <USB_SetCurrentMode+0x84>
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	2b31      	cmp	r3, #49	; 0x31
 800482c:	d9f0      	bls.n	8004810 <USB_SetCurrentMode+0x60>
 800482e:	e001      	b.n	8004834 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8004830:	2301      	movs	r3, #1
 8004832:	e005      	b.n	8004840 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	2b32      	cmp	r3, #50	; 0x32
 8004838:	d101      	bne.n	800483e <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800483a:	2301      	movs	r3, #1
 800483c:	e000      	b.n	8004840 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800483e:	2300      	movs	r3, #0
}
 8004840:	4618      	mov	r0, r3
 8004842:	3710      	adds	r7, #16
 8004844:	46bd      	mov	sp, r7
 8004846:	bd80      	pop	{r7, pc}

08004848 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004848:	b480      	push	{r7}
 800484a:	b085      	sub	sp, #20
 800484c:	af00      	add	r7, sp, #0
 800484e:	6078      	str	r0, [r7, #4]
 8004850:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004852:	2300      	movs	r3, #0
 8004854:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	3301      	adds	r3, #1
 800485a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	4a13      	ldr	r2, [pc, #76]	; (80048ac <USB_FlushTxFifo+0x64>)
 8004860:	4293      	cmp	r3, r2
 8004862:	d901      	bls.n	8004868 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8004864:	2303      	movs	r3, #3
 8004866:	e01b      	b.n	80048a0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	691b      	ldr	r3, [r3, #16]
 800486c:	2b00      	cmp	r3, #0
 800486e:	daf2      	bge.n	8004856 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8004870:	2300      	movs	r3, #0
 8004872:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004874:	683b      	ldr	r3, [r7, #0]
 8004876:	019b      	lsls	r3, r3, #6
 8004878:	f043 0220 	orr.w	r2, r3, #32
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	3301      	adds	r3, #1
 8004884:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	4a08      	ldr	r2, [pc, #32]	; (80048ac <USB_FlushTxFifo+0x64>)
 800488a:	4293      	cmp	r3, r2
 800488c:	d901      	bls.n	8004892 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800488e:	2303      	movs	r3, #3
 8004890:	e006      	b.n	80048a0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	691b      	ldr	r3, [r3, #16]
 8004896:	f003 0320 	and.w	r3, r3, #32
 800489a:	2b20      	cmp	r3, #32
 800489c:	d0f0      	beq.n	8004880 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800489e:	2300      	movs	r3, #0
}
 80048a0:	4618      	mov	r0, r3
 80048a2:	3714      	adds	r7, #20
 80048a4:	46bd      	mov	sp, r7
 80048a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048aa:	4770      	bx	lr
 80048ac:	00030d40 	.word	0x00030d40

080048b0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80048b0:	b480      	push	{r7}
 80048b2:	b085      	sub	sp, #20
 80048b4:	af00      	add	r7, sp, #0
 80048b6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80048b8:	2300      	movs	r3, #0
 80048ba:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	3301      	adds	r3, #1
 80048c0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	4a11      	ldr	r2, [pc, #68]	; (800490c <USB_FlushRxFifo+0x5c>)
 80048c6:	4293      	cmp	r3, r2
 80048c8:	d901      	bls.n	80048ce <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80048ca:	2303      	movs	r3, #3
 80048cc:	e018      	b.n	8004900 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	691b      	ldr	r3, [r3, #16]
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	daf2      	bge.n	80048bc <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80048d6:	2300      	movs	r3, #0
 80048d8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	2210      	movs	r2, #16
 80048de:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	3301      	adds	r3, #1
 80048e4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	4a08      	ldr	r2, [pc, #32]	; (800490c <USB_FlushRxFifo+0x5c>)
 80048ea:	4293      	cmp	r3, r2
 80048ec:	d901      	bls.n	80048f2 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80048ee:	2303      	movs	r3, #3
 80048f0:	e006      	b.n	8004900 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	691b      	ldr	r3, [r3, #16]
 80048f6:	f003 0310 	and.w	r3, r3, #16
 80048fa:	2b10      	cmp	r3, #16
 80048fc:	d0f0      	beq.n	80048e0 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80048fe:	2300      	movs	r3, #0
}
 8004900:	4618      	mov	r0, r3
 8004902:	3714      	adds	r7, #20
 8004904:	46bd      	mov	sp, r7
 8004906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800490a:	4770      	bx	lr
 800490c:	00030d40 	.word	0x00030d40

08004910 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8004910:	b480      	push	{r7}
 8004912:	b089      	sub	sp, #36	; 0x24
 8004914:	af00      	add	r7, sp, #0
 8004916:	60f8      	str	r0, [r7, #12]
 8004918:	60b9      	str	r1, [r7, #8]
 800491a:	4611      	mov	r1, r2
 800491c:	461a      	mov	r2, r3
 800491e:	460b      	mov	r3, r1
 8004920:	71fb      	strb	r3, [r7, #7]
 8004922:	4613      	mov	r3, r2
 8004924:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800492a:	68bb      	ldr	r3, [r7, #8]
 800492c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800492e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004932:	2b00      	cmp	r3, #0
 8004934:	d123      	bne.n	800497e <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8004936:	88bb      	ldrh	r3, [r7, #4]
 8004938:	3303      	adds	r3, #3
 800493a:	089b      	lsrs	r3, r3, #2
 800493c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800493e:	2300      	movs	r3, #0
 8004940:	61bb      	str	r3, [r7, #24]
 8004942:	e018      	b.n	8004976 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8004944:	79fb      	ldrb	r3, [r7, #7]
 8004946:	031a      	lsls	r2, r3, #12
 8004948:	697b      	ldr	r3, [r7, #20]
 800494a:	4413      	add	r3, r2
 800494c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004950:	461a      	mov	r2, r3
 8004952:	69fb      	ldr	r3, [r7, #28]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	6013      	str	r3, [r2, #0]
      pSrc++;
 8004958:	69fb      	ldr	r3, [r7, #28]
 800495a:	3301      	adds	r3, #1
 800495c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800495e:	69fb      	ldr	r3, [r7, #28]
 8004960:	3301      	adds	r3, #1
 8004962:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004964:	69fb      	ldr	r3, [r7, #28]
 8004966:	3301      	adds	r3, #1
 8004968:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800496a:	69fb      	ldr	r3, [r7, #28]
 800496c:	3301      	adds	r3, #1
 800496e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8004970:	69bb      	ldr	r3, [r7, #24]
 8004972:	3301      	adds	r3, #1
 8004974:	61bb      	str	r3, [r7, #24]
 8004976:	69ba      	ldr	r2, [r7, #24]
 8004978:	693b      	ldr	r3, [r7, #16]
 800497a:	429a      	cmp	r2, r3
 800497c:	d3e2      	bcc.n	8004944 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800497e:	2300      	movs	r3, #0
}
 8004980:	4618      	mov	r0, r3
 8004982:	3724      	adds	r7, #36	; 0x24
 8004984:	46bd      	mov	sp, r7
 8004986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800498a:	4770      	bx	lr

0800498c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800498c:	b480      	push	{r7}
 800498e:	b08b      	sub	sp, #44	; 0x2c
 8004990:	af00      	add	r7, sp, #0
 8004992:	60f8      	str	r0, [r7, #12]
 8004994:	60b9      	str	r1, [r7, #8]
 8004996:	4613      	mov	r3, r2
 8004998:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800499e:	68bb      	ldr	r3, [r7, #8]
 80049a0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80049a2:	88fb      	ldrh	r3, [r7, #6]
 80049a4:	089b      	lsrs	r3, r3, #2
 80049a6:	b29b      	uxth	r3, r3
 80049a8:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80049aa:	88fb      	ldrh	r3, [r7, #6]
 80049ac:	f003 0303 	and.w	r3, r3, #3
 80049b0:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80049b2:	2300      	movs	r3, #0
 80049b4:	623b      	str	r3, [r7, #32]
 80049b6:	e014      	b.n	80049e2 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80049b8:	69bb      	ldr	r3, [r7, #24]
 80049ba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80049be:	681a      	ldr	r2, [r3, #0]
 80049c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049c2:	601a      	str	r2, [r3, #0]
    pDest++;
 80049c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049c6:	3301      	adds	r3, #1
 80049c8:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80049ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049cc:	3301      	adds	r3, #1
 80049ce:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80049d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049d2:	3301      	adds	r3, #1
 80049d4:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80049d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049d8:	3301      	adds	r3, #1
 80049da:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 80049dc:	6a3b      	ldr	r3, [r7, #32]
 80049de:	3301      	adds	r3, #1
 80049e0:	623b      	str	r3, [r7, #32]
 80049e2:	6a3a      	ldr	r2, [r7, #32]
 80049e4:	697b      	ldr	r3, [r7, #20]
 80049e6:	429a      	cmp	r2, r3
 80049e8:	d3e6      	bcc.n	80049b8 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80049ea:	8bfb      	ldrh	r3, [r7, #30]
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d01e      	beq.n	8004a2e <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80049f0:	2300      	movs	r3, #0
 80049f2:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80049f4:	69bb      	ldr	r3, [r7, #24]
 80049f6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80049fa:	461a      	mov	r2, r3
 80049fc:	f107 0310 	add.w	r3, r7, #16
 8004a00:	6812      	ldr	r2, [r2, #0]
 8004a02:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8004a04:	693a      	ldr	r2, [r7, #16]
 8004a06:	6a3b      	ldr	r3, [r7, #32]
 8004a08:	b2db      	uxtb	r3, r3
 8004a0a:	00db      	lsls	r3, r3, #3
 8004a0c:	fa22 f303 	lsr.w	r3, r2, r3
 8004a10:	b2da      	uxtb	r2, r3
 8004a12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a14:	701a      	strb	r2, [r3, #0]
      i++;
 8004a16:	6a3b      	ldr	r3, [r7, #32]
 8004a18:	3301      	adds	r3, #1
 8004a1a:	623b      	str	r3, [r7, #32]
      pDest++;
 8004a1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a1e:	3301      	adds	r3, #1
 8004a20:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8004a22:	8bfb      	ldrh	r3, [r7, #30]
 8004a24:	3b01      	subs	r3, #1
 8004a26:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8004a28:	8bfb      	ldrh	r3, [r7, #30]
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d1ea      	bne.n	8004a04 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8004a2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004a30:	4618      	mov	r0, r3
 8004a32:	372c      	adds	r7, #44	; 0x2c
 8004a34:	46bd      	mov	sp, r7
 8004a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a3a:	4770      	bx	lr

08004a3c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8004a3c:	b480      	push	{r7}
 8004a3e:	b085      	sub	sp, #20
 8004a40:	af00      	add	r7, sp, #0
 8004a42:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	695b      	ldr	r3, [r3, #20]
 8004a48:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	699b      	ldr	r3, [r3, #24]
 8004a4e:	68fa      	ldr	r2, [r7, #12]
 8004a50:	4013      	ands	r3, r2
 8004a52:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8004a54:	68fb      	ldr	r3, [r7, #12]
}
 8004a56:	4618      	mov	r0, r3
 8004a58:	3714      	adds	r7, #20
 8004a5a:	46bd      	mov	sp, r7
 8004a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a60:	4770      	bx	lr

08004a62 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8004a62:	b480      	push	{r7}
 8004a64:	b083      	sub	sp, #12
 8004a66:	af00      	add	r7, sp, #0
 8004a68:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	695b      	ldr	r3, [r3, #20]
 8004a6e:	f003 0301 	and.w	r3, r3, #1
}
 8004a72:	4618      	mov	r0, r3
 8004a74:	370c      	adds	r7, #12
 8004a76:	46bd      	mov	sp, r7
 8004a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a7c:	4770      	bx	lr
	...

08004a80 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004a80:	b480      	push	{r7}
 8004a82:	b085      	sub	sp, #20
 8004a84:	af00      	add	r7, sp, #0
 8004a86:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004a88:	2300      	movs	r3, #0
 8004a8a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	3301      	adds	r3, #1
 8004a90:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	4a13      	ldr	r2, [pc, #76]	; (8004ae4 <USB_CoreReset+0x64>)
 8004a96:	4293      	cmp	r3, r2
 8004a98:	d901      	bls.n	8004a9e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8004a9a:	2303      	movs	r3, #3
 8004a9c:	e01b      	b.n	8004ad6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	691b      	ldr	r3, [r3, #16]
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	daf2      	bge.n	8004a8c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8004aa6:	2300      	movs	r3, #0
 8004aa8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	691b      	ldr	r3, [r3, #16]
 8004aae:	f043 0201 	orr.w	r2, r3, #1
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	3301      	adds	r3, #1
 8004aba:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	4a09      	ldr	r2, [pc, #36]	; (8004ae4 <USB_CoreReset+0x64>)
 8004ac0:	4293      	cmp	r3, r2
 8004ac2:	d901      	bls.n	8004ac8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8004ac4:	2303      	movs	r3, #3
 8004ac6:	e006      	b.n	8004ad6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	691b      	ldr	r3, [r3, #16]
 8004acc:	f003 0301 	and.w	r3, r3, #1
 8004ad0:	2b01      	cmp	r3, #1
 8004ad2:	d0f0      	beq.n	8004ab6 <USB_CoreReset+0x36>

  return HAL_OK;
 8004ad4:	2300      	movs	r3, #0
}
 8004ad6:	4618      	mov	r0, r3
 8004ad8:	3714      	adds	r7, #20
 8004ada:	46bd      	mov	sp, r7
 8004adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae0:	4770      	bx	lr
 8004ae2:	bf00      	nop
 8004ae4:	00030d40 	.word	0x00030d40

08004ae8 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004ae8:	b084      	sub	sp, #16
 8004aea:	b580      	push	{r7, lr}
 8004aec:	b086      	sub	sp, #24
 8004aee:	af00      	add	r7, sp, #0
 8004af0:	6078      	str	r0, [r7, #4]
 8004af2:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8004af6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8004afa:	2300      	movs	r3, #0
 8004afc:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004b08:	461a      	mov	r2, r3
 8004b0a:	2300      	movs	r3, #0
 8004b0c:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b12:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b1e:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b2a:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d018      	beq.n	8004b70 <USB_HostInit+0x88>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8004b3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b40:	2b01      	cmp	r3, #1
 8004b42:	d10a      	bne.n	8004b5a <USB_HostInit+0x72>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	68fa      	ldr	r2, [r7, #12]
 8004b4e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004b52:	f043 0304 	orr.w	r3, r3, #4
 8004b56:	6013      	str	r3, [r2, #0]
 8004b58:	e014      	b.n	8004b84 <USB_HostInit+0x9c>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	68fa      	ldr	r2, [r7, #12]
 8004b64:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004b68:	f023 0304 	bic.w	r3, r3, #4
 8004b6c:	6013      	str	r3, [r2, #0]
 8004b6e:	e009      	b.n	8004b84 <USB_HostInit+0x9c>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	68fa      	ldr	r2, [r7, #12]
 8004b7a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004b7e:	f023 0304 	bic.w	r3, r3, #4
 8004b82:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004b84:	2110      	movs	r1, #16
 8004b86:	6878      	ldr	r0, [r7, #4]
 8004b88:	f7ff fe5e 	bl	8004848 <USB_FlushTxFifo>
 8004b8c:	4603      	mov	r3, r0
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d001      	beq.n	8004b96 <USB_HostInit+0xae>
  {
    ret = HAL_ERROR;
 8004b92:	2301      	movs	r3, #1
 8004b94:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004b96:	6878      	ldr	r0, [r7, #4]
 8004b98:	f7ff fe8a 	bl	80048b0 <USB_FlushRxFifo>
 8004b9c:	4603      	mov	r3, r0
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d001      	beq.n	8004ba6 <USB_HostInit+0xbe>
  {
    ret = HAL_ERROR;
 8004ba2:	2301      	movs	r3, #1
 8004ba4:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8004ba6:	2300      	movs	r3, #0
 8004ba8:	613b      	str	r3, [r7, #16]
 8004baa:	e015      	b.n	8004bd8 <USB_HostInit+0xf0>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8004bac:	693b      	ldr	r3, [r7, #16]
 8004bae:	015a      	lsls	r2, r3, #5
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	4413      	add	r3, r2
 8004bb4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004bb8:	461a      	mov	r2, r3
 8004bba:	f04f 33ff 	mov.w	r3, #4294967295
 8004bbe:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8004bc0:	693b      	ldr	r3, [r7, #16]
 8004bc2:	015a      	lsls	r2, r3, #5
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	4413      	add	r3, r2
 8004bc8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004bcc:	461a      	mov	r2, r3
 8004bce:	2300      	movs	r3, #0
 8004bd0:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8004bd2:	693b      	ldr	r3, [r7, #16]
 8004bd4:	3301      	adds	r3, #1
 8004bd6:	613b      	str	r3, [r7, #16]
 8004bd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bda:	693a      	ldr	r2, [r7, #16]
 8004bdc:	429a      	cmp	r2, r3
 8004bde:	d3e5      	bcc.n	8004bac <USB_HostInit+0xc4>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	2200      	movs	r2, #0
 8004be4:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	f04f 32ff 	mov.w	r2, #4294967295
 8004bec:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004bf2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d00b      	beq.n	8004c12 <USB_HostInit+0x12a>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004c00:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	4a13      	ldr	r2, [pc, #76]	; (8004c54 <USB_HostInit+0x16c>)
 8004c06:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	4a13      	ldr	r2, [pc, #76]	; (8004c58 <USB_HostInit+0x170>)
 8004c0c:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8004c10:	e009      	b.n	8004c26 <USB_HostInit+0x13e>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	2280      	movs	r2, #128	; 0x80
 8004c16:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	4a10      	ldr	r2, [pc, #64]	; (8004c5c <USB_HostInit+0x174>)
 8004c1c:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	4a0f      	ldr	r2, [pc, #60]	; (8004c60 <USB_HostInit+0x178>)
 8004c22:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004c26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d105      	bne.n	8004c38 <USB_HostInit+0x150>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	699b      	ldr	r3, [r3, #24]
 8004c30:	f043 0210 	orr.w	r2, r3, #16
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	699a      	ldr	r2, [r3, #24]
 8004c3c:	4b09      	ldr	r3, [pc, #36]	; (8004c64 <USB_HostInit+0x17c>)
 8004c3e:	4313      	orrs	r3, r2
 8004c40:	687a      	ldr	r2, [r7, #4]
 8004c42:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 8004c44:	7dfb      	ldrb	r3, [r7, #23]
}
 8004c46:	4618      	mov	r0, r3
 8004c48:	3718      	adds	r7, #24
 8004c4a:	46bd      	mov	sp, r7
 8004c4c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004c50:	b004      	add	sp, #16
 8004c52:	4770      	bx	lr
 8004c54:	01000200 	.word	0x01000200
 8004c58:	00e00300 	.word	0x00e00300
 8004c5c:	00600080 	.word	0x00600080
 8004c60:	004000e0 	.word	0x004000e0
 8004c64:	a3200008 	.word	0xa3200008

08004c68 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8004c68:	b480      	push	{r7}
 8004c6a:	b085      	sub	sp, #20
 8004c6c:	af00      	add	r7, sp, #0
 8004c6e:	6078      	str	r0, [r7, #4]
 8004c70:	460b      	mov	r3, r1
 8004c72:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	68fa      	ldr	r2, [r7, #12]
 8004c82:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004c86:	f023 0303 	bic.w	r3, r3, #3
 8004c8a:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004c92:	681a      	ldr	r2, [r3, #0]
 8004c94:	78fb      	ldrb	r3, [r7, #3]
 8004c96:	f003 0303 	and.w	r3, r3, #3
 8004c9a:	68f9      	ldr	r1, [r7, #12]
 8004c9c:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8004ca0:	4313      	orrs	r3, r2
 8004ca2:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8004ca4:	78fb      	ldrb	r3, [r7, #3]
 8004ca6:	2b01      	cmp	r3, #1
 8004ca8:	d107      	bne.n	8004cba <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004cb0:	461a      	mov	r2, r3
 8004cb2:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8004cb6:	6053      	str	r3, [r2, #4]
 8004cb8:	e009      	b.n	8004cce <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8004cba:	78fb      	ldrb	r3, [r7, #3]
 8004cbc:	2b02      	cmp	r3, #2
 8004cbe:	d106      	bne.n	8004cce <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004cc6:	461a      	mov	r2, r3
 8004cc8:	f241 7370 	movw	r3, #6000	; 0x1770
 8004ccc:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8004cce:	2300      	movs	r3, #0
}
 8004cd0:	4618      	mov	r0, r3
 8004cd2:	3714      	adds	r7, #20
 8004cd4:	46bd      	mov	sp, r7
 8004cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cda:	4770      	bx	lr

08004cdc <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8004cdc:	b580      	push	{r7, lr}
 8004cde:	b084      	sub	sp, #16
 8004ce0:	af00      	add	r7, sp, #0
 8004ce2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8004ce8:	2300      	movs	r3, #0
 8004cea:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8004cf6:	68bb      	ldr	r3, [r7, #8]
 8004cf8:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8004cfc:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8004cfe:	68bb      	ldr	r3, [r7, #8]
 8004d00:	68fa      	ldr	r2, [r7, #12]
 8004d02:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8004d06:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004d0a:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8004d0c:	2064      	movs	r0, #100	; 0x64
 8004d0e:	f7fc f9a5 	bl	800105c <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8004d12:	68bb      	ldr	r3, [r7, #8]
 8004d14:	68fa      	ldr	r2, [r7, #12]
 8004d16:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8004d1a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004d1e:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8004d20:	200a      	movs	r0, #10
 8004d22:	f7fc f99b 	bl	800105c <HAL_Delay>

  return HAL_OK;
 8004d26:	2300      	movs	r3, #0
}
 8004d28:	4618      	mov	r0, r3
 8004d2a:	3710      	adds	r7, #16
 8004d2c:	46bd      	mov	sp, r7
 8004d2e:	bd80      	pop	{r7, pc}

08004d30 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8004d30:	b480      	push	{r7}
 8004d32:	b085      	sub	sp, #20
 8004d34:	af00      	add	r7, sp, #0
 8004d36:	6078      	str	r0, [r7, #4]
 8004d38:	460b      	mov	r3, r1
 8004d3a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8004d40:	2300      	movs	r3, #0
 8004d42:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8004d4e:	68bb      	ldr	r3, [r7, #8]
 8004d50:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8004d54:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8004d56:	68bb      	ldr	r3, [r7, #8]
 8004d58:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d109      	bne.n	8004d74 <USB_DriveVbus+0x44>
 8004d60:	78fb      	ldrb	r3, [r7, #3]
 8004d62:	2b01      	cmp	r3, #1
 8004d64:	d106      	bne.n	8004d74 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8004d66:	68bb      	ldr	r3, [r7, #8]
 8004d68:	68fa      	ldr	r2, [r7, #12]
 8004d6a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8004d6e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004d72:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8004d74:	68bb      	ldr	r3, [r7, #8]
 8004d76:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004d7a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004d7e:	d109      	bne.n	8004d94 <USB_DriveVbus+0x64>
 8004d80:	78fb      	ldrb	r3, [r7, #3]
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d106      	bne.n	8004d94 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8004d86:	68bb      	ldr	r3, [r7, #8]
 8004d88:	68fa      	ldr	r2, [r7, #12]
 8004d8a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8004d8e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004d92:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8004d94:	2300      	movs	r3, #0
}
 8004d96:	4618      	mov	r0, r3
 8004d98:	3714      	adds	r7, #20
 8004d9a:	46bd      	mov	sp, r7
 8004d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da0:	4770      	bx	lr

08004da2 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8004da2:	b480      	push	{r7}
 8004da4:	b085      	sub	sp, #20
 8004da6:	af00      	add	r7, sp, #0
 8004da8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8004dae:	2300      	movs	r3, #0
 8004db0:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8004dbc:	68bb      	ldr	r3, [r7, #8]
 8004dbe:	0c5b      	lsrs	r3, r3, #17
 8004dc0:	f003 0303 	and.w	r3, r3, #3
}
 8004dc4:	4618      	mov	r0, r3
 8004dc6:	3714      	adds	r7, #20
 8004dc8:	46bd      	mov	sp, r7
 8004dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dce:	4770      	bx	lr

08004dd0 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8004dd0:	b480      	push	{r7}
 8004dd2:	b085      	sub	sp, #20
 8004dd4:	af00      	add	r7, sp, #0
 8004dd6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004de2:	689b      	ldr	r3, [r3, #8]
 8004de4:	b29b      	uxth	r3, r3
}
 8004de6:	4618      	mov	r0, r3
 8004de8:	3714      	adds	r7, #20
 8004dea:	46bd      	mov	sp, r7
 8004dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004df0:	4770      	bx	lr
	...

08004df4 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8004df4:	b580      	push	{r7, lr}
 8004df6:	b088      	sub	sp, #32
 8004df8:	af00      	add	r7, sp, #0
 8004dfa:	6078      	str	r0, [r7, #4]
 8004dfc:	4608      	mov	r0, r1
 8004dfe:	4611      	mov	r1, r2
 8004e00:	461a      	mov	r2, r3
 8004e02:	4603      	mov	r3, r0
 8004e04:	70fb      	strb	r3, [r7, #3]
 8004e06:	460b      	mov	r3, r1
 8004e08:	70bb      	strb	r3, [r7, #2]
 8004e0a:	4613      	mov	r3, r2
 8004e0c:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8004e0e:	2300      	movs	r3, #0
 8004e10:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 8004e16:	78fb      	ldrb	r3, [r7, #3]
 8004e18:	015a      	lsls	r2, r3, #5
 8004e1a:	693b      	ldr	r3, [r7, #16]
 8004e1c:	4413      	add	r3, r2
 8004e1e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004e22:	461a      	mov	r2, r3
 8004e24:	f04f 33ff 	mov.w	r3, #4294967295
 8004e28:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8004e2a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8004e2e:	2b03      	cmp	r3, #3
 8004e30:	d87e      	bhi.n	8004f30 <USB_HC_Init+0x13c>
 8004e32:	a201      	add	r2, pc, #4	; (adr r2, 8004e38 <USB_HC_Init+0x44>)
 8004e34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e38:	08004e49 	.word	0x08004e49
 8004e3c:	08004ef3 	.word	0x08004ef3
 8004e40:	08004e49 	.word	0x08004e49
 8004e44:	08004eb5 	.word	0x08004eb5
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8004e48:	78fb      	ldrb	r3, [r7, #3]
 8004e4a:	015a      	lsls	r2, r3, #5
 8004e4c:	693b      	ldr	r3, [r7, #16]
 8004e4e:	4413      	add	r3, r2
 8004e50:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004e54:	461a      	mov	r2, r3
 8004e56:	f240 439d 	movw	r3, #1181	; 0x49d
 8004e5a:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8004e5c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	da10      	bge.n	8004e86 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8004e64:	78fb      	ldrb	r3, [r7, #3]
 8004e66:	015a      	lsls	r2, r3, #5
 8004e68:	693b      	ldr	r3, [r7, #16]
 8004e6a:	4413      	add	r3, r2
 8004e6c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004e70:	68db      	ldr	r3, [r3, #12]
 8004e72:	78fa      	ldrb	r2, [r7, #3]
 8004e74:	0151      	lsls	r1, r2, #5
 8004e76:	693a      	ldr	r2, [r7, #16]
 8004e78:	440a      	add	r2, r1
 8004e7a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004e7e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004e82:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 8004e84:	e057      	b.n	8004f36 <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d051      	beq.n	8004f36 <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 8004e92:	78fb      	ldrb	r3, [r7, #3]
 8004e94:	015a      	lsls	r2, r3, #5
 8004e96:	693b      	ldr	r3, [r7, #16]
 8004e98:	4413      	add	r3, r2
 8004e9a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004e9e:	68db      	ldr	r3, [r3, #12]
 8004ea0:	78fa      	ldrb	r2, [r7, #3]
 8004ea2:	0151      	lsls	r1, r2, #5
 8004ea4:	693a      	ldr	r2, [r7, #16]
 8004ea6:	440a      	add	r2, r1
 8004ea8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004eac:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8004eb0:	60d3      	str	r3, [r2, #12]
      break;
 8004eb2:	e040      	b.n	8004f36 <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8004eb4:	78fb      	ldrb	r3, [r7, #3]
 8004eb6:	015a      	lsls	r2, r3, #5
 8004eb8:	693b      	ldr	r3, [r7, #16]
 8004eba:	4413      	add	r3, r2
 8004ebc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004ec0:	461a      	mov	r2, r3
 8004ec2:	f240 639d 	movw	r3, #1693	; 0x69d
 8004ec6:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8004ec8:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	da34      	bge.n	8004f3a <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8004ed0:	78fb      	ldrb	r3, [r7, #3]
 8004ed2:	015a      	lsls	r2, r3, #5
 8004ed4:	693b      	ldr	r3, [r7, #16]
 8004ed6:	4413      	add	r3, r2
 8004ed8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004edc:	68db      	ldr	r3, [r3, #12]
 8004ede:	78fa      	ldrb	r2, [r7, #3]
 8004ee0:	0151      	lsls	r1, r2, #5
 8004ee2:	693a      	ldr	r2, [r7, #16]
 8004ee4:	440a      	add	r2, r1
 8004ee6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004eea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004eee:	60d3      	str	r3, [r2, #12]
      }

      break;
 8004ef0:	e023      	b.n	8004f3a <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8004ef2:	78fb      	ldrb	r3, [r7, #3]
 8004ef4:	015a      	lsls	r2, r3, #5
 8004ef6:	693b      	ldr	r3, [r7, #16]
 8004ef8:	4413      	add	r3, r2
 8004efa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004efe:	461a      	mov	r2, r3
 8004f00:	f240 2325 	movw	r3, #549	; 0x225
 8004f04:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8004f06:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	da17      	bge.n	8004f3e <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8004f0e:	78fb      	ldrb	r3, [r7, #3]
 8004f10:	015a      	lsls	r2, r3, #5
 8004f12:	693b      	ldr	r3, [r7, #16]
 8004f14:	4413      	add	r3, r2
 8004f16:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f1a:	68db      	ldr	r3, [r3, #12]
 8004f1c:	78fa      	ldrb	r2, [r7, #3]
 8004f1e:	0151      	lsls	r1, r2, #5
 8004f20:	693a      	ldr	r2, [r7, #16]
 8004f22:	440a      	add	r2, r1
 8004f24:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004f28:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8004f2c:	60d3      	str	r3, [r2, #12]
      }
      break;
 8004f2e:	e006      	b.n	8004f3e <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 8004f30:	2301      	movs	r3, #1
 8004f32:	77fb      	strb	r3, [r7, #31]
      break;
 8004f34:	e004      	b.n	8004f40 <USB_HC_Init+0x14c>
      break;
 8004f36:	bf00      	nop
 8004f38:	e002      	b.n	8004f40 <USB_HC_Init+0x14c>
      break;
 8004f3a:	bf00      	nop
 8004f3c:	e000      	b.n	8004f40 <USB_HC_Init+0x14c>
      break;
 8004f3e:	bf00      	nop
  }

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 8004f40:	78fb      	ldrb	r3, [r7, #3]
 8004f42:	015a      	lsls	r2, r3, #5
 8004f44:	693b      	ldr	r3, [r7, #16]
 8004f46:	4413      	add	r3, r2
 8004f48:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f4c:	68db      	ldr	r3, [r3, #12]
 8004f4e:	78fa      	ldrb	r2, [r7, #3]
 8004f50:	0151      	lsls	r1, r2, #5
 8004f52:	693a      	ldr	r2, [r7, #16]
 8004f54:	440a      	add	r2, r1
 8004f56:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004f5a:	f043 0302 	orr.w	r3, r3, #2
 8004f5e:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8004f60:	693b      	ldr	r3, [r7, #16]
 8004f62:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004f66:	699a      	ldr	r2, [r3, #24]
 8004f68:	78fb      	ldrb	r3, [r7, #3]
 8004f6a:	f003 030f 	and.w	r3, r3, #15
 8004f6e:	2101      	movs	r1, #1
 8004f70:	fa01 f303 	lsl.w	r3, r1, r3
 8004f74:	6939      	ldr	r1, [r7, #16]
 8004f76:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8004f7a:	4313      	orrs	r3, r2
 8004f7c:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	699b      	ldr	r3, [r3, #24]
 8004f82:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8004f8a:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	da03      	bge.n	8004f9a <USB_HC_Init+0x1a6>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8004f92:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004f96:	61bb      	str	r3, [r7, #24]
 8004f98:	e001      	b.n	8004f9e <USB_HC_Init+0x1aa>
  }
  else
  {
    HCcharEpDir = 0U;
 8004f9a:	2300      	movs	r3, #0
 8004f9c:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 8004f9e:	6878      	ldr	r0, [r7, #4]
 8004fa0:	f7ff feff 	bl	8004da2 <USB_GetHostSpeed>
 8004fa4:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8004fa6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004faa:	2b02      	cmp	r3, #2
 8004fac:	d106      	bne.n	8004fbc <USB_HC_Init+0x1c8>
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	2b02      	cmp	r3, #2
 8004fb2:	d003      	beq.n	8004fbc <USB_HC_Init+0x1c8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8004fb4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004fb8:	617b      	str	r3, [r7, #20]
 8004fba:	e001      	b.n	8004fc0 <USB_HC_Init+0x1cc>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8004fbc:	2300      	movs	r3, #0
 8004fbe:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8004fc0:	787b      	ldrb	r3, [r7, #1]
 8004fc2:	059b      	lsls	r3, r3, #22
 8004fc4:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8004fc8:	78bb      	ldrb	r3, [r7, #2]
 8004fca:	02db      	lsls	r3, r3, #11
 8004fcc:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8004fd0:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8004fd2:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8004fd6:	049b      	lsls	r3, r3, #18
 8004fd8:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8004fdc:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8004fde:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8004fe0:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8004fe4:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8004fe6:	69bb      	ldr	r3, [r7, #24]
 8004fe8:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8004fea:	78fb      	ldrb	r3, [r7, #3]
 8004fec:	0159      	lsls	r1, r3, #5
 8004fee:	693b      	ldr	r3, [r7, #16]
 8004ff0:	440b      	add	r3, r1
 8004ff2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004ff6:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8004ff8:	697b      	ldr	r3, [r7, #20]
 8004ffa:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8004ffc:	600b      	str	r3, [r1, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 8004ffe:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8005002:	2b03      	cmp	r3, #3
 8005004:	d003      	beq.n	800500e <USB_HC_Init+0x21a>
 8005006:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800500a:	2b01      	cmp	r3, #1
 800500c:	d10f      	bne.n	800502e <USB_HC_Init+0x23a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 800500e:	78fb      	ldrb	r3, [r7, #3]
 8005010:	015a      	lsls	r2, r3, #5
 8005012:	693b      	ldr	r3, [r7, #16]
 8005014:	4413      	add	r3, r2
 8005016:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	78fa      	ldrb	r2, [r7, #3]
 800501e:	0151      	lsls	r1, r2, #5
 8005020:	693a      	ldr	r2, [r7, #16]
 8005022:	440a      	add	r2, r1
 8005024:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005028:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800502c:	6013      	str	r3, [r2, #0]
  }

  return ret;
 800502e:	7ffb      	ldrb	r3, [r7, #31]
}
 8005030:	4618      	mov	r0, r3
 8005032:	3720      	adds	r7, #32
 8005034:	46bd      	mov	sp, r7
 8005036:	bd80      	pop	{r7, pc}

08005038 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8005038:	b580      	push	{r7, lr}
 800503a:	b08c      	sub	sp, #48	; 0x30
 800503c:	af02      	add	r7, sp, #8
 800503e:	60f8      	str	r0, [r7, #12]
 8005040:	60b9      	str	r1, [r7, #8]
 8005042:	4613      	mov	r3, r2
 8005044:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 800504a:	68bb      	ldr	r3, [r7, #8]
 800504c:	785b      	ldrb	r3, [r3, #1]
 800504e:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8005050:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005054:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800505a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800505e:	2b00      	cmp	r3, #0
 8005060:	d02d      	beq.n	80050be <USB_HC_StartXfer+0x86>
 8005062:	68bb      	ldr	r3, [r7, #8]
 8005064:	791b      	ldrb	r3, [r3, #4]
 8005066:	2b00      	cmp	r3, #0
 8005068:	d129      	bne.n	80050be <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 800506a:	79fb      	ldrb	r3, [r7, #7]
 800506c:	2b01      	cmp	r3, #1
 800506e:	d117      	bne.n	80050a0 <USB_HC_StartXfer+0x68>
 8005070:	68bb      	ldr	r3, [r7, #8]
 8005072:	79db      	ldrb	r3, [r3, #7]
 8005074:	2b00      	cmp	r3, #0
 8005076:	d003      	beq.n	8005080 <USB_HC_StartXfer+0x48>
 8005078:	68bb      	ldr	r3, [r7, #8]
 800507a:	79db      	ldrb	r3, [r3, #7]
 800507c:	2b02      	cmp	r3, #2
 800507e:	d10f      	bne.n	80050a0 <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8005080:	69fb      	ldr	r3, [r7, #28]
 8005082:	015a      	lsls	r2, r3, #5
 8005084:	6a3b      	ldr	r3, [r7, #32]
 8005086:	4413      	add	r3, r2
 8005088:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800508c:	68db      	ldr	r3, [r3, #12]
 800508e:	69fa      	ldr	r2, [r7, #28]
 8005090:	0151      	lsls	r1, r2, #5
 8005092:	6a3a      	ldr	r2, [r7, #32]
 8005094:	440a      	add	r2, r1
 8005096:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800509a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800509e:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 80050a0:	79fb      	ldrb	r3, [r7, #7]
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d10b      	bne.n	80050be <USB_HC_StartXfer+0x86>
 80050a6:	68bb      	ldr	r3, [r7, #8]
 80050a8:	795b      	ldrb	r3, [r3, #5]
 80050aa:	2b01      	cmp	r3, #1
 80050ac:	d107      	bne.n	80050be <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 80050ae:	68bb      	ldr	r3, [r7, #8]
 80050b0:	785b      	ldrb	r3, [r3, #1]
 80050b2:	4619      	mov	r1, r3
 80050b4:	68f8      	ldr	r0, [r7, #12]
 80050b6:	f000 fa0f 	bl	80054d8 <USB_DoPing>
      return HAL_OK;
 80050ba:	2300      	movs	r3, #0
 80050bc:	e0f8      	b.n	80052b0 <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 80050be:	68bb      	ldr	r3, [r7, #8]
 80050c0:	695b      	ldr	r3, [r3, #20]
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d018      	beq.n	80050f8 <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 80050c6:	68bb      	ldr	r3, [r7, #8]
 80050c8:	695b      	ldr	r3, [r3, #20]
 80050ca:	68ba      	ldr	r2, [r7, #8]
 80050cc:	8912      	ldrh	r2, [r2, #8]
 80050ce:	4413      	add	r3, r2
 80050d0:	3b01      	subs	r3, #1
 80050d2:	68ba      	ldr	r2, [r7, #8]
 80050d4:	8912      	ldrh	r2, [r2, #8]
 80050d6:	fbb3 f3f2 	udiv	r3, r3, r2
 80050da:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 80050dc:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80050de:	8b7b      	ldrh	r3, [r7, #26]
 80050e0:	429a      	cmp	r2, r3
 80050e2:	d90b      	bls.n	80050fc <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 80050e4:	8b7b      	ldrh	r3, [r7, #26]
 80050e6:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80050e8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80050ea:	68ba      	ldr	r2, [r7, #8]
 80050ec:	8912      	ldrh	r2, [r2, #8]
 80050ee:	fb03 f202 	mul.w	r2, r3, r2
 80050f2:	68bb      	ldr	r3, [r7, #8]
 80050f4:	611a      	str	r2, [r3, #16]
 80050f6:	e001      	b.n	80050fc <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 80050f8:	2301      	movs	r3, #1
 80050fa:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 80050fc:	68bb      	ldr	r3, [r7, #8]
 80050fe:	78db      	ldrb	r3, [r3, #3]
 8005100:	2b00      	cmp	r3, #0
 8005102:	d007      	beq.n	8005114 <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8005104:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005106:	68ba      	ldr	r2, [r7, #8]
 8005108:	8912      	ldrh	r2, [r2, #8]
 800510a:	fb03 f202 	mul.w	r2, r3, r2
 800510e:	68bb      	ldr	r3, [r7, #8]
 8005110:	611a      	str	r2, [r3, #16]
 8005112:	e003      	b.n	800511c <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 8005114:	68bb      	ldr	r3, [r7, #8]
 8005116:	695a      	ldr	r2, [r3, #20]
 8005118:	68bb      	ldr	r3, [r7, #8]
 800511a:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800511c:	68bb      	ldr	r3, [r7, #8]
 800511e:	691b      	ldr	r3, [r3, #16]
 8005120:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8005124:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005126:	04d9      	lsls	r1, r3, #19
 8005128:	4b63      	ldr	r3, [pc, #396]	; (80052b8 <USB_HC_StartXfer+0x280>)
 800512a:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800512c:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 800512e:	68bb      	ldr	r3, [r7, #8]
 8005130:	7a9b      	ldrb	r3, [r3, #10]
 8005132:	075b      	lsls	r3, r3, #29
 8005134:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8005138:	69f9      	ldr	r1, [r7, #28]
 800513a:	0148      	lsls	r0, r1, #5
 800513c:	6a39      	ldr	r1, [r7, #32]
 800513e:	4401      	add	r1, r0
 8005140:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8005144:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8005146:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8005148:	79fb      	ldrb	r3, [r7, #7]
 800514a:	2b00      	cmp	r3, #0
 800514c:	d009      	beq.n	8005162 <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 800514e:	68bb      	ldr	r3, [r7, #8]
 8005150:	68d9      	ldr	r1, [r3, #12]
 8005152:	69fb      	ldr	r3, [r7, #28]
 8005154:	015a      	lsls	r2, r3, #5
 8005156:	6a3b      	ldr	r3, [r7, #32]
 8005158:	4413      	add	r3, r2
 800515a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800515e:	460a      	mov	r2, r1
 8005160:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8005162:	6a3b      	ldr	r3, [r7, #32]
 8005164:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005168:	689b      	ldr	r3, [r3, #8]
 800516a:	f003 0301 	and.w	r3, r3, #1
 800516e:	2b00      	cmp	r3, #0
 8005170:	bf0c      	ite	eq
 8005172:	2301      	moveq	r3, #1
 8005174:	2300      	movne	r3, #0
 8005176:	b2db      	uxtb	r3, r3
 8005178:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 800517a:	69fb      	ldr	r3, [r7, #28]
 800517c:	015a      	lsls	r2, r3, #5
 800517e:	6a3b      	ldr	r3, [r7, #32]
 8005180:	4413      	add	r3, r2
 8005182:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	69fa      	ldr	r2, [r7, #28]
 800518a:	0151      	lsls	r1, r2, #5
 800518c:	6a3a      	ldr	r2, [r7, #32]
 800518e:	440a      	add	r2, r1
 8005190:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005194:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8005198:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 800519a:	69fb      	ldr	r3, [r7, #28]
 800519c:	015a      	lsls	r2, r3, #5
 800519e:	6a3b      	ldr	r3, [r7, #32]
 80051a0:	4413      	add	r3, r2
 80051a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80051a6:	681a      	ldr	r2, [r3, #0]
 80051a8:	7e7b      	ldrb	r3, [r7, #25]
 80051aa:	075b      	lsls	r3, r3, #29
 80051ac:	69f9      	ldr	r1, [r7, #28]
 80051ae:	0148      	lsls	r0, r1, #5
 80051b0:	6a39      	ldr	r1, [r7, #32]
 80051b2:	4401      	add	r1, r0
 80051b4:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 80051b8:	4313      	orrs	r3, r2
 80051ba:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 80051bc:	69fb      	ldr	r3, [r7, #28]
 80051be:	015a      	lsls	r2, r3, #5
 80051c0:	6a3b      	ldr	r3, [r7, #32]
 80051c2:	4413      	add	r3, r2
 80051c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80051cc:	693b      	ldr	r3, [r7, #16]
 80051ce:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80051d2:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 80051d4:	68bb      	ldr	r3, [r7, #8]
 80051d6:	78db      	ldrb	r3, [r3, #3]
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d004      	beq.n	80051e6 <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 80051dc:	693b      	ldr	r3, [r7, #16]
 80051de:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80051e2:	613b      	str	r3, [r7, #16]
 80051e4:	e003      	b.n	80051ee <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 80051e6:	693b      	ldr	r3, [r7, #16]
 80051e8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80051ec:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80051ee:	693b      	ldr	r3, [r7, #16]
 80051f0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80051f4:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 80051f6:	69fb      	ldr	r3, [r7, #28]
 80051f8:	015a      	lsls	r2, r3, #5
 80051fa:	6a3b      	ldr	r3, [r7, #32]
 80051fc:	4413      	add	r3, r2
 80051fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005202:	461a      	mov	r2, r3
 8005204:	693b      	ldr	r3, [r7, #16]
 8005206:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8005208:	79fb      	ldrb	r3, [r7, #7]
 800520a:	2b00      	cmp	r3, #0
 800520c:	d001      	beq.n	8005212 <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 800520e:	2300      	movs	r3, #0
 8005210:	e04e      	b.n	80052b0 <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 8005212:	68bb      	ldr	r3, [r7, #8]
 8005214:	78db      	ldrb	r3, [r3, #3]
 8005216:	2b00      	cmp	r3, #0
 8005218:	d149      	bne.n	80052ae <USB_HC_StartXfer+0x276>
 800521a:	68bb      	ldr	r3, [r7, #8]
 800521c:	695b      	ldr	r3, [r3, #20]
 800521e:	2b00      	cmp	r3, #0
 8005220:	d045      	beq.n	80052ae <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 8005222:	68bb      	ldr	r3, [r7, #8]
 8005224:	79db      	ldrb	r3, [r3, #7]
 8005226:	2b03      	cmp	r3, #3
 8005228:	d830      	bhi.n	800528c <USB_HC_StartXfer+0x254>
 800522a:	a201      	add	r2, pc, #4	; (adr r2, 8005230 <USB_HC_StartXfer+0x1f8>)
 800522c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005230:	08005241 	.word	0x08005241
 8005234:	08005265 	.word	0x08005265
 8005238:	08005241 	.word	0x08005241
 800523c:	08005265 	.word	0x08005265
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8005240:	68bb      	ldr	r3, [r7, #8]
 8005242:	695b      	ldr	r3, [r3, #20]
 8005244:	3303      	adds	r3, #3
 8005246:	089b      	lsrs	r3, r3, #2
 8005248:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 800524a:	8afa      	ldrh	r2, [r7, #22]
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005250:	b29b      	uxth	r3, r3
 8005252:	429a      	cmp	r2, r3
 8005254:	d91c      	bls.n	8005290 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	699b      	ldr	r3, [r3, #24]
 800525a:	f043 0220 	orr.w	r2, r3, #32
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	619a      	str	r2, [r3, #24]
        }
        break;
 8005262:	e015      	b.n	8005290 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8005264:	68bb      	ldr	r3, [r7, #8]
 8005266:	695b      	ldr	r3, [r3, #20]
 8005268:	3303      	adds	r3, #3
 800526a:	089b      	lsrs	r3, r3, #2
 800526c:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 800526e:	8afa      	ldrh	r2, [r7, #22]
 8005270:	6a3b      	ldr	r3, [r7, #32]
 8005272:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005276:	691b      	ldr	r3, [r3, #16]
 8005278:	b29b      	uxth	r3, r3
 800527a:	429a      	cmp	r2, r3
 800527c:	d90a      	bls.n	8005294 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	699b      	ldr	r3, [r3, #24]
 8005282:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	619a      	str	r2, [r3, #24]
        }
        break;
 800528a:	e003      	b.n	8005294 <USB_HC_StartXfer+0x25c>

      default:
        break;
 800528c:	bf00      	nop
 800528e:	e002      	b.n	8005296 <USB_HC_StartXfer+0x25e>
        break;
 8005290:	bf00      	nop
 8005292:	e000      	b.n	8005296 <USB_HC_StartXfer+0x25e>
        break;
 8005294:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8005296:	68bb      	ldr	r3, [r7, #8]
 8005298:	68d9      	ldr	r1, [r3, #12]
 800529a:	68bb      	ldr	r3, [r7, #8]
 800529c:	785a      	ldrb	r2, [r3, #1]
 800529e:	68bb      	ldr	r3, [r7, #8]
 80052a0:	695b      	ldr	r3, [r3, #20]
 80052a2:	b29b      	uxth	r3, r3
 80052a4:	2000      	movs	r0, #0
 80052a6:	9000      	str	r0, [sp, #0]
 80052a8:	68f8      	ldr	r0, [r7, #12]
 80052aa:	f7ff fb31 	bl	8004910 <USB_WritePacket>
  }

  return HAL_OK;
 80052ae:	2300      	movs	r3, #0
}
 80052b0:	4618      	mov	r0, r3
 80052b2:	3728      	adds	r7, #40	; 0x28
 80052b4:	46bd      	mov	sp, r7
 80052b6:	bd80      	pop	{r7, pc}
 80052b8:	1ff80000 	.word	0x1ff80000

080052bc <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80052bc:	b480      	push	{r7}
 80052be:	b085      	sub	sp, #20
 80052c0:	af00      	add	r7, sp, #0
 80052c2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80052ce:	695b      	ldr	r3, [r3, #20]
 80052d0:	b29b      	uxth	r3, r3
}
 80052d2:	4618      	mov	r0, r3
 80052d4:	3714      	adds	r7, #20
 80052d6:	46bd      	mov	sp, r7
 80052d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052dc:	4770      	bx	lr

080052de <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 80052de:	b480      	push	{r7}
 80052e0:	b089      	sub	sp, #36	; 0x24
 80052e2:	af00      	add	r7, sp, #0
 80052e4:	6078      	str	r0, [r7, #4]
 80052e6:	460b      	mov	r3, r1
 80052e8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 80052ee:	78fb      	ldrb	r3, [r7, #3]
 80052f0:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 80052f2:	2300      	movs	r3, #0
 80052f4:	60fb      	str	r3, [r7, #12]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 80052f6:	69bb      	ldr	r3, [r7, #24]
 80052f8:	015a      	lsls	r2, r3, #5
 80052fa:	69fb      	ldr	r3, [r7, #28]
 80052fc:	4413      	add	r3, r2
 80052fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	0c9b      	lsrs	r3, r3, #18
 8005306:	f003 0303 	and.w	r3, r3, #3
 800530a:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 800530c:	69bb      	ldr	r3, [r7, #24]
 800530e:	015a      	lsls	r2, r3, #5
 8005310:	69fb      	ldr	r3, [r7, #28]
 8005312:	4413      	add	r3, r2
 8005314:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	0fdb      	lsrs	r3, r3, #31
 800531c:	f003 0301 	and.w	r3, r3, #1
 8005320:	613b      	str	r3, [r7, #16]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	689b      	ldr	r3, [r3, #8]
 8005326:	f003 0320 	and.w	r3, r3, #32
 800532a:	2b20      	cmp	r3, #32
 800532c:	d104      	bne.n	8005338 <USB_HC_Halt+0x5a>
 800532e:	693b      	ldr	r3, [r7, #16]
 8005330:	2b00      	cmp	r3, #0
 8005332:	d101      	bne.n	8005338 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 8005334:	2300      	movs	r3, #0
 8005336:	e0c8      	b.n	80054ca <USB_HC_Halt+0x1ec>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8005338:	697b      	ldr	r3, [r7, #20]
 800533a:	2b00      	cmp	r3, #0
 800533c:	d002      	beq.n	8005344 <USB_HC_Halt+0x66>
 800533e:	697b      	ldr	r3, [r7, #20]
 8005340:	2b02      	cmp	r3, #2
 8005342:	d163      	bne.n	800540c <USB_HC_Halt+0x12e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8005344:	69bb      	ldr	r3, [r7, #24]
 8005346:	015a      	lsls	r2, r3, #5
 8005348:	69fb      	ldr	r3, [r7, #28]
 800534a:	4413      	add	r3, r2
 800534c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	69ba      	ldr	r2, [r7, #24]
 8005354:	0151      	lsls	r1, r2, #5
 8005356:	69fa      	ldr	r2, [r7, #28]
 8005358:	440a      	add	r2, r1
 800535a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800535e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005362:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	689b      	ldr	r3, [r3, #8]
 8005368:	f003 0320 	and.w	r3, r3, #32
 800536c:	2b00      	cmp	r3, #0
 800536e:	f040 80ab 	bne.w	80054c8 <USB_HC_Halt+0x1ea>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005376:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800537a:	2b00      	cmp	r3, #0
 800537c:	d133      	bne.n	80053e6 <USB_HC_Halt+0x108>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800537e:	69bb      	ldr	r3, [r7, #24]
 8005380:	015a      	lsls	r2, r3, #5
 8005382:	69fb      	ldr	r3, [r7, #28]
 8005384:	4413      	add	r3, r2
 8005386:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	69ba      	ldr	r2, [r7, #24]
 800538e:	0151      	lsls	r1, r2, #5
 8005390:	69fa      	ldr	r2, [r7, #28]
 8005392:	440a      	add	r2, r1
 8005394:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005398:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800539c:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800539e:	69bb      	ldr	r3, [r7, #24]
 80053a0:	015a      	lsls	r2, r3, #5
 80053a2:	69fb      	ldr	r3, [r7, #28]
 80053a4:	4413      	add	r3, r2
 80053a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	69ba      	ldr	r2, [r7, #24]
 80053ae:	0151      	lsls	r1, r2, #5
 80053b0:	69fa      	ldr	r2, [r7, #28]
 80053b2:	440a      	add	r2, r1
 80053b4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80053b8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80053bc:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	3301      	adds	r3, #1
 80053c2:	60fb      	str	r3, [r7, #12]

          if (count > 1000U)
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80053ca:	d81d      	bhi.n	8005408 <USB_HC_Halt+0x12a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80053cc:	69bb      	ldr	r3, [r7, #24]
 80053ce:	015a      	lsls	r2, r3, #5
 80053d0:	69fb      	ldr	r3, [r7, #28]
 80053d2:	4413      	add	r3, r2
 80053d4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80053de:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80053e2:	d0ec      	beq.n	80053be <USB_HC_Halt+0xe0>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80053e4:	e070      	b.n	80054c8 <USB_HC_Halt+0x1ea>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80053e6:	69bb      	ldr	r3, [r7, #24]
 80053e8:	015a      	lsls	r2, r3, #5
 80053ea:	69fb      	ldr	r3, [r7, #28]
 80053ec:	4413      	add	r3, r2
 80053ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	69ba      	ldr	r2, [r7, #24]
 80053f6:	0151      	lsls	r1, r2, #5
 80053f8:	69fa      	ldr	r2, [r7, #28]
 80053fa:	440a      	add	r2, r1
 80053fc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005400:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005404:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005406:	e05f      	b.n	80054c8 <USB_HC_Halt+0x1ea>
            break;
 8005408:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800540a:	e05d      	b.n	80054c8 <USB_HC_Halt+0x1ea>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800540c:	69bb      	ldr	r3, [r7, #24]
 800540e:	015a      	lsls	r2, r3, #5
 8005410:	69fb      	ldr	r3, [r7, #28]
 8005412:	4413      	add	r3, r2
 8005414:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	69ba      	ldr	r2, [r7, #24]
 800541c:	0151      	lsls	r1, r2, #5
 800541e:	69fa      	ldr	r2, [r7, #28]
 8005420:	440a      	add	r2, r1
 8005422:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005426:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800542a:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 800542c:	69fb      	ldr	r3, [r7, #28]
 800542e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005432:	691b      	ldr	r3, [r3, #16]
 8005434:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005438:	2b00      	cmp	r3, #0
 800543a:	d133      	bne.n	80054a4 <USB_HC_Halt+0x1c6>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800543c:	69bb      	ldr	r3, [r7, #24]
 800543e:	015a      	lsls	r2, r3, #5
 8005440:	69fb      	ldr	r3, [r7, #28]
 8005442:	4413      	add	r3, r2
 8005444:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	69ba      	ldr	r2, [r7, #24]
 800544c:	0151      	lsls	r1, r2, #5
 800544e:	69fa      	ldr	r2, [r7, #28]
 8005450:	440a      	add	r2, r1
 8005452:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005456:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800545a:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800545c:	69bb      	ldr	r3, [r7, #24]
 800545e:	015a      	lsls	r2, r3, #5
 8005460:	69fb      	ldr	r3, [r7, #28]
 8005462:	4413      	add	r3, r2
 8005464:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	69ba      	ldr	r2, [r7, #24]
 800546c:	0151      	lsls	r1, r2, #5
 800546e:	69fa      	ldr	r2, [r7, #28]
 8005470:	440a      	add	r2, r1
 8005472:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005476:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800547a:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	3301      	adds	r3, #1
 8005480:	60fb      	str	r3, [r7, #12]

        if (count > 1000U)
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005488:	d81d      	bhi.n	80054c6 <USB_HC_Halt+0x1e8>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800548a:	69bb      	ldr	r3, [r7, #24]
 800548c:	015a      	lsls	r2, r3, #5
 800548e:	69fb      	ldr	r3, [r7, #28]
 8005490:	4413      	add	r3, r2
 8005492:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800549c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80054a0:	d0ec      	beq.n	800547c <USB_HC_Halt+0x19e>
 80054a2:	e011      	b.n	80054c8 <USB_HC_Halt+0x1ea>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80054a4:	69bb      	ldr	r3, [r7, #24]
 80054a6:	015a      	lsls	r2, r3, #5
 80054a8:	69fb      	ldr	r3, [r7, #28]
 80054aa:	4413      	add	r3, r2
 80054ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	69ba      	ldr	r2, [r7, #24]
 80054b4:	0151      	lsls	r1, r2, #5
 80054b6:	69fa      	ldr	r2, [r7, #28]
 80054b8:	440a      	add	r2, r1
 80054ba:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80054be:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80054c2:	6013      	str	r3, [r2, #0]
 80054c4:	e000      	b.n	80054c8 <USB_HC_Halt+0x1ea>
          break;
 80054c6:	bf00      	nop
    }
  }

  return HAL_OK;
 80054c8:	2300      	movs	r3, #0
}
 80054ca:	4618      	mov	r0, r3
 80054cc:	3724      	adds	r7, #36	; 0x24
 80054ce:	46bd      	mov	sp, r7
 80054d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054d4:	4770      	bx	lr
	...

080054d8 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 80054d8:	b480      	push	{r7}
 80054da:	b087      	sub	sp, #28
 80054dc:	af00      	add	r7, sp, #0
 80054de:	6078      	str	r0, [r7, #4]
 80054e0:	460b      	mov	r3, r1
 80054e2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 80054e8:	78fb      	ldrb	r3, [r7, #3]
 80054ea:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 80054ec:	2301      	movs	r3, #1
 80054ee:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	04da      	lsls	r2, r3, #19
 80054f4:	4b15      	ldr	r3, [pc, #84]	; (800554c <USB_DoPing+0x74>)
 80054f6:	4013      	ands	r3, r2
 80054f8:	693a      	ldr	r2, [r7, #16]
 80054fa:	0151      	lsls	r1, r2, #5
 80054fc:	697a      	ldr	r2, [r7, #20]
 80054fe:	440a      	add	r2, r1
 8005500:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005504:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005508:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 800550a:	693b      	ldr	r3, [r7, #16]
 800550c:	015a      	lsls	r2, r3, #5
 800550e:	697b      	ldr	r3, [r7, #20]
 8005510:	4413      	add	r3, r2
 8005512:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800551a:	68bb      	ldr	r3, [r7, #8]
 800551c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005520:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005522:	68bb      	ldr	r3, [r7, #8]
 8005524:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005528:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 800552a:	693b      	ldr	r3, [r7, #16]
 800552c:	015a      	lsls	r2, r3, #5
 800552e:	697b      	ldr	r3, [r7, #20]
 8005530:	4413      	add	r3, r2
 8005532:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005536:	461a      	mov	r2, r3
 8005538:	68bb      	ldr	r3, [r7, #8]
 800553a:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 800553c:	2300      	movs	r3, #0
}
 800553e:	4618      	mov	r0, r3
 8005540:	371c      	adds	r7, #28
 8005542:	46bd      	mov	sp, r7
 8005544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005548:	4770      	bx	lr
 800554a:	bf00      	nop
 800554c:	1ff80000 	.word	0x1ff80000

08005550 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8005550:	b580      	push	{r7, lr}
 8005552:	b088      	sub	sp, #32
 8005554:	af00      	add	r7, sp, #0
 8005556:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8005558:	2300      	movs	r3, #0
 800555a:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 8005560:	2300      	movs	r3, #0
 8005562:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8005564:	6878      	ldr	r0, [r7, #4]
 8005566:	f7ff f912 	bl	800478e <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800556a:	2110      	movs	r1, #16
 800556c:	6878      	ldr	r0, [r7, #4]
 800556e:	f7ff f96b 	bl	8004848 <USB_FlushTxFifo>
 8005572:	4603      	mov	r3, r0
 8005574:	2b00      	cmp	r3, #0
 8005576:	d001      	beq.n	800557c <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 8005578:	2301      	movs	r3, #1
 800557a:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800557c:	6878      	ldr	r0, [r7, #4]
 800557e:	f7ff f997 	bl	80048b0 <USB_FlushRxFifo>
 8005582:	4603      	mov	r3, r0
 8005584:	2b00      	cmp	r3, #0
 8005586:	d001      	beq.n	800558c <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 8005588:	2301      	movs	r3, #1
 800558a:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 800558c:	2300      	movs	r3, #0
 800558e:	61bb      	str	r3, [r7, #24]
 8005590:	e01f      	b.n	80055d2 <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 8005592:	69bb      	ldr	r3, [r7, #24]
 8005594:	015a      	lsls	r2, r3, #5
 8005596:	697b      	ldr	r3, [r7, #20]
 8005598:	4413      	add	r3, r2
 800559a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 80055a2:	693b      	ldr	r3, [r7, #16]
 80055a4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80055a8:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 80055aa:	693b      	ldr	r3, [r7, #16]
 80055ac:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80055b0:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80055b2:	693b      	ldr	r3, [r7, #16]
 80055b4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80055b8:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 80055ba:	69bb      	ldr	r3, [r7, #24]
 80055bc:	015a      	lsls	r2, r3, #5
 80055be:	697b      	ldr	r3, [r7, #20]
 80055c0:	4413      	add	r3, r2
 80055c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80055c6:	461a      	mov	r2, r3
 80055c8:	693b      	ldr	r3, [r7, #16]
 80055ca:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 80055cc:	69bb      	ldr	r3, [r7, #24]
 80055ce:	3301      	adds	r3, #1
 80055d0:	61bb      	str	r3, [r7, #24]
 80055d2:	69bb      	ldr	r3, [r7, #24]
 80055d4:	2b0f      	cmp	r3, #15
 80055d6:	d9dc      	bls.n	8005592 <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 80055d8:	2300      	movs	r3, #0
 80055da:	61bb      	str	r3, [r7, #24]
 80055dc:	e034      	b.n	8005648 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 80055de:	69bb      	ldr	r3, [r7, #24]
 80055e0:	015a      	lsls	r2, r3, #5
 80055e2:	697b      	ldr	r3, [r7, #20]
 80055e4:	4413      	add	r3, r2
 80055e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 80055ee:	693b      	ldr	r3, [r7, #16]
 80055f0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80055f4:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 80055f6:	693b      	ldr	r3, [r7, #16]
 80055f8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80055fc:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80055fe:	693b      	ldr	r3, [r7, #16]
 8005600:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005604:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8005606:	69bb      	ldr	r3, [r7, #24]
 8005608:	015a      	lsls	r2, r3, #5
 800560a:	697b      	ldr	r3, [r7, #20]
 800560c:	4413      	add	r3, r2
 800560e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005612:	461a      	mov	r2, r3
 8005614:	693b      	ldr	r3, [r7, #16]
 8005616:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	3301      	adds	r3, #1
 800561c:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005624:	d80c      	bhi.n	8005640 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8005626:	69bb      	ldr	r3, [r7, #24]
 8005628:	015a      	lsls	r2, r3, #5
 800562a:	697b      	ldr	r3, [r7, #20]
 800562c:	4413      	add	r3, r2
 800562e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005638:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800563c:	d0ec      	beq.n	8005618 <USB_StopHost+0xc8>
 800563e:	e000      	b.n	8005642 <USB_StopHost+0xf2>
        break;
 8005640:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8005642:	69bb      	ldr	r3, [r7, #24]
 8005644:	3301      	adds	r3, #1
 8005646:	61bb      	str	r3, [r7, #24]
 8005648:	69bb      	ldr	r3, [r7, #24]
 800564a:	2b0f      	cmp	r3, #15
 800564c:	d9c7      	bls.n	80055de <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 800564e:	697b      	ldr	r3, [r7, #20]
 8005650:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005654:	461a      	mov	r2, r3
 8005656:	f04f 33ff 	mov.w	r3, #4294967295
 800565a:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	f04f 32ff 	mov.w	r2, #4294967295
 8005662:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8005664:	6878      	ldr	r0, [r7, #4]
 8005666:	f7ff f881 	bl	800476c <USB_EnableGlobalInt>

  return ret;
 800566a:	7ffb      	ldrb	r3, [r7, #31]
}
 800566c:	4618      	mov	r0, r3
 800566e:	3720      	adds	r7, #32
 8005670:	46bd      	mov	sp, r7
 8005672:	bd80      	pop	{r7, pc}

08005674 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8005674:	b590      	push	{r4, r7, lr}
 8005676:	b089      	sub	sp, #36	; 0x24
 8005678:	af04      	add	r7, sp, #16
 800567a:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 800567c:	2301      	movs	r3, #1
 800567e:	2202      	movs	r2, #2
 8005680:	2102      	movs	r1, #2
 8005682:	6878      	ldr	r0, [r7, #4]
 8005684:	f000 fc66 	bl	8005f54 <USBH_FindInterface>
 8005688:	4603      	mov	r3, r0
 800568a:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800568c:	7bfb      	ldrb	r3, [r7, #15]
 800568e:	2bff      	cmp	r3, #255	; 0xff
 8005690:	d002      	beq.n	8005698 <USBH_CDC_InterfaceInit+0x24>
 8005692:	7bfb      	ldrb	r3, [r7, #15]
 8005694:	2b01      	cmp	r3, #1
 8005696:	d901      	bls.n	800569c <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8005698:	2302      	movs	r3, #2
 800569a:	e13d      	b.n	8005918 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 800569c:	7bfb      	ldrb	r3, [r7, #15]
 800569e:	4619      	mov	r1, r3
 80056a0:	6878      	ldr	r0, [r7, #4]
 80056a2:	f000 fc3b 	bl	8005f1c <USBH_SelectInterface>
 80056a6:	4603      	mov	r3, r0
 80056a8:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 80056aa:	7bbb      	ldrb	r3, [r7, #14]
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d001      	beq.n	80056b4 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 80056b0:	2302      	movs	r3, #2
 80056b2:	e131      	b.n	8005918 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 80056ba:	2050      	movs	r0, #80	; 0x50
 80056bc:	f002 fafa 	bl	8007cb4 <malloc>
 80056c0:	4603      	mov	r3, r0
 80056c2:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80056ca:	69db      	ldr	r3, [r3, #28]
 80056cc:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 80056ce:	68bb      	ldr	r3, [r7, #8]
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d101      	bne.n	80056d8 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 80056d4:	2302      	movs	r3, #2
 80056d6:	e11f      	b.n	8005918 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 80056d8:	2250      	movs	r2, #80	; 0x50
 80056da:	2100      	movs	r1, #0
 80056dc:	68b8      	ldr	r0, [r7, #8]
 80056de:	f002 faf9 	bl	8007cd4 <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 80056e2:	7bfb      	ldrb	r3, [r7, #15]
 80056e4:	687a      	ldr	r2, [r7, #4]
 80056e6:	211a      	movs	r1, #26
 80056e8:	fb01 f303 	mul.w	r3, r1, r3
 80056ec:	4413      	add	r3, r2
 80056ee:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80056f2:	781b      	ldrb	r3, [r3, #0]
 80056f4:	b25b      	sxtb	r3, r3
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	da15      	bge.n	8005726 <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80056fa:	7bfb      	ldrb	r3, [r7, #15]
 80056fc:	687a      	ldr	r2, [r7, #4]
 80056fe:	211a      	movs	r1, #26
 8005700:	fb01 f303 	mul.w	r3, r1, r3
 8005704:	4413      	add	r3, r2
 8005706:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800570a:	781a      	ldrb	r2, [r3, #0]
 800570c:	68bb      	ldr	r3, [r7, #8]
 800570e:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8005710:	7bfb      	ldrb	r3, [r7, #15]
 8005712:	687a      	ldr	r2, [r7, #4]
 8005714:	211a      	movs	r1, #26
 8005716:	fb01 f303 	mul.w	r3, r1, r3
 800571a:	4413      	add	r3, r2
 800571c:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8005720:	881a      	ldrh	r2, [r3, #0]
 8005722:	68bb      	ldr	r3, [r7, #8]
 8005724:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 8005726:	68bb      	ldr	r3, [r7, #8]
 8005728:	785b      	ldrb	r3, [r3, #1]
 800572a:	4619      	mov	r1, r3
 800572c:	6878      	ldr	r0, [r7, #4]
 800572e:	f001 ff2c 	bl	800758a <USBH_AllocPipe>
 8005732:	4603      	mov	r3, r0
 8005734:	461a      	mov	r2, r3
 8005736:	68bb      	ldr	r3, [r7, #8]
 8005738:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 800573a:	68bb      	ldr	r3, [r7, #8]
 800573c:	7819      	ldrb	r1, [r3, #0]
 800573e:	68bb      	ldr	r3, [r7, #8]
 8005740:	7858      	ldrb	r0, [r3, #1]
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800574e:	68ba      	ldr	r2, [r7, #8]
 8005750:	8952      	ldrh	r2, [r2, #10]
 8005752:	9202      	str	r2, [sp, #8]
 8005754:	2203      	movs	r2, #3
 8005756:	9201      	str	r2, [sp, #4]
 8005758:	9300      	str	r3, [sp, #0]
 800575a:	4623      	mov	r3, r4
 800575c:	4602      	mov	r2, r0
 800575e:	6878      	ldr	r0, [r7, #4]
 8005760:	f001 fee4 	bl	800752c <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8005764:	68bb      	ldr	r3, [r7, #8]
 8005766:	781b      	ldrb	r3, [r3, #0]
 8005768:	2200      	movs	r2, #0
 800576a:	4619      	mov	r1, r3
 800576c:	6878      	ldr	r0, [r7, #4]
 800576e:	f002 f9f3 	bl	8007b58 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 8005772:	2300      	movs	r3, #0
 8005774:	2200      	movs	r2, #0
 8005776:	210a      	movs	r1, #10
 8005778:	6878      	ldr	r0, [r7, #4]
 800577a:	f000 fbeb 	bl	8005f54 <USBH_FindInterface>
 800577e:	4603      	mov	r3, r0
 8005780:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8005782:	7bfb      	ldrb	r3, [r7, #15]
 8005784:	2bff      	cmp	r3, #255	; 0xff
 8005786:	d002      	beq.n	800578e <USBH_CDC_InterfaceInit+0x11a>
 8005788:	7bfb      	ldrb	r3, [r7, #15]
 800578a:	2b01      	cmp	r3, #1
 800578c:	d901      	bls.n	8005792 <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800578e:	2302      	movs	r3, #2
 8005790:	e0c2      	b.n	8005918 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8005792:	7bfb      	ldrb	r3, [r7, #15]
 8005794:	687a      	ldr	r2, [r7, #4]
 8005796:	211a      	movs	r1, #26
 8005798:	fb01 f303 	mul.w	r3, r1, r3
 800579c:	4413      	add	r3, r2
 800579e:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80057a2:	781b      	ldrb	r3, [r3, #0]
 80057a4:	b25b      	sxtb	r3, r3
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	da16      	bge.n	80057d8 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80057aa:	7bfb      	ldrb	r3, [r7, #15]
 80057ac:	687a      	ldr	r2, [r7, #4]
 80057ae:	211a      	movs	r1, #26
 80057b0:	fb01 f303 	mul.w	r3, r1, r3
 80057b4:	4413      	add	r3, r2
 80057b6:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80057ba:	781a      	ldrb	r2, [r3, #0]
 80057bc:	68bb      	ldr	r3, [r7, #8]
 80057be:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80057c0:	7bfb      	ldrb	r3, [r7, #15]
 80057c2:	687a      	ldr	r2, [r7, #4]
 80057c4:	211a      	movs	r1, #26
 80057c6:	fb01 f303 	mul.w	r3, r1, r3
 80057ca:	4413      	add	r3, r2
 80057cc:	f503 7354 	add.w	r3, r3, #848	; 0x350
 80057d0:	881a      	ldrh	r2, [r3, #0]
 80057d2:	68bb      	ldr	r3, [r7, #8]
 80057d4:	835a      	strh	r2, [r3, #26]
 80057d6:	e015      	b.n	8005804 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80057d8:	7bfb      	ldrb	r3, [r7, #15]
 80057da:	687a      	ldr	r2, [r7, #4]
 80057dc:	211a      	movs	r1, #26
 80057de:	fb01 f303 	mul.w	r3, r1, r3
 80057e2:	4413      	add	r3, r2
 80057e4:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80057e8:	781a      	ldrb	r2, [r3, #0]
 80057ea:	68bb      	ldr	r3, [r7, #8]
 80057ec:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80057ee:	7bfb      	ldrb	r3, [r7, #15]
 80057f0:	687a      	ldr	r2, [r7, #4]
 80057f2:	211a      	movs	r1, #26
 80057f4:	fb01 f303 	mul.w	r3, r1, r3
 80057f8:	4413      	add	r3, r2
 80057fa:	f503 7354 	add.w	r3, r3, #848	; 0x350
 80057fe:	881a      	ldrh	r2, [r3, #0]
 8005800:	68bb      	ldr	r3, [r7, #8]
 8005802:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 8005804:	7bfb      	ldrb	r3, [r7, #15]
 8005806:	687a      	ldr	r2, [r7, #4]
 8005808:	211a      	movs	r1, #26
 800580a:	fb01 f303 	mul.w	r3, r1, r3
 800580e:	4413      	add	r3, r2
 8005810:	f203 3356 	addw	r3, r3, #854	; 0x356
 8005814:	781b      	ldrb	r3, [r3, #0]
 8005816:	b25b      	sxtb	r3, r3
 8005818:	2b00      	cmp	r3, #0
 800581a:	da16      	bge.n	800584a <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800581c:	7bfb      	ldrb	r3, [r7, #15]
 800581e:	687a      	ldr	r2, [r7, #4]
 8005820:	211a      	movs	r1, #26
 8005822:	fb01 f303 	mul.w	r3, r1, r3
 8005826:	4413      	add	r3, r2
 8005828:	f203 3356 	addw	r3, r3, #854	; 0x356
 800582c:	781a      	ldrb	r2, [r3, #0]
 800582e:	68bb      	ldr	r3, [r7, #8]
 8005830:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8005832:	7bfb      	ldrb	r3, [r7, #15]
 8005834:	687a      	ldr	r2, [r7, #4]
 8005836:	211a      	movs	r1, #26
 8005838:	fb01 f303 	mul.w	r3, r1, r3
 800583c:	4413      	add	r3, r2
 800583e:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8005842:	881a      	ldrh	r2, [r3, #0]
 8005844:	68bb      	ldr	r3, [r7, #8]
 8005846:	835a      	strh	r2, [r3, #26]
 8005848:	e015      	b.n	8005876 <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800584a:	7bfb      	ldrb	r3, [r7, #15]
 800584c:	687a      	ldr	r2, [r7, #4]
 800584e:	211a      	movs	r1, #26
 8005850:	fb01 f303 	mul.w	r3, r1, r3
 8005854:	4413      	add	r3, r2
 8005856:	f203 3356 	addw	r3, r3, #854	; 0x356
 800585a:	781a      	ldrb	r2, [r3, #0]
 800585c:	68bb      	ldr	r3, [r7, #8]
 800585e:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8005860:	7bfb      	ldrb	r3, [r7, #15]
 8005862:	687a      	ldr	r2, [r7, #4]
 8005864:	211a      	movs	r1, #26
 8005866:	fb01 f303 	mul.w	r3, r1, r3
 800586a:	4413      	add	r3, r2
 800586c:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8005870:	881a      	ldrh	r2, [r3, #0]
 8005872:	68bb      	ldr	r3, [r7, #8]
 8005874:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 8005876:	68bb      	ldr	r3, [r7, #8]
 8005878:	7b9b      	ldrb	r3, [r3, #14]
 800587a:	4619      	mov	r1, r3
 800587c:	6878      	ldr	r0, [r7, #4]
 800587e:	f001 fe84 	bl	800758a <USBH_AllocPipe>
 8005882:	4603      	mov	r3, r0
 8005884:	461a      	mov	r2, r3
 8005886:	68bb      	ldr	r3, [r7, #8]
 8005888:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 800588a:	68bb      	ldr	r3, [r7, #8]
 800588c:	7bdb      	ldrb	r3, [r3, #15]
 800588e:	4619      	mov	r1, r3
 8005890:	6878      	ldr	r0, [r7, #4]
 8005892:	f001 fe7a 	bl	800758a <USBH_AllocPipe>
 8005896:	4603      	mov	r3, r0
 8005898:	461a      	mov	r2, r3
 800589a:	68bb      	ldr	r3, [r7, #8]
 800589c:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 800589e:	68bb      	ldr	r3, [r7, #8]
 80058a0:	7b59      	ldrb	r1, [r3, #13]
 80058a2:	68bb      	ldr	r3, [r7, #8]
 80058a4:	7b98      	ldrb	r0, [r3, #14]
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80058b2:	68ba      	ldr	r2, [r7, #8]
 80058b4:	8b12      	ldrh	r2, [r2, #24]
 80058b6:	9202      	str	r2, [sp, #8]
 80058b8:	2202      	movs	r2, #2
 80058ba:	9201      	str	r2, [sp, #4]
 80058bc:	9300      	str	r3, [sp, #0]
 80058be:	4623      	mov	r3, r4
 80058c0:	4602      	mov	r2, r0
 80058c2:	6878      	ldr	r0, [r7, #4]
 80058c4:	f001 fe32 	bl	800752c <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 80058c8:	68bb      	ldr	r3, [r7, #8]
 80058ca:	7b19      	ldrb	r1, [r3, #12]
 80058cc:	68bb      	ldr	r3, [r7, #8]
 80058ce:	7bd8      	ldrb	r0, [r3, #15]
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80058dc:	68ba      	ldr	r2, [r7, #8]
 80058de:	8b52      	ldrh	r2, [r2, #26]
 80058e0:	9202      	str	r2, [sp, #8]
 80058e2:	2202      	movs	r2, #2
 80058e4:	9201      	str	r2, [sp, #4]
 80058e6:	9300      	str	r3, [sp, #0]
 80058e8:	4623      	mov	r3, r4
 80058ea:	4602      	mov	r2, r0
 80058ec:	6878      	ldr	r0, [r7, #4]
 80058ee:	f001 fe1d 	bl	800752c <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 80058f2:	68bb      	ldr	r3, [r7, #8]
 80058f4:	2200      	movs	r2, #0
 80058f6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 80058fa:	68bb      	ldr	r3, [r7, #8]
 80058fc:	7b5b      	ldrb	r3, [r3, #13]
 80058fe:	2200      	movs	r2, #0
 8005900:	4619      	mov	r1, r3
 8005902:	6878      	ldr	r0, [r7, #4]
 8005904:	f002 f928 	bl	8007b58 <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 8005908:	68bb      	ldr	r3, [r7, #8]
 800590a:	7b1b      	ldrb	r3, [r3, #12]
 800590c:	2200      	movs	r2, #0
 800590e:	4619      	mov	r1, r3
 8005910:	6878      	ldr	r0, [r7, #4]
 8005912:	f002 f921 	bl	8007b58 <USBH_LL_SetToggle>

  return USBH_OK;
 8005916:	2300      	movs	r3, #0
}
 8005918:	4618      	mov	r0, r3
 800591a:	3714      	adds	r7, #20
 800591c:	46bd      	mov	sp, r7
 800591e:	bd90      	pop	{r4, r7, pc}

08005920 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8005920:	b580      	push	{r7, lr}
 8005922:	b084      	sub	sp, #16
 8005924:	af00      	add	r7, sp, #0
 8005926:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800592e:	69db      	ldr	r3, [r3, #28]
 8005930:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	781b      	ldrb	r3, [r3, #0]
 8005936:	2b00      	cmp	r3, #0
 8005938:	d00e      	beq.n	8005958 <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	781b      	ldrb	r3, [r3, #0]
 800593e:	4619      	mov	r1, r3
 8005940:	6878      	ldr	r0, [r7, #4]
 8005942:	f001 fe12 	bl	800756a <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	781b      	ldrb	r3, [r3, #0]
 800594a:	4619      	mov	r1, r3
 800594c:	6878      	ldr	r0, [r7, #4]
 800594e:	f001 fe3d 	bl	80075cc <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	2200      	movs	r2, #0
 8005956:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	7b1b      	ldrb	r3, [r3, #12]
 800595c:	2b00      	cmp	r3, #0
 800595e:	d00e      	beq.n	800597e <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	7b1b      	ldrb	r3, [r3, #12]
 8005964:	4619      	mov	r1, r3
 8005966:	6878      	ldr	r0, [r7, #4]
 8005968:	f001 fdff 	bl	800756a <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	7b1b      	ldrb	r3, [r3, #12]
 8005970:	4619      	mov	r1, r3
 8005972:	6878      	ldr	r0, [r7, #4]
 8005974:	f001 fe2a 	bl	80075cc <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	2200      	movs	r2, #0
 800597c:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	7b5b      	ldrb	r3, [r3, #13]
 8005982:	2b00      	cmp	r3, #0
 8005984:	d00e      	beq.n	80059a4 <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	7b5b      	ldrb	r3, [r3, #13]
 800598a:	4619      	mov	r1, r3
 800598c:	6878      	ldr	r0, [r7, #4]
 800598e:	f001 fdec 	bl	800756a <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	7b5b      	ldrb	r3, [r3, #13]
 8005996:	4619      	mov	r1, r3
 8005998:	6878      	ldr	r0, [r7, #4]
 800599a:	f001 fe17 	bl	80075cc <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	2200      	movs	r2, #0
 80059a2:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80059aa:	69db      	ldr	r3, [r3, #28]
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d00b      	beq.n	80059c8 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80059b6:	69db      	ldr	r3, [r3, #28]
 80059b8:	4618      	mov	r0, r3
 80059ba:	f002 f983 	bl	8007cc4 <free>
    phost->pActiveClass->pData = 0U;
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80059c4:	2200      	movs	r2, #0
 80059c6:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 80059c8:	2300      	movs	r3, #0
}
 80059ca:	4618      	mov	r0, r3
 80059cc:	3710      	adds	r7, #16
 80059ce:	46bd      	mov	sp, r7
 80059d0:	bd80      	pop	{r7, pc}

080059d2 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 80059d2:	b580      	push	{r7, lr}
 80059d4:	b084      	sub	sp, #16
 80059d6:	af00      	add	r7, sp, #0
 80059d8:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80059e0:	69db      	ldr	r3, [r3, #28]
 80059e2:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	3340      	adds	r3, #64	; 0x40
 80059e8:	4619      	mov	r1, r3
 80059ea:	6878      	ldr	r0, [r7, #4]
 80059ec:	f000 f8b1 	bl	8005b52 <GetLineCoding>
 80059f0:	4603      	mov	r3, r0
 80059f2:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 80059f4:	7afb      	ldrb	r3, [r7, #11]
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d105      	bne.n	8005a06 <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8005a00:	2102      	movs	r1, #2
 8005a02:	6878      	ldr	r0, [r7, #4]
 8005a04:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 8005a06:	7afb      	ldrb	r3, [r7, #11]
}
 8005a08:	4618      	mov	r0, r3
 8005a0a:	3710      	adds	r7, #16
 8005a0c:	46bd      	mov	sp, r7
 8005a0e:	bd80      	pop	{r7, pc}

08005a10 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 8005a10:	b580      	push	{r7, lr}
 8005a12:	b084      	sub	sp, #16
 8005a14:	af00      	add	r7, sp, #0
 8005a16:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8005a18:	2301      	movs	r3, #1
 8005a1a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8005a1c:	2300      	movs	r3, #0
 8005a1e:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005a26:	69db      	ldr	r3, [r3, #28]
 8005a28:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 8005a2a:	68bb      	ldr	r3, [r7, #8]
 8005a2c:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8005a30:	2b04      	cmp	r3, #4
 8005a32:	d877      	bhi.n	8005b24 <USBH_CDC_Process+0x114>
 8005a34:	a201      	add	r2, pc, #4	; (adr r2, 8005a3c <USBH_CDC_Process+0x2c>)
 8005a36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a3a:	bf00      	nop
 8005a3c:	08005a51 	.word	0x08005a51
 8005a40:	08005a57 	.word	0x08005a57
 8005a44:	08005a87 	.word	0x08005a87
 8005a48:	08005afb 	.word	0x08005afb
 8005a4c:	08005b09 	.word	0x08005b09
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 8005a50:	2300      	movs	r3, #0
 8005a52:	73fb      	strb	r3, [r7, #15]
      break;
 8005a54:	e06d      	b.n	8005b32 <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 8005a56:	68bb      	ldr	r3, [r7, #8]
 8005a58:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005a5a:	4619      	mov	r1, r3
 8005a5c:	6878      	ldr	r0, [r7, #4]
 8005a5e:	f000 f897 	bl	8005b90 <SetLineCoding>
 8005a62:	4603      	mov	r3, r0
 8005a64:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8005a66:	7bbb      	ldrb	r3, [r7, #14]
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d104      	bne.n	8005a76 <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8005a6c:	68bb      	ldr	r3, [r7, #8]
 8005a6e:	2202      	movs	r2, #2
 8005a70:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8005a74:	e058      	b.n	8005b28 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 8005a76:	7bbb      	ldrb	r3, [r7, #14]
 8005a78:	2b01      	cmp	r3, #1
 8005a7a:	d055      	beq.n	8005b28 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 8005a7c:	68bb      	ldr	r3, [r7, #8]
 8005a7e:	2204      	movs	r2, #4
 8005a80:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8005a84:	e050      	b.n	8005b28 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 8005a86:	68bb      	ldr	r3, [r7, #8]
 8005a88:	3340      	adds	r3, #64	; 0x40
 8005a8a:	4619      	mov	r1, r3
 8005a8c:	6878      	ldr	r0, [r7, #4]
 8005a8e:	f000 f860 	bl	8005b52 <GetLineCoding>
 8005a92:	4603      	mov	r3, r0
 8005a94:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8005a96:	7bbb      	ldrb	r3, [r7, #14]
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d126      	bne.n	8005aea <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 8005a9c:	68bb      	ldr	r3, [r7, #8]
 8005a9e:	2200      	movs	r2, #0
 8005aa0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8005aa4:	68bb      	ldr	r3, [r7, #8]
 8005aa6:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8005aaa:	68bb      	ldr	r3, [r7, #8]
 8005aac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005aae:	791b      	ldrb	r3, [r3, #4]
 8005ab0:	429a      	cmp	r2, r3
 8005ab2:	d13b      	bne.n	8005b2c <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8005ab4:	68bb      	ldr	r3, [r7, #8]
 8005ab6:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 8005aba:	68bb      	ldr	r3, [r7, #8]
 8005abc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005abe:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8005ac0:	429a      	cmp	r2, r3
 8005ac2:	d133      	bne.n	8005b2c <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8005ac4:	68bb      	ldr	r3, [r7, #8]
 8005ac6:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 8005aca:	68bb      	ldr	r3, [r7, #8]
 8005acc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005ace:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8005ad0:	429a      	cmp	r2, r3
 8005ad2:	d12b      	bne.n	8005b2c <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8005ad4:	68bb      	ldr	r3, [r7, #8]
 8005ad6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005ad8:	68bb      	ldr	r3, [r7, #8]
 8005ada:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005adc:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8005ade:	429a      	cmp	r2, r3
 8005ae0:	d124      	bne.n	8005b2c <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 8005ae2:	6878      	ldr	r0, [r7, #4]
 8005ae4:	f000 f958 	bl	8005d98 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8005ae8:	e020      	b.n	8005b2c <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 8005aea:	7bbb      	ldrb	r3, [r7, #14]
 8005aec:	2b01      	cmp	r3, #1
 8005aee:	d01d      	beq.n	8005b2c <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 8005af0:	68bb      	ldr	r3, [r7, #8]
 8005af2:	2204      	movs	r2, #4
 8005af4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8005af8:	e018      	b.n	8005b2c <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 8005afa:	6878      	ldr	r0, [r7, #4]
 8005afc:	f000 f867 	bl	8005bce <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 8005b00:	6878      	ldr	r0, [r7, #4]
 8005b02:	f000 f8da 	bl	8005cba <CDC_ProcessReception>
      break;
 8005b06:	e014      	b.n	8005b32 <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 8005b08:	2100      	movs	r1, #0
 8005b0a:	6878      	ldr	r0, [r7, #4]
 8005b0c:	f000 ffef 	bl	8006aee <USBH_ClrFeature>
 8005b10:	4603      	mov	r3, r0
 8005b12:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8005b14:	7bbb      	ldrb	r3, [r7, #14]
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d10a      	bne.n	8005b30 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 8005b1a:	68bb      	ldr	r3, [r7, #8]
 8005b1c:	2200      	movs	r2, #0
 8005b1e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 8005b22:	e005      	b.n	8005b30 <USBH_CDC_Process+0x120>

    default:
      break;
 8005b24:	bf00      	nop
 8005b26:	e004      	b.n	8005b32 <USBH_CDC_Process+0x122>
      break;
 8005b28:	bf00      	nop
 8005b2a:	e002      	b.n	8005b32 <USBH_CDC_Process+0x122>
      break;
 8005b2c:	bf00      	nop
 8005b2e:	e000      	b.n	8005b32 <USBH_CDC_Process+0x122>
      break;
 8005b30:	bf00      	nop

  }

  return status;
 8005b32:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b34:	4618      	mov	r0, r3
 8005b36:	3710      	adds	r7, #16
 8005b38:	46bd      	mov	sp, r7
 8005b3a:	bd80      	pop	{r7, pc}

08005b3c <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8005b3c:	b480      	push	{r7}
 8005b3e:	b083      	sub	sp, #12
 8005b40:	af00      	add	r7, sp, #0
 8005b42:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8005b44:	2300      	movs	r3, #0
}
 8005b46:	4618      	mov	r0, r3
 8005b48:	370c      	adds	r7, #12
 8005b4a:	46bd      	mov	sp, r7
 8005b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b50:	4770      	bx	lr

08005b52 <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 8005b52:	b580      	push	{r7, lr}
 8005b54:	b082      	sub	sp, #8
 8005b56:	af00      	add	r7, sp, #0
 8005b58:	6078      	str	r0, [r7, #4]
 8005b5a:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	22a1      	movs	r2, #161	; 0xa1
 8005b60:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	2221      	movs	r2, #33	; 0x21
 8005b66:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	2200      	movs	r2, #0
 8005b6c:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	2200      	movs	r2, #0
 8005b72:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	2207      	movs	r2, #7
 8005b78:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8005b7a:	683b      	ldr	r3, [r7, #0]
 8005b7c:	2207      	movs	r2, #7
 8005b7e:	4619      	mov	r1, r3
 8005b80:	6878      	ldr	r0, [r7, #4]
 8005b82:	f001 fa81 	bl	8007088 <USBH_CtlReq>
 8005b86:	4603      	mov	r3, r0
}
 8005b88:	4618      	mov	r0, r3
 8005b8a:	3708      	adds	r7, #8
 8005b8c:	46bd      	mov	sp, r7
 8005b8e:	bd80      	pop	{r7, pc}

08005b90 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8005b90:	b580      	push	{r7, lr}
 8005b92:	b082      	sub	sp, #8
 8005b94:	af00      	add	r7, sp, #0
 8005b96:	6078      	str	r0, [r7, #4]
 8005b98:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	2221      	movs	r2, #33	; 0x21
 8005b9e:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	2220      	movs	r2, #32
 8005ba4:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	2200      	movs	r2, #0
 8005baa:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	2200      	movs	r2, #0
 8005bb0:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	2207      	movs	r2, #7
 8005bb6:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8005bb8:	683b      	ldr	r3, [r7, #0]
 8005bba:	2207      	movs	r2, #7
 8005bbc:	4619      	mov	r1, r3
 8005bbe:	6878      	ldr	r0, [r7, #4]
 8005bc0:	f001 fa62 	bl	8007088 <USBH_CtlReq>
 8005bc4:	4603      	mov	r3, r0
}
 8005bc6:	4618      	mov	r0, r3
 8005bc8:	3708      	adds	r7, #8
 8005bca:	46bd      	mov	sp, r7
 8005bcc:	bd80      	pop	{r7, pc}

08005bce <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 8005bce:	b580      	push	{r7, lr}
 8005bd0:	b086      	sub	sp, #24
 8005bd2:	af02      	add	r7, sp, #8
 8005bd4:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005bdc:	69db      	ldr	r3, [r3, #28]
 8005bde:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8005be0:	2300      	movs	r3, #0
 8005be2:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8005bea:	2b01      	cmp	r3, #1
 8005bec:	d002      	beq.n	8005bf4 <CDC_ProcessTransmission+0x26>
 8005bee:	2b02      	cmp	r3, #2
 8005bf0:	d023      	beq.n	8005c3a <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 8005bf2:	e05e      	b.n	8005cb2 <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bf8:	68fa      	ldr	r2, [r7, #12]
 8005bfa:	8b12      	ldrh	r2, [r2, #24]
 8005bfc:	4293      	cmp	r3, r2
 8005bfe:	d90b      	bls.n	8005c18 <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	69d9      	ldr	r1, [r3, #28]
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	8b1a      	ldrh	r2, [r3, #24]
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	7b5b      	ldrb	r3, [r3, #13]
 8005c0c:	2001      	movs	r0, #1
 8005c0e:	9000      	str	r0, [sp, #0]
 8005c10:	6878      	ldr	r0, [r7, #4]
 8005c12:	f001 fc48 	bl	80074a6 <USBH_BulkSendData>
 8005c16:	e00b      	b.n	8005c30 <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        (void)USBH_BulkSendData(phost,
 8005c20:	b29a      	uxth	r2, r3
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	7b5b      	ldrb	r3, [r3, #13]
 8005c26:	2001      	movs	r0, #1
 8005c28:	9000      	str	r0, [sp, #0]
 8005c2a:	6878      	ldr	r0, [r7, #4]
 8005c2c:	f001 fc3b 	bl	80074a6 <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	2202      	movs	r2, #2
 8005c34:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8005c38:	e03b      	b.n	8005cb2 <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	7b5b      	ldrb	r3, [r3, #13]
 8005c3e:	4619      	mov	r1, r3
 8005c40:	6878      	ldr	r0, [r7, #4]
 8005c42:	f001 ff5f 	bl	8007b04 <USBH_LL_GetURBState>
 8005c46:	4603      	mov	r3, r0
 8005c48:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 8005c4a:	7afb      	ldrb	r3, [r7, #11]
 8005c4c:	2b01      	cmp	r3, #1
 8005c4e:	d128      	bne.n	8005ca2 <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c54:	68fa      	ldr	r2, [r7, #12]
 8005c56:	8b12      	ldrh	r2, [r2, #24]
 8005c58:	4293      	cmp	r3, r2
 8005c5a:	d90e      	bls.n	8005c7a <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c60:	68fa      	ldr	r2, [r7, #12]
 8005c62:	8b12      	ldrh	r2, [r2, #24]
 8005c64:	1a9a      	subs	r2, r3, r2
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	69db      	ldr	r3, [r3, #28]
 8005c6e:	68fa      	ldr	r2, [r7, #12]
 8005c70:	8b12      	ldrh	r2, [r2, #24]
 8005c72:	441a      	add	r2, r3
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	61da      	str	r2, [r3, #28]
 8005c78:	e002      	b.n	8005c80 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	2200      	movs	r2, #0
 8005c7e:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d004      	beq.n	8005c92 <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	2201      	movs	r2, #1
 8005c8c:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8005c90:	e00e      	b.n	8005cb0 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	2200      	movs	r2, #0
 8005c96:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 8005c9a:	6878      	ldr	r0, [r7, #4]
 8005c9c:	f000 f868 	bl	8005d70 <USBH_CDC_TransmitCallback>
      break;
 8005ca0:	e006      	b.n	8005cb0 <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 8005ca2:	7afb      	ldrb	r3, [r7, #11]
 8005ca4:	2b02      	cmp	r3, #2
 8005ca6:	d103      	bne.n	8005cb0 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	2201      	movs	r2, #1
 8005cac:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8005cb0:	bf00      	nop
  }
}
 8005cb2:	bf00      	nop
 8005cb4:	3710      	adds	r7, #16
 8005cb6:	46bd      	mov	sp, r7
 8005cb8:	bd80      	pop	{r7, pc}

08005cba <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 8005cba:	b580      	push	{r7, lr}
 8005cbc:	b086      	sub	sp, #24
 8005cbe:	af00      	add	r7, sp, #0
 8005cc0:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005cc8:	69db      	ldr	r3, [r3, #28]
 8005cca:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8005ccc:	2300      	movs	r3, #0
 8005cce:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 8005cd0:	697b      	ldr	r3, [r7, #20]
 8005cd2:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8005cd6:	2b03      	cmp	r3, #3
 8005cd8:	d002      	beq.n	8005ce0 <CDC_ProcessReception+0x26>
 8005cda:	2b04      	cmp	r3, #4
 8005cdc:	d00e      	beq.n	8005cfc <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 8005cde:	e043      	b.n	8005d68 <CDC_ProcessReception+0xae>
      (void)USBH_BulkReceiveData(phost,
 8005ce0:	697b      	ldr	r3, [r7, #20]
 8005ce2:	6a19      	ldr	r1, [r3, #32]
 8005ce4:	697b      	ldr	r3, [r7, #20]
 8005ce6:	8b5a      	ldrh	r2, [r3, #26]
 8005ce8:	697b      	ldr	r3, [r7, #20]
 8005cea:	7b1b      	ldrb	r3, [r3, #12]
 8005cec:	6878      	ldr	r0, [r7, #4]
 8005cee:	f001 fbff 	bl	80074f0 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 8005cf2:	697b      	ldr	r3, [r7, #20]
 8005cf4:	2204      	movs	r2, #4
 8005cf6:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8005cfa:	e035      	b.n	8005d68 <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8005cfc:	697b      	ldr	r3, [r7, #20]
 8005cfe:	7b1b      	ldrb	r3, [r3, #12]
 8005d00:	4619      	mov	r1, r3
 8005d02:	6878      	ldr	r0, [r7, #4]
 8005d04:	f001 fefe 	bl	8007b04 <USBH_LL_GetURBState>
 8005d08:	4603      	mov	r3, r0
 8005d0a:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 8005d0c:	7cfb      	ldrb	r3, [r7, #19]
 8005d0e:	2b01      	cmp	r3, #1
 8005d10:	d129      	bne.n	8005d66 <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 8005d12:	697b      	ldr	r3, [r7, #20]
 8005d14:	7b1b      	ldrb	r3, [r3, #12]
 8005d16:	4619      	mov	r1, r3
 8005d18:	6878      	ldr	r0, [r7, #4]
 8005d1a:	f001 fe61 	bl	80079e0 <USBH_LL_GetLastXferSize>
 8005d1e:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 8005d20:	697b      	ldr	r3, [r7, #20]
 8005d22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d24:	68fa      	ldr	r2, [r7, #12]
 8005d26:	429a      	cmp	r2, r3
 8005d28:	d016      	beq.n	8005d58 <CDC_ProcessReception+0x9e>
 8005d2a:	697b      	ldr	r3, [r7, #20]
 8005d2c:	8b5b      	ldrh	r3, [r3, #26]
 8005d2e:	461a      	mov	r2, r3
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	4293      	cmp	r3, r2
 8005d34:	d910      	bls.n	8005d58 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 8005d36:	697b      	ldr	r3, [r7, #20]
 8005d38:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	1ad2      	subs	r2, r2, r3
 8005d3e:	697b      	ldr	r3, [r7, #20]
 8005d40:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 8005d42:	697b      	ldr	r3, [r7, #20]
 8005d44:	6a1a      	ldr	r2, [r3, #32]
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	441a      	add	r2, r3
 8005d4a:	697b      	ldr	r3, [r7, #20]
 8005d4c:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 8005d4e:	697b      	ldr	r3, [r7, #20]
 8005d50:	2203      	movs	r2, #3
 8005d52:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8005d56:	e006      	b.n	8005d66 <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 8005d58:	697b      	ldr	r3, [r7, #20]
 8005d5a:	2200      	movs	r2, #0
 8005d5c:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 8005d60:	6878      	ldr	r0, [r7, #4]
 8005d62:	f000 f80f 	bl	8005d84 <USBH_CDC_ReceiveCallback>
      break;
 8005d66:	bf00      	nop
  }
}
 8005d68:	bf00      	nop
 8005d6a:	3718      	adds	r7, #24
 8005d6c:	46bd      	mov	sp, r7
 8005d6e:	bd80      	pop	{r7, pc}

08005d70 <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8005d70:	b480      	push	{r7}
 8005d72:	b083      	sub	sp, #12
 8005d74:	af00      	add	r7, sp, #0
 8005d76:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8005d78:	bf00      	nop
 8005d7a:	370c      	adds	r7, #12
 8005d7c:	46bd      	mov	sp, r7
 8005d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d82:	4770      	bx	lr

08005d84 <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8005d84:	b480      	push	{r7}
 8005d86:	b083      	sub	sp, #12
 8005d88:	af00      	add	r7, sp, #0
 8005d8a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8005d8c:	bf00      	nop
 8005d8e:	370c      	adds	r7, #12
 8005d90:	46bd      	mov	sp, r7
 8005d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d96:	4770      	bx	lr

08005d98 <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8005d98:	b480      	push	{r7}
 8005d9a:	b083      	sub	sp, #12
 8005d9c:	af00      	add	r7, sp, #0
 8005d9e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8005da0:	bf00      	nop
 8005da2:	370c      	adds	r7, #12
 8005da4:	46bd      	mov	sp, r7
 8005da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005daa:	4770      	bx	lr

08005dac <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                               uint8_t id), uint8_t id)
{
 8005dac:	b580      	push	{r7, lr}
 8005dae:	b084      	sub	sp, #16
 8005db0:	af00      	add	r7, sp, #0
 8005db2:	60f8      	str	r0, [r7, #12]
 8005db4:	60b9      	str	r1, [r7, #8]
 8005db6:	4613      	mov	r3, r2
 8005db8:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d101      	bne.n	8005dc4 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8005dc0:	2302      	movs	r3, #2
 8005dc2:	e029      	b.n	8005e18 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	79fa      	ldrb	r2, [r7, #7]
 8005dc8:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	2200      	movs	r2, #0
 8005dd0:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	2200      	movs	r2, #0
 8005dd8:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 8005ddc:	68f8      	ldr	r0, [r7, #12]
 8005dde:	f000 f81f 	bl	8005e20 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	2200      	movs	r2, #0
 8005de6:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	2200      	movs	r2, #0
 8005dee:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	2200      	movs	r2, #0
 8005df6:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	2200      	movs	r2, #0
 8005dfe:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 8005e02:	68bb      	ldr	r3, [r7, #8]
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d003      	beq.n	8005e10 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	68ba      	ldr	r2, [r7, #8]
 8005e0c:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 8005e10:	68f8      	ldr	r0, [r7, #12]
 8005e12:	f001 fd31 	bl	8007878 <USBH_LL_Init>

  return USBH_OK;
 8005e16:	2300      	movs	r3, #0
}
 8005e18:	4618      	mov	r0, r3
 8005e1a:	3710      	adds	r7, #16
 8005e1c:	46bd      	mov	sp, r7
 8005e1e:	bd80      	pop	{r7, pc}

08005e20 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8005e20:	b480      	push	{r7}
 8005e22:	b085      	sub	sp, #20
 8005e24:	af00      	add	r7, sp, #0
 8005e26:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8005e28:	2300      	movs	r3, #0
 8005e2a:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8005e2c:	2300      	movs	r3, #0
 8005e2e:	60fb      	str	r3, [r7, #12]
 8005e30:	e009      	b.n	8005e46 <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 8005e32:	687a      	ldr	r2, [r7, #4]
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	33e0      	adds	r3, #224	; 0xe0
 8005e38:	009b      	lsls	r3, r3, #2
 8005e3a:	4413      	add	r3, r2
 8005e3c:	2200      	movs	r2, #0
 8005e3e:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	3301      	adds	r3, #1
 8005e44:	60fb      	str	r3, [r7, #12]
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	2b0f      	cmp	r3, #15
 8005e4a:	d9f2      	bls.n	8005e32 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8005e4c:	2300      	movs	r3, #0
 8005e4e:	60fb      	str	r3, [r7, #12]
 8005e50:	e009      	b.n	8005e66 <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 8005e52:	687a      	ldr	r2, [r7, #4]
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	4413      	add	r3, r2
 8005e58:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8005e5c:	2200      	movs	r2, #0
 8005e5e:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	3301      	adds	r3, #1
 8005e64:	60fb      	str	r3, [r7, #12]
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005e6c:	d3f1      	bcc.n	8005e52 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	2200      	movs	r2, #0
 8005e72:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	2200      	movs	r2, #0
 8005e78:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	2201      	movs	r2, #1
 8005e7e:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	2200      	movs	r2, #0
 8005e84:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	2201      	movs	r2, #1
 8005e8c:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	2240      	movs	r2, #64	; 0x40
 8005e92:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	2200      	movs	r2, #0
 8005e98:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	2200      	movs	r2, #0
 8005e9e:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	2201      	movs	r2, #1
 8005ea6:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	2200      	movs	r2, #0
 8005eae:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	2200      	movs	r2, #0
 8005eb6:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 8005eba:	2300      	movs	r3, #0
}
 8005ebc:	4618      	mov	r0, r3
 8005ebe:	3714      	adds	r7, #20
 8005ec0:	46bd      	mov	sp, r7
 8005ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ec6:	4770      	bx	lr

08005ec8 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8005ec8:	b480      	push	{r7}
 8005eca:	b085      	sub	sp, #20
 8005ecc:	af00      	add	r7, sp, #0
 8005ece:	6078      	str	r0, [r7, #4]
 8005ed0:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8005ed2:	2300      	movs	r3, #0
 8005ed4:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8005ed6:	683b      	ldr	r3, [r7, #0]
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d016      	beq.n	8005f0a <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d10e      	bne.n	8005f04 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8005eec:	1c59      	adds	r1, r3, #1
 8005eee:	687a      	ldr	r2, [r7, #4]
 8005ef0:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 8005ef4:	687a      	ldr	r2, [r7, #4]
 8005ef6:	33de      	adds	r3, #222	; 0xde
 8005ef8:	6839      	ldr	r1, [r7, #0]
 8005efa:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8005efe:	2300      	movs	r3, #0
 8005f00:	73fb      	strb	r3, [r7, #15]
 8005f02:	e004      	b.n	8005f0e <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8005f04:	2302      	movs	r3, #2
 8005f06:	73fb      	strb	r3, [r7, #15]
 8005f08:	e001      	b.n	8005f0e <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8005f0a:	2302      	movs	r3, #2
 8005f0c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8005f0e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f10:	4618      	mov	r0, r3
 8005f12:	3714      	adds	r7, #20
 8005f14:	46bd      	mov	sp, r7
 8005f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f1a:	4770      	bx	lr

08005f1c <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8005f1c:	b480      	push	{r7}
 8005f1e:	b085      	sub	sp, #20
 8005f20:	af00      	add	r7, sp, #0
 8005f22:	6078      	str	r0, [r7, #4]
 8005f24:	460b      	mov	r3, r1
 8005f26:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8005f28:	2300      	movs	r3, #0
 8005f2a:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 8005f32:	78fa      	ldrb	r2, [r7, #3]
 8005f34:	429a      	cmp	r2, r3
 8005f36:	d204      	bcs.n	8005f42 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	78fa      	ldrb	r2, [r7, #3]
 8005f3c:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 8005f40:	e001      	b.n	8005f46 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8005f42:	2302      	movs	r3, #2
 8005f44:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8005f46:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f48:	4618      	mov	r0, r3
 8005f4a:	3714      	adds	r7, #20
 8005f4c:	46bd      	mov	sp, r7
 8005f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f52:	4770      	bx	lr

08005f54 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8005f54:	b480      	push	{r7}
 8005f56:	b087      	sub	sp, #28
 8005f58:	af00      	add	r7, sp, #0
 8005f5a:	6078      	str	r0, [r7, #4]
 8005f5c:	4608      	mov	r0, r1
 8005f5e:	4611      	mov	r1, r2
 8005f60:	461a      	mov	r2, r3
 8005f62:	4603      	mov	r3, r0
 8005f64:	70fb      	strb	r3, [r7, #3]
 8005f66:	460b      	mov	r3, r1
 8005f68:	70bb      	strb	r3, [r7, #2]
 8005f6a:	4613      	mov	r3, r2
 8005f6c:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8005f6e:	2300      	movs	r3, #0
 8005f70:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 8005f72:	2300      	movs	r3, #0
 8005f74:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8005f7c:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8005f7e:	e025      	b.n	8005fcc <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8005f80:	7dfb      	ldrb	r3, [r7, #23]
 8005f82:	221a      	movs	r2, #26
 8005f84:	fb02 f303 	mul.w	r3, r2, r3
 8005f88:	3308      	adds	r3, #8
 8005f8a:	68fa      	ldr	r2, [r7, #12]
 8005f8c:	4413      	add	r3, r2
 8005f8e:	3302      	adds	r3, #2
 8005f90:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8005f92:	693b      	ldr	r3, [r7, #16]
 8005f94:	795b      	ldrb	r3, [r3, #5]
 8005f96:	78fa      	ldrb	r2, [r7, #3]
 8005f98:	429a      	cmp	r2, r3
 8005f9a:	d002      	beq.n	8005fa2 <USBH_FindInterface+0x4e>
 8005f9c:	78fb      	ldrb	r3, [r7, #3]
 8005f9e:	2bff      	cmp	r3, #255	; 0xff
 8005fa0:	d111      	bne.n	8005fc6 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8005fa2:	693b      	ldr	r3, [r7, #16]
 8005fa4:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8005fa6:	78ba      	ldrb	r2, [r7, #2]
 8005fa8:	429a      	cmp	r2, r3
 8005faa:	d002      	beq.n	8005fb2 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8005fac:	78bb      	ldrb	r3, [r7, #2]
 8005fae:	2bff      	cmp	r3, #255	; 0xff
 8005fb0:	d109      	bne.n	8005fc6 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8005fb2:	693b      	ldr	r3, [r7, #16]
 8005fb4:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8005fb6:	787a      	ldrb	r2, [r7, #1]
 8005fb8:	429a      	cmp	r2, r3
 8005fba:	d002      	beq.n	8005fc2 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8005fbc:	787b      	ldrb	r3, [r7, #1]
 8005fbe:	2bff      	cmp	r3, #255	; 0xff
 8005fc0:	d101      	bne.n	8005fc6 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8005fc2:	7dfb      	ldrb	r3, [r7, #23]
 8005fc4:	e006      	b.n	8005fd4 <USBH_FindInterface+0x80>
    }
    if_ix++;
 8005fc6:	7dfb      	ldrb	r3, [r7, #23]
 8005fc8:	3301      	adds	r3, #1
 8005fca:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8005fcc:	7dfb      	ldrb	r3, [r7, #23]
 8005fce:	2b01      	cmp	r3, #1
 8005fd0:	d9d6      	bls.n	8005f80 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8005fd2:	23ff      	movs	r3, #255	; 0xff
}
 8005fd4:	4618      	mov	r0, r3
 8005fd6:	371c      	adds	r7, #28
 8005fd8:	46bd      	mov	sp, r7
 8005fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fde:	4770      	bx	lr

08005fe0 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 8005fe0:	b580      	push	{r7, lr}
 8005fe2:	b082      	sub	sp, #8
 8005fe4:	af00      	add	r7, sp, #0
 8005fe6:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 8005fe8:	6878      	ldr	r0, [r7, #4]
 8005fea:	f001 fc81 	bl	80078f0 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 8005fee:	2101      	movs	r1, #1
 8005ff0:	6878      	ldr	r0, [r7, #4]
 8005ff2:	f001 fd9a 	bl	8007b2a <USBH_LL_DriverVBUS>

  return USBH_OK;
 8005ff6:	2300      	movs	r3, #0
}
 8005ff8:	4618      	mov	r0, r3
 8005ffa:	3708      	adds	r7, #8
 8005ffc:	46bd      	mov	sp, r7
 8005ffe:	bd80      	pop	{r7, pc}

08006000 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 8006000:	b580      	push	{r7, lr}
 8006002:	b088      	sub	sp, #32
 8006004:	af04      	add	r7, sp, #16
 8006006:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8006008:	2302      	movs	r3, #2
 800600a:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 800600c:	2300      	movs	r3, #0
 800600e:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 8006016:	b2db      	uxtb	r3, r3
 8006018:	2b01      	cmp	r3, #1
 800601a:	d102      	bne.n	8006022 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	2203      	movs	r2, #3
 8006020:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	781b      	ldrb	r3, [r3, #0]
 8006026:	b2db      	uxtb	r3, r3
 8006028:	2b0b      	cmp	r3, #11
 800602a:	f200 81be 	bhi.w	80063aa <USBH_Process+0x3aa>
 800602e:	a201      	add	r2, pc, #4	; (adr r2, 8006034 <USBH_Process+0x34>)
 8006030:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006034:	08006065 	.word	0x08006065
 8006038:	08006097 	.word	0x08006097
 800603c:	080060ff 	.word	0x080060ff
 8006040:	08006345 	.word	0x08006345
 8006044:	080063ab 	.word	0x080063ab
 8006048:	080061a3 	.word	0x080061a3
 800604c:	080062eb 	.word	0x080062eb
 8006050:	080061d9 	.word	0x080061d9
 8006054:	080061f9 	.word	0x080061f9
 8006058:	08006219 	.word	0x08006219
 800605c:	0800625d 	.word	0x0800625d
 8006060:	0800632d 	.word	0x0800632d
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800606a:	b2db      	uxtb	r3, r3
 800606c:	2b00      	cmp	r3, #0
 800606e:	f000 819e 	beq.w	80063ae <USBH_Process+0x3ae>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	2201      	movs	r2, #1
 8006076:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8006078:	20c8      	movs	r0, #200	; 0xc8
 800607a:	f001 fd9d 	bl	8007bb8 <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 800607e:	6878      	ldr	r0, [r7, #4]
 8006080:	f001 fc93 	bl	80079aa <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	2200      	movs	r2, #0
 8006088:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	2200      	movs	r2, #0
 8006090:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8006094:	e18b      	b.n	80063ae <USBH_Process+0x3ae>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 800609c:	2b01      	cmp	r3, #1
 800609e:	d107      	bne.n	80060b0 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	2200      	movs	r2, #0
 80060a4:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	2202      	movs	r2, #2
 80060ac:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80060ae:	e18d      	b.n	80063cc <USBH_Process+0x3cc>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 80060b6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80060ba:	d914      	bls.n	80060e6 <USBH_Process+0xe6>
          phost->device.RstCnt++;
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 80060c2:	3301      	adds	r3, #1
 80060c4:	b2da      	uxtb	r2, r3
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 80060d2:	2b03      	cmp	r3, #3
 80060d4:	d903      	bls.n	80060de <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	220d      	movs	r2, #13
 80060da:	701a      	strb	r2, [r3, #0]
      break;
 80060dc:	e176      	b.n	80063cc <USBH_Process+0x3cc>
            phost->gState = HOST_IDLE;
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	2200      	movs	r2, #0
 80060e2:	701a      	strb	r2, [r3, #0]
      break;
 80060e4:	e172      	b.n	80063cc <USBH_Process+0x3cc>
          phost->Timeout += 10U;
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 80060ec:	f103 020a 	add.w	r2, r3, #10
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 80060f6:	200a      	movs	r0, #10
 80060f8:	f001 fd5e 	bl	8007bb8 <USBH_Delay>
      break;
 80060fc:	e166      	b.n	80063cc <USBH_Process+0x3cc>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006104:	2b00      	cmp	r3, #0
 8006106:	d005      	beq.n	8006114 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800610e:	2104      	movs	r1, #4
 8006110:	6878      	ldr	r0, [r7, #4]
 8006112:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8006114:	2064      	movs	r0, #100	; 0x64
 8006116:	f001 fd4f 	bl	8007bb8 <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 800611a:	6878      	ldr	r0, [r7, #4]
 800611c:	f001 fc1e 	bl	800795c <USBH_LL_GetSpeed>
 8006120:	4603      	mov	r3, r0
 8006122:	461a      	mov	r2, r3
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	2205      	movs	r2, #5
 800612e:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8006130:	2100      	movs	r1, #0
 8006132:	6878      	ldr	r0, [r7, #4]
 8006134:	f001 fa29 	bl	800758a <USBH_AllocPipe>
 8006138:	4603      	mov	r3, r0
 800613a:	461a      	mov	r2, r3
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8006140:	2180      	movs	r1, #128	; 0x80
 8006142:	6878      	ldr	r0, [r7, #4]
 8006144:	f001 fa21 	bl	800758a <USBH_AllocPipe>
 8006148:	4603      	mov	r3, r0
 800614a:	461a      	mov	r2, r3
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	7919      	ldrb	r1, [r3, #4]
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8006160:	687a      	ldr	r2, [r7, #4]
 8006162:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8006164:	b292      	uxth	r2, r2
 8006166:	9202      	str	r2, [sp, #8]
 8006168:	2200      	movs	r2, #0
 800616a:	9201      	str	r2, [sp, #4]
 800616c:	9300      	str	r3, [sp, #0]
 800616e:	4603      	mov	r3, r0
 8006170:	2280      	movs	r2, #128	; 0x80
 8006172:	6878      	ldr	r0, [r7, #4]
 8006174:	f001 f9da 	bl	800752c <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	7959      	ldrb	r1, [r3, #5]
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8006188:	687a      	ldr	r2, [r7, #4]
 800618a:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800618c:	b292      	uxth	r2, r2
 800618e:	9202      	str	r2, [sp, #8]
 8006190:	2200      	movs	r2, #0
 8006192:	9201      	str	r2, [sp, #4]
 8006194:	9300      	str	r3, [sp, #0]
 8006196:	4603      	mov	r3, r0
 8006198:	2200      	movs	r2, #0
 800619a:	6878      	ldr	r0, [r7, #4]
 800619c:	f001 f9c6 	bl	800752c <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80061a0:	e114      	b.n	80063cc <USBH_Process+0x3cc>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 80061a2:	6878      	ldr	r0, [r7, #4]
 80061a4:	f000 f918 	bl	80063d8 <USBH_HandleEnum>
 80061a8:	4603      	mov	r3, r0
 80061aa:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 80061ac:	7bbb      	ldrb	r3, [r7, #14]
 80061ae:	b2db      	uxtb	r3, r3
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	f040 80fe 	bne.w	80063b2 <USBH_Process+0x3b2>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	2200      	movs	r2, #0
 80061ba:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 80061c4:	2b01      	cmp	r3, #1
 80061c6:	d103      	bne.n	80061d0 <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	2208      	movs	r2, #8
 80061cc:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 80061ce:	e0f0      	b.n	80063b2 <USBH_Process+0x3b2>
          phost->gState = HOST_INPUT;
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	2207      	movs	r2, #7
 80061d4:	701a      	strb	r2, [r3, #0]
      break;
 80061d6:	e0ec      	b.n	80063b2 <USBH_Process+0x3b2>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80061de:	2b00      	cmp	r3, #0
 80061e0:	f000 80e9 	beq.w	80063b6 <USBH_Process+0x3b6>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80061ea:	2101      	movs	r1, #1
 80061ec:	6878      	ldr	r0, [r7, #4]
 80061ee:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	2208      	movs	r2, #8
 80061f4:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 80061f6:	e0de      	b.n	80063b6 <USBH_Process+0x3b6>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 80061fe:	b29b      	uxth	r3, r3
 8006200:	4619      	mov	r1, r3
 8006202:	6878      	ldr	r0, [r7, #4]
 8006204:	f000 fc2c 	bl	8006a60 <USBH_SetCfg>
 8006208:	4603      	mov	r3, r0
 800620a:	2b00      	cmp	r3, #0
 800620c:	f040 80d5 	bne.w	80063ba <USBH_Process+0x3ba>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	2209      	movs	r2, #9
 8006214:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8006216:	e0d0      	b.n	80063ba <USBH_Process+0x3ba>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 800621e:	f003 0320 	and.w	r3, r3, #32
 8006222:	2b00      	cmp	r3, #0
 8006224:	d016      	beq.n	8006254 <USBH_Process+0x254>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 8006226:	2101      	movs	r1, #1
 8006228:	6878      	ldr	r0, [r7, #4]
 800622a:	f000 fc3c 	bl	8006aa6 <USBH_SetFeature>
 800622e:	4603      	mov	r3, r0
 8006230:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8006232:	7bbb      	ldrb	r3, [r7, #14]
 8006234:	b2db      	uxtb	r3, r3
 8006236:	2b00      	cmp	r3, #0
 8006238:	d103      	bne.n	8006242 <USBH_Process+0x242>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	220a      	movs	r2, #10
 800623e:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8006240:	e0bd      	b.n	80063be <USBH_Process+0x3be>
        else if (status == USBH_NOT_SUPPORTED)
 8006242:	7bbb      	ldrb	r3, [r7, #14]
 8006244:	b2db      	uxtb	r3, r3
 8006246:	2b03      	cmp	r3, #3
 8006248:	f040 80b9 	bne.w	80063be <USBH_Process+0x3be>
          phost->gState = HOST_CHECK_CLASS;
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	220a      	movs	r2, #10
 8006250:	701a      	strb	r2, [r3, #0]
      break;
 8006252:	e0b4      	b.n	80063be <USBH_Process+0x3be>
        phost->gState = HOST_CHECK_CLASS;
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	220a      	movs	r2, #10
 8006258:	701a      	strb	r2, [r3, #0]
      break;
 800625a:	e0b0      	b.n	80063be <USBH_Process+0x3be>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8006262:	2b00      	cmp	r3, #0
 8006264:	f000 80ad 	beq.w	80063c2 <USBH_Process+0x3c2>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	2200      	movs	r2, #0
 800626c:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8006270:	2300      	movs	r3, #0
 8006272:	73fb      	strb	r3, [r7, #15]
 8006274:	e016      	b.n	80062a4 <USBH_Process+0x2a4>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8006276:	7bfa      	ldrb	r2, [r7, #15]
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	32de      	adds	r2, #222	; 0xde
 800627c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006280:	791a      	ldrb	r2, [r3, #4]
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 8006288:	429a      	cmp	r2, r3
 800628a:	d108      	bne.n	800629e <USBH_Process+0x29e>
          {
            phost->pActiveClass = phost->pClass[idx];
 800628c:	7bfa      	ldrb	r2, [r7, #15]
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	32de      	adds	r2, #222	; 0xde
 8006292:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 800629c:	e005      	b.n	80062aa <USBH_Process+0x2aa>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800629e:	7bfb      	ldrb	r3, [r7, #15]
 80062a0:	3301      	adds	r3, #1
 80062a2:	73fb      	strb	r3, [r7, #15]
 80062a4:	7bfb      	ldrb	r3, [r7, #15]
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d0e5      	beq.n	8006276 <USBH_Process+0x276>
          }
        }

        if (phost->pActiveClass != NULL)
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	d016      	beq.n	80062e2 <USBH_Process+0x2e2>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80062ba:	689b      	ldr	r3, [r3, #8]
 80062bc:	6878      	ldr	r0, [r7, #4]
 80062be:	4798      	blx	r3
 80062c0:	4603      	mov	r3, r0
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d109      	bne.n	80062da <USBH_Process+0x2da>
          {
            phost->gState = HOST_CLASS_REQUEST;
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	2206      	movs	r2, #6
 80062ca:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80062d2:	2103      	movs	r1, #3
 80062d4:	6878      	ldr	r0, [r7, #4]
 80062d6:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80062d8:	e073      	b.n	80063c2 <USBH_Process+0x3c2>
            phost->gState = HOST_ABORT_STATE;
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	220d      	movs	r2, #13
 80062de:	701a      	strb	r2, [r3, #0]
      break;
 80062e0:	e06f      	b.n	80063c2 <USBH_Process+0x3c2>
          phost->gState = HOST_ABORT_STATE;
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	220d      	movs	r2, #13
 80062e6:	701a      	strb	r2, [r3, #0]
      break;
 80062e8:	e06b      	b.n	80063c2 <USBH_Process+0x3c2>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	d017      	beq.n	8006324 <USBH_Process+0x324>
      {
        status = phost->pActiveClass->Requests(phost);
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80062fa:	691b      	ldr	r3, [r3, #16]
 80062fc:	6878      	ldr	r0, [r7, #4]
 80062fe:	4798      	blx	r3
 8006300:	4603      	mov	r3, r0
 8006302:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8006304:	7bbb      	ldrb	r3, [r7, #14]
 8006306:	b2db      	uxtb	r3, r3
 8006308:	2b00      	cmp	r3, #0
 800630a:	d103      	bne.n	8006314 <USBH_Process+0x314>
        {
          phost->gState = HOST_CLASS;
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	220b      	movs	r2, #11
 8006310:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8006312:	e058      	b.n	80063c6 <USBH_Process+0x3c6>
        else if (status == USBH_FAIL)
 8006314:	7bbb      	ldrb	r3, [r7, #14]
 8006316:	b2db      	uxtb	r3, r3
 8006318:	2b02      	cmp	r3, #2
 800631a:	d154      	bne.n	80063c6 <USBH_Process+0x3c6>
          phost->gState = HOST_ABORT_STATE;
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	220d      	movs	r2, #13
 8006320:	701a      	strb	r2, [r3, #0]
      break;
 8006322:	e050      	b.n	80063c6 <USBH_Process+0x3c6>
        phost->gState = HOST_ABORT_STATE;
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	220d      	movs	r2, #13
 8006328:	701a      	strb	r2, [r3, #0]
      break;
 800632a:	e04c      	b.n	80063c6 <USBH_Process+0x3c6>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006332:	2b00      	cmp	r3, #0
 8006334:	d049      	beq.n	80063ca <USBH_Process+0x3ca>
      {
        phost->pActiveClass->BgndProcess(phost);
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800633c:	695b      	ldr	r3, [r3, #20]
 800633e:	6878      	ldr	r0, [r7, #4]
 8006340:	4798      	blx	r3
      }
      break;
 8006342:	e042      	b.n	80063ca <USBH_Process+0x3ca>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	2200      	movs	r2, #0
 8006348:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      (void)DeInitStateMachine(phost);
 800634c:	6878      	ldr	r0, [r7, #4]
 800634e:	f7ff fd67 	bl	8005e20 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006358:	2b00      	cmp	r3, #0
 800635a:	d009      	beq.n	8006370 <USBH_Process+0x370>
      {
        phost->pActiveClass->DeInit(phost);
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006362:	68db      	ldr	r3, [r3, #12]
 8006364:	6878      	ldr	r0, [r7, #4]
 8006366:	4798      	blx	r3
        phost->pActiveClass = NULL;
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	2200      	movs	r2, #0
 800636c:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006376:	2b00      	cmp	r3, #0
 8006378:	d005      	beq.n	8006386 <USBH_Process+0x386>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006380:	2105      	movs	r1, #5
 8006382:	6878      	ldr	r0, [r7, #4]
 8006384:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 800638c:	b2db      	uxtb	r3, r3
 800638e:	2b01      	cmp	r3, #1
 8006390:	d107      	bne.n	80063a2 <USBH_Process+0x3a2>
      {
        phost->device.is_ReEnumerated = 0U;
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	2200      	movs	r2, #0
 8006396:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 800639a:	6878      	ldr	r0, [r7, #4]
 800639c:	f7ff fe20 	bl	8005fe0 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80063a0:	e014      	b.n	80063cc <USBH_Process+0x3cc>
        (void)USBH_LL_Start(phost);
 80063a2:	6878      	ldr	r0, [r7, #4]
 80063a4:	f001 faa4 	bl	80078f0 <USBH_LL_Start>
      break;
 80063a8:	e010      	b.n	80063cc <USBH_Process+0x3cc>

    case HOST_ABORT_STATE:
    default :
      break;
 80063aa:	bf00      	nop
 80063ac:	e00e      	b.n	80063cc <USBH_Process+0x3cc>
      break;
 80063ae:	bf00      	nop
 80063b0:	e00c      	b.n	80063cc <USBH_Process+0x3cc>
      break;
 80063b2:	bf00      	nop
 80063b4:	e00a      	b.n	80063cc <USBH_Process+0x3cc>
    break;
 80063b6:	bf00      	nop
 80063b8:	e008      	b.n	80063cc <USBH_Process+0x3cc>
      break;
 80063ba:	bf00      	nop
 80063bc:	e006      	b.n	80063cc <USBH_Process+0x3cc>
      break;
 80063be:	bf00      	nop
 80063c0:	e004      	b.n	80063cc <USBH_Process+0x3cc>
      break;
 80063c2:	bf00      	nop
 80063c4:	e002      	b.n	80063cc <USBH_Process+0x3cc>
      break;
 80063c6:	bf00      	nop
 80063c8:	e000      	b.n	80063cc <USBH_Process+0x3cc>
      break;
 80063ca:	bf00      	nop
  }
  return USBH_OK;
 80063cc:	2300      	movs	r3, #0
}
 80063ce:	4618      	mov	r0, r3
 80063d0:	3710      	adds	r7, #16
 80063d2:	46bd      	mov	sp, r7
 80063d4:	bd80      	pop	{r7, pc}
 80063d6:	bf00      	nop

080063d8 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 80063d8:	b580      	push	{r7, lr}
 80063da:	b088      	sub	sp, #32
 80063dc:	af04      	add	r7, sp, #16
 80063de:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 80063e0:	2301      	movs	r3, #1
 80063e2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 80063e4:	2301      	movs	r3, #1
 80063e6:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	785b      	ldrb	r3, [r3, #1]
 80063ec:	2b07      	cmp	r3, #7
 80063ee:	f200 81c1 	bhi.w	8006774 <USBH_HandleEnum+0x39c>
 80063f2:	a201      	add	r2, pc, #4	; (adr r2, 80063f8 <USBH_HandleEnum+0x20>)
 80063f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063f8:	08006419 	.word	0x08006419
 80063fc:	080064d7 	.word	0x080064d7
 8006400:	08006541 	.word	0x08006541
 8006404:	080065cf 	.word	0x080065cf
 8006408:	08006639 	.word	0x08006639
 800640c:	080066a9 	.word	0x080066a9
 8006410:	080066ef 	.word	0x080066ef
 8006414:	08006735 	.word	0x08006735
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 8006418:	2108      	movs	r1, #8
 800641a:	6878      	ldr	r0, [r7, #4]
 800641c:	f000 fa50 	bl	80068c0 <USBH_Get_DevDesc>
 8006420:	4603      	mov	r3, r0
 8006422:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8006424:	7bbb      	ldrb	r3, [r7, #14]
 8006426:	2b00      	cmp	r3, #0
 8006428:	d130      	bne.n	800648c <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	2201      	movs	r2, #1
 8006438:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	7919      	ldrb	r1, [r3, #4]
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800644a:	687a      	ldr	r2, [r7, #4]
 800644c:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800644e:	b292      	uxth	r2, r2
 8006450:	9202      	str	r2, [sp, #8]
 8006452:	2200      	movs	r2, #0
 8006454:	9201      	str	r2, [sp, #4]
 8006456:	9300      	str	r3, [sp, #0]
 8006458:	4603      	mov	r3, r0
 800645a:	2280      	movs	r2, #128	; 0x80
 800645c:	6878      	ldr	r0, [r7, #4]
 800645e:	f001 f865 	bl	800752c <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	7959      	ldrb	r1, [r3, #5]
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8006472:	687a      	ldr	r2, [r7, #4]
 8006474:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8006476:	b292      	uxth	r2, r2
 8006478:	9202      	str	r2, [sp, #8]
 800647a:	2200      	movs	r2, #0
 800647c:	9201      	str	r2, [sp, #4]
 800647e:	9300      	str	r3, [sp, #0]
 8006480:	4603      	mov	r3, r0
 8006482:	2200      	movs	r2, #0
 8006484:	6878      	ldr	r0, [r7, #4]
 8006486:	f001 f851 	bl	800752c <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800648a:	e175      	b.n	8006778 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800648c:	7bbb      	ldrb	r3, [r7, #14]
 800648e:	2b03      	cmp	r3, #3
 8006490:	f040 8172 	bne.w	8006778 <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800649a:	3301      	adds	r3, #1
 800649c:	b2da      	uxtb	r2, r3
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80064aa:	2b03      	cmp	r3, #3
 80064ac:	d903      	bls.n	80064b6 <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	220d      	movs	r2, #13
 80064b2:	701a      	strb	r2, [r3, #0]
      break;
 80064b4:	e160      	b.n	8006778 <USBH_HandleEnum+0x3a0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	795b      	ldrb	r3, [r3, #5]
 80064ba:	4619      	mov	r1, r3
 80064bc:	6878      	ldr	r0, [r7, #4]
 80064be:	f001 f885 	bl	80075cc <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	791b      	ldrb	r3, [r3, #4]
 80064c6:	4619      	mov	r1, r3
 80064c8:	6878      	ldr	r0, [r7, #4]
 80064ca:	f001 f87f 	bl	80075cc <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	2200      	movs	r2, #0
 80064d2:	701a      	strb	r2, [r3, #0]
      break;
 80064d4:	e150      	b.n	8006778 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 80064d6:	2112      	movs	r1, #18
 80064d8:	6878      	ldr	r0, [r7, #4]
 80064da:	f000 f9f1 	bl	80068c0 <USBH_Get_DevDesc>
 80064de:	4603      	mov	r3, r0
 80064e0:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80064e2:	7bbb      	ldrb	r3, [r7, #14]
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	d103      	bne.n	80064f0 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	2202      	movs	r2, #2
 80064ec:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80064ee:	e145      	b.n	800677c <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80064f0:	7bbb      	ldrb	r3, [r7, #14]
 80064f2:	2b03      	cmp	r3, #3
 80064f4:	f040 8142 	bne.w	800677c <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80064fe:	3301      	adds	r3, #1
 8006500:	b2da      	uxtb	r2, r3
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800650e:	2b03      	cmp	r3, #3
 8006510:	d903      	bls.n	800651a <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	220d      	movs	r2, #13
 8006516:	701a      	strb	r2, [r3, #0]
      break;
 8006518:	e130      	b.n	800677c <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	795b      	ldrb	r3, [r3, #5]
 800651e:	4619      	mov	r1, r3
 8006520:	6878      	ldr	r0, [r7, #4]
 8006522:	f001 f853 	bl	80075cc <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	791b      	ldrb	r3, [r3, #4]
 800652a:	4619      	mov	r1, r3
 800652c:	6878      	ldr	r0, [r7, #4]
 800652e:	f001 f84d 	bl	80075cc <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	2200      	movs	r2, #0
 8006536:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	2200      	movs	r2, #0
 800653c:	701a      	strb	r2, [r3, #0]
      break;
 800653e:	e11d      	b.n	800677c <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 8006540:	2101      	movs	r1, #1
 8006542:	6878      	ldr	r0, [r7, #4]
 8006544:	f000 fa68 	bl	8006a18 <USBH_SetAddress>
 8006548:	4603      	mov	r3, r0
 800654a:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800654c:	7bbb      	ldrb	r3, [r7, #14]
 800654e:	2b00      	cmp	r3, #0
 8006550:	d132      	bne.n	80065b8 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 8006552:	2002      	movs	r0, #2
 8006554:	f001 fb30 	bl	8007bb8 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	2201      	movs	r2, #1
 800655c:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	2203      	movs	r2, #3
 8006564:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	7919      	ldrb	r1, [r3, #4]
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8006576:	687a      	ldr	r2, [r7, #4]
 8006578:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800657a:	b292      	uxth	r2, r2
 800657c:	9202      	str	r2, [sp, #8]
 800657e:	2200      	movs	r2, #0
 8006580:	9201      	str	r2, [sp, #4]
 8006582:	9300      	str	r3, [sp, #0]
 8006584:	4603      	mov	r3, r0
 8006586:	2280      	movs	r2, #128	; 0x80
 8006588:	6878      	ldr	r0, [r7, #4]
 800658a:	f000 ffcf 	bl	800752c <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	7959      	ldrb	r1, [r3, #5]
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800659e:	687a      	ldr	r2, [r7, #4]
 80065a0:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80065a2:	b292      	uxth	r2, r2
 80065a4:	9202      	str	r2, [sp, #8]
 80065a6:	2200      	movs	r2, #0
 80065a8:	9201      	str	r2, [sp, #4]
 80065aa:	9300      	str	r3, [sp, #0]
 80065ac:	4603      	mov	r3, r0
 80065ae:	2200      	movs	r2, #0
 80065b0:	6878      	ldr	r0, [r7, #4]
 80065b2:	f000 ffbb 	bl	800752c <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 80065b6:	e0e3      	b.n	8006780 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80065b8:	7bbb      	ldrb	r3, [r7, #14]
 80065ba:	2b03      	cmp	r3, #3
 80065bc:	f040 80e0 	bne.w	8006780 <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	220d      	movs	r2, #13
 80065c4:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	2200      	movs	r2, #0
 80065ca:	705a      	strb	r2, [r3, #1]
      break;
 80065cc:	e0d8      	b.n	8006780 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 80065ce:	2109      	movs	r1, #9
 80065d0:	6878      	ldr	r0, [r7, #4]
 80065d2:	f000 f99d 	bl	8006910 <USBH_Get_CfgDesc>
 80065d6:	4603      	mov	r3, r0
 80065d8:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80065da:	7bbb      	ldrb	r3, [r7, #14]
 80065dc:	2b00      	cmp	r3, #0
 80065de:	d103      	bne.n	80065e8 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	2204      	movs	r2, #4
 80065e4:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80065e6:	e0cd      	b.n	8006784 <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80065e8:	7bbb      	ldrb	r3, [r7, #14]
 80065ea:	2b03      	cmp	r3, #3
 80065ec:	f040 80ca 	bne.w	8006784 <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80065f6:	3301      	adds	r3, #1
 80065f8:	b2da      	uxtb	r2, r3
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006606:	2b03      	cmp	r3, #3
 8006608:	d903      	bls.n	8006612 <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	220d      	movs	r2, #13
 800660e:	701a      	strb	r2, [r3, #0]
      break;
 8006610:	e0b8      	b.n	8006784 <USBH_HandleEnum+0x3ac>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	795b      	ldrb	r3, [r3, #5]
 8006616:	4619      	mov	r1, r3
 8006618:	6878      	ldr	r0, [r7, #4]
 800661a:	f000 ffd7 	bl	80075cc <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	791b      	ldrb	r3, [r3, #4]
 8006622:	4619      	mov	r1, r3
 8006624:	6878      	ldr	r0, [r7, #4]
 8006626:	f000 ffd1 	bl	80075cc <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	2200      	movs	r2, #0
 800662e:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	2200      	movs	r2, #0
 8006634:	701a      	strb	r2, [r3, #0]
      break;
 8006636:	e0a5      	b.n	8006784 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 800663e:	4619      	mov	r1, r3
 8006640:	6878      	ldr	r0, [r7, #4]
 8006642:	f000 f965 	bl	8006910 <USBH_Get_CfgDesc>
 8006646:	4603      	mov	r3, r0
 8006648:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800664a:	7bbb      	ldrb	r3, [r7, #14]
 800664c:	2b00      	cmp	r3, #0
 800664e:	d103      	bne.n	8006658 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	2205      	movs	r2, #5
 8006654:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8006656:	e097      	b.n	8006788 <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006658:	7bbb      	ldrb	r3, [r7, #14]
 800665a:	2b03      	cmp	r3, #3
 800665c:	f040 8094 	bne.w	8006788 <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006666:	3301      	adds	r3, #1
 8006668:	b2da      	uxtb	r2, r3
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006676:	2b03      	cmp	r3, #3
 8006678:	d903      	bls.n	8006682 <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	220d      	movs	r2, #13
 800667e:	701a      	strb	r2, [r3, #0]
      break;
 8006680:	e082      	b.n	8006788 <USBH_HandleEnum+0x3b0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	795b      	ldrb	r3, [r3, #5]
 8006686:	4619      	mov	r1, r3
 8006688:	6878      	ldr	r0, [r7, #4]
 800668a:	f000 ff9f 	bl	80075cc <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	791b      	ldrb	r3, [r3, #4]
 8006692:	4619      	mov	r1, r3
 8006694:	6878      	ldr	r0, [r7, #4]
 8006696:	f000 ff99 	bl	80075cc <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	2200      	movs	r2, #0
 800669e:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	2200      	movs	r2, #0
 80066a4:	701a      	strb	r2, [r3, #0]
      break;
 80066a6:	e06f      	b.n	8006788 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d019      	beq.n	80066e6 <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 80066be:	23ff      	movs	r3, #255	; 0xff
 80066c0:	6878      	ldr	r0, [r7, #4]
 80066c2:	f000 f949 	bl	8006958 <USBH_Get_StringDesc>
 80066c6:	4603      	mov	r3, r0
 80066c8:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80066ca:	7bbb      	ldrb	r3, [r7, #14]
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d103      	bne.n	80066d8 <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	2206      	movs	r2, #6
 80066d4:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 80066d6:	e059      	b.n	800678c <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80066d8:	7bbb      	ldrb	r3, [r7, #14]
 80066da:	2b03      	cmp	r3, #3
 80066dc:	d156      	bne.n	800678c <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	2206      	movs	r2, #6
 80066e2:	705a      	strb	r2, [r3, #1]
      break;
 80066e4:	e052      	b.n	800678c <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	2206      	movs	r2, #6
 80066ea:	705a      	strb	r2, [r3, #1]
      break;
 80066ec:	e04e      	b.n	800678c <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	d019      	beq.n	800672c <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8006704:	23ff      	movs	r3, #255	; 0xff
 8006706:	6878      	ldr	r0, [r7, #4]
 8006708:	f000 f926 	bl	8006958 <USBH_Get_StringDesc>
 800670c:	4603      	mov	r3, r0
 800670e:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8006710:	7bbb      	ldrb	r3, [r7, #14]
 8006712:	2b00      	cmp	r3, #0
 8006714:	d103      	bne.n	800671e <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	2207      	movs	r2, #7
 800671a:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800671c:	e038      	b.n	8006790 <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800671e:	7bbb      	ldrb	r3, [r7, #14]
 8006720:	2b03      	cmp	r3, #3
 8006722:	d135      	bne.n	8006790 <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	2207      	movs	r2, #7
 8006728:	705a      	strb	r2, [r3, #1]
      break;
 800672a:	e031      	b.n	8006790 <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	2207      	movs	r2, #7
 8006730:	705a      	strb	r2, [r3, #1]
      break;
 8006732:	e02d      	b.n	8006790 <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 800673a:	2b00      	cmp	r3, #0
 800673c:	d017      	beq.n	800676e <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800674a:	23ff      	movs	r3, #255	; 0xff
 800674c:	6878      	ldr	r0, [r7, #4]
 800674e:	f000 f903 	bl	8006958 <USBH_Get_StringDesc>
 8006752:	4603      	mov	r3, r0
 8006754:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8006756:	7bbb      	ldrb	r3, [r7, #14]
 8006758:	2b00      	cmp	r3, #0
 800675a:	d102      	bne.n	8006762 <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 800675c:	2300      	movs	r3, #0
 800675e:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 8006760:	e018      	b.n	8006794 <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006762:	7bbb      	ldrb	r3, [r7, #14]
 8006764:	2b03      	cmp	r3, #3
 8006766:	d115      	bne.n	8006794 <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 8006768:	2300      	movs	r3, #0
 800676a:	73fb      	strb	r3, [r7, #15]
      break;
 800676c:	e012      	b.n	8006794 <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 800676e:	2300      	movs	r3, #0
 8006770:	73fb      	strb	r3, [r7, #15]
      break;
 8006772:	e00f      	b.n	8006794 <USBH_HandleEnum+0x3bc>

    default:
      break;
 8006774:	bf00      	nop
 8006776:	e00e      	b.n	8006796 <USBH_HandleEnum+0x3be>
      break;
 8006778:	bf00      	nop
 800677a:	e00c      	b.n	8006796 <USBH_HandleEnum+0x3be>
      break;
 800677c:	bf00      	nop
 800677e:	e00a      	b.n	8006796 <USBH_HandleEnum+0x3be>
      break;
 8006780:	bf00      	nop
 8006782:	e008      	b.n	8006796 <USBH_HandleEnum+0x3be>
      break;
 8006784:	bf00      	nop
 8006786:	e006      	b.n	8006796 <USBH_HandleEnum+0x3be>
      break;
 8006788:	bf00      	nop
 800678a:	e004      	b.n	8006796 <USBH_HandleEnum+0x3be>
      break;
 800678c:	bf00      	nop
 800678e:	e002      	b.n	8006796 <USBH_HandleEnum+0x3be>
      break;
 8006790:	bf00      	nop
 8006792:	e000      	b.n	8006796 <USBH_HandleEnum+0x3be>
      break;
 8006794:	bf00      	nop
  }
  return Status;
 8006796:	7bfb      	ldrb	r3, [r7, #15]
}
 8006798:	4618      	mov	r0, r3
 800679a:	3710      	adds	r7, #16
 800679c:	46bd      	mov	sp, r7
 800679e:	bd80      	pop	{r7, pc}

080067a0 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 80067a0:	b480      	push	{r7}
 80067a2:	b083      	sub	sp, #12
 80067a4:	af00      	add	r7, sp, #0
 80067a6:	6078      	str	r0, [r7, #4]
 80067a8:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	683a      	ldr	r2, [r7, #0]
 80067ae:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 80067b2:	bf00      	nop
 80067b4:	370c      	adds	r7, #12
 80067b6:	46bd      	mov	sp, r7
 80067b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067bc:	4770      	bx	lr

080067be <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 80067be:	b580      	push	{r7, lr}
 80067c0:	b082      	sub	sp, #8
 80067c2:	af00      	add	r7, sp, #0
 80067c4:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80067cc:	1c5a      	adds	r2, r3, #1
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 80067d4:	6878      	ldr	r0, [r7, #4]
 80067d6:	f000 f804 	bl	80067e2 <USBH_HandleSof>
}
 80067da:	bf00      	nop
 80067dc:	3708      	adds	r7, #8
 80067de:	46bd      	mov	sp, r7
 80067e0:	bd80      	pop	{r7, pc}

080067e2 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 80067e2:	b580      	push	{r7, lr}
 80067e4:	b082      	sub	sp, #8
 80067e6:	af00      	add	r7, sp, #0
 80067e8:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	781b      	ldrb	r3, [r3, #0]
 80067ee:	b2db      	uxtb	r3, r3
 80067f0:	2b0b      	cmp	r3, #11
 80067f2:	d10a      	bne.n	800680a <USBH_HandleSof+0x28>
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	d005      	beq.n	800680a <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006804:	699b      	ldr	r3, [r3, #24]
 8006806:	6878      	ldr	r0, [r7, #4]
 8006808:	4798      	blx	r3
  }
}
 800680a:	bf00      	nop
 800680c:	3708      	adds	r7, #8
 800680e:	46bd      	mov	sp, r7
 8006810:	bd80      	pop	{r7, pc}

08006812 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8006812:	b480      	push	{r7}
 8006814:	b083      	sub	sp, #12
 8006816:	af00      	add	r7, sp, #0
 8006818:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	2201      	movs	r2, #1
 800681e:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 8006822:	bf00      	nop
}
 8006824:	370c      	adds	r7, #12
 8006826:	46bd      	mov	sp, r7
 8006828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800682c:	4770      	bx	lr

0800682e <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800682e:	b480      	push	{r7}
 8006830:	b083      	sub	sp, #12
 8006832:	af00      	add	r7, sp, #0
 8006834:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	2200      	movs	r2, #0
 800683a:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 800683e:	bf00      	nop
}
 8006840:	370c      	adds	r7, #12
 8006842:	46bd      	mov	sp, r7
 8006844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006848:	4770      	bx	lr

0800684a <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800684a:	b480      	push	{r7}
 800684c:	b083      	sub	sp, #12
 800684e:	af00      	add	r7, sp, #0
 8006850:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	2201      	movs	r2, #1
 8006856:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	2200      	movs	r2, #0
 800685e:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	2200      	movs	r2, #0
 8006866:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 800686a:	2300      	movs	r3, #0
}
 800686c:	4618      	mov	r0, r3
 800686e:	370c      	adds	r7, #12
 8006870:	46bd      	mov	sp, r7
 8006872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006876:	4770      	bx	lr

08006878 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8006878:	b580      	push	{r7, lr}
 800687a:	b082      	sub	sp, #8
 800687c:	af00      	add	r7, sp, #0
 800687e:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	2201      	movs	r2, #1
 8006884:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	2200      	movs	r2, #0
 800688c:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	2200      	movs	r2, #0
 8006894:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 8006898:	6878      	ldr	r0, [r7, #4]
 800689a:	f001 f844 	bl	8007926 <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	791b      	ldrb	r3, [r3, #4]
 80068a2:	4619      	mov	r1, r3
 80068a4:	6878      	ldr	r0, [r7, #4]
 80068a6:	f000 fe91 	bl	80075cc <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	795b      	ldrb	r3, [r3, #5]
 80068ae:	4619      	mov	r1, r3
 80068b0:	6878      	ldr	r0, [r7, #4]
 80068b2:	f000 fe8b 	bl	80075cc <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 80068b6:	2300      	movs	r3, #0
}
 80068b8:	4618      	mov	r0, r3
 80068ba:	3708      	adds	r7, #8
 80068bc:	46bd      	mov	sp, r7
 80068be:	bd80      	pop	{r7, pc}

080068c0 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 80068c0:	b580      	push	{r7, lr}
 80068c2:	b086      	sub	sp, #24
 80068c4:	af02      	add	r7, sp, #8
 80068c6:	6078      	str	r0, [r7, #4]
 80068c8:	460b      	mov	r3, r1
 80068ca:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data,
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 80068d2:	78fb      	ldrb	r3, [r7, #3]
 80068d4:	b29b      	uxth	r3, r3
 80068d6:	9300      	str	r3, [sp, #0]
 80068d8:	4613      	mov	r3, r2
 80068da:	f44f 7280 	mov.w	r2, #256	; 0x100
 80068de:	2100      	movs	r1, #0
 80068e0:	6878      	ldr	r0, [r7, #4]
 80068e2:	f000 f864 	bl	80069ae <USBH_GetDescriptor>
 80068e6:	4603      	mov	r3, r0
 80068e8:	73fb      	strb	r3, [r7, #15]
                              (uint16_t)length);

  if (status == USBH_OK)
 80068ea:	7bfb      	ldrb	r3, [r7, #15]
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	d10a      	bne.n	8006906 <USBH_Get_DevDesc+0x46>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	f203 3026 	addw	r0, r3, #806	; 0x326
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 80068fc:	78fa      	ldrb	r2, [r7, #3]
 80068fe:	b292      	uxth	r2, r2
 8006900:	4619      	mov	r1, r3
 8006902:	f000 f918 	bl	8006b36 <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 8006906:	7bfb      	ldrb	r3, [r7, #15]
}
 8006908:	4618      	mov	r0, r3
 800690a:	3710      	adds	r7, #16
 800690c:	46bd      	mov	sp, r7
 800690e:	bd80      	pop	{r7, pc}

08006910 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 8006910:	b580      	push	{r7, lr}
 8006912:	b086      	sub	sp, #24
 8006914:	af02      	add	r7, sp, #8
 8006916:	6078      	str	r0, [r7, #4]
 8006918:	460b      	mov	r3, r1
 800691a:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	331c      	adds	r3, #28
 8006920:	60bb      	str	r3, [r7, #8]

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 8006922:	887b      	ldrh	r3, [r7, #2]
 8006924:	9300      	str	r3, [sp, #0]
 8006926:	68bb      	ldr	r3, [r7, #8]
 8006928:	f44f 7200 	mov.w	r2, #512	; 0x200
 800692c:	2100      	movs	r1, #0
 800692e:	6878      	ldr	r0, [r7, #4]
 8006930:	f000 f83d 	bl	80069ae <USBH_GetDescriptor>
 8006934:	4603      	mov	r3, r0
 8006936:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 8006938:	7bfb      	ldrb	r3, [r7, #15]
 800693a:	2b00      	cmp	r3, #0
 800693c:	d107      	bne.n	800694e <USBH_Get_CfgDesc+0x3e>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 800693e:	887b      	ldrh	r3, [r7, #2]
 8006940:	461a      	mov	r2, r3
 8006942:	68b9      	ldr	r1, [r7, #8]
 8006944:	6878      	ldr	r0, [r7, #4]
 8006946:	f000 f987 	bl	8006c58 <USBH_ParseCfgDesc>
 800694a:	4603      	mov	r3, r0
 800694c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800694e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006950:	4618      	mov	r0, r3
 8006952:	3710      	adds	r7, #16
 8006954:	46bd      	mov	sp, r7
 8006956:	bd80      	pop	{r7, pc}

08006958 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 8006958:	b580      	push	{r7, lr}
 800695a:	b088      	sub	sp, #32
 800695c:	af02      	add	r7, sp, #8
 800695e:	60f8      	str	r0, [r7, #12]
 8006960:	607a      	str	r2, [r7, #4]
 8006962:	461a      	mov	r2, r3
 8006964:	460b      	mov	r3, r1
 8006966:	72fb      	strb	r3, [r7, #11]
 8006968:	4613      	mov	r3, r2
 800696a:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
 800696c:	7afb      	ldrb	r3, [r7, #11]
 800696e:	b29b      	uxth	r3, r3
 8006970:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8006974:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 800697c:	893b      	ldrh	r3, [r7, #8]
 800697e:	9300      	str	r3, [sp, #0]
 8006980:	460b      	mov	r3, r1
 8006982:	2100      	movs	r1, #0
 8006984:	68f8      	ldr	r0, [r7, #12]
 8006986:	f000 f812 	bl	80069ae <USBH_GetDescriptor>
 800698a:	4603      	mov	r3, r0
 800698c:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 800698e:	7dfb      	ldrb	r3, [r7, #23]
 8006990:	2b00      	cmp	r3, #0
 8006992:	d107      	bne.n	80069a4 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800699a:	893a      	ldrh	r2, [r7, #8]
 800699c:	6879      	ldr	r1, [r7, #4]
 800699e:	4618      	mov	r0, r3
 80069a0:	f000 fb24 	bl	8006fec <USBH_ParseStringDesc>
  }

  return status;
 80069a4:	7dfb      	ldrb	r3, [r7, #23]
}
 80069a6:	4618      	mov	r0, r3
 80069a8:	3718      	adds	r7, #24
 80069aa:	46bd      	mov	sp, r7
 80069ac:	bd80      	pop	{r7, pc}

080069ae <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 80069ae:	b580      	push	{r7, lr}
 80069b0:	b084      	sub	sp, #16
 80069b2:	af00      	add	r7, sp, #0
 80069b4:	60f8      	str	r0, [r7, #12]
 80069b6:	607b      	str	r3, [r7, #4]
 80069b8:	460b      	mov	r3, r1
 80069ba:	72fb      	strb	r3, [r7, #11]
 80069bc:	4613      	mov	r3, r2
 80069be:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	789b      	ldrb	r3, [r3, #2]
 80069c4:	2b01      	cmp	r3, #1
 80069c6:	d11c      	bne.n	8006a02 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 80069c8:	7afb      	ldrb	r3, [r7, #11]
 80069ca:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80069ce:	b2da      	uxtb	r2, r3
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	2206      	movs	r2, #6
 80069d8:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	893a      	ldrh	r2, [r7, #8]
 80069de:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 80069e0:	893b      	ldrh	r3, [r7, #8]
 80069e2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80069e6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80069ea:	d104      	bne.n	80069f6 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	f240 4209 	movw	r2, #1033	; 0x409
 80069f2:	829a      	strh	r2, [r3, #20]
 80069f4:	e002      	b.n	80069fc <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	2200      	movs	r2, #0
 80069fa:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	8b3a      	ldrh	r2, [r7, #24]
 8006a00:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 8006a02:	8b3b      	ldrh	r3, [r7, #24]
 8006a04:	461a      	mov	r2, r3
 8006a06:	6879      	ldr	r1, [r7, #4]
 8006a08:	68f8      	ldr	r0, [r7, #12]
 8006a0a:	f000 fb3d 	bl	8007088 <USBH_CtlReq>
 8006a0e:	4603      	mov	r3, r0
}
 8006a10:	4618      	mov	r0, r3
 8006a12:	3710      	adds	r7, #16
 8006a14:	46bd      	mov	sp, r7
 8006a16:	bd80      	pop	{r7, pc}

08006a18 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 8006a18:	b580      	push	{r7, lr}
 8006a1a:	b082      	sub	sp, #8
 8006a1c:	af00      	add	r7, sp, #0
 8006a1e:	6078      	str	r0, [r7, #4]
 8006a20:	460b      	mov	r3, r1
 8006a22:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	789b      	ldrb	r3, [r3, #2]
 8006a28:	2b01      	cmp	r3, #1
 8006a2a:	d10f      	bne.n	8006a4c <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	2200      	movs	r2, #0
 8006a30:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	2205      	movs	r2, #5
 8006a36:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8006a38:	78fb      	ldrb	r3, [r7, #3]
 8006a3a:	b29a      	uxth	r2, r3
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	2200      	movs	r2, #0
 8006a44:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	2200      	movs	r2, #0
 8006a4a:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8006a4c:	2200      	movs	r2, #0
 8006a4e:	2100      	movs	r1, #0
 8006a50:	6878      	ldr	r0, [r7, #4]
 8006a52:	f000 fb19 	bl	8007088 <USBH_CtlReq>
 8006a56:	4603      	mov	r3, r0
}
 8006a58:	4618      	mov	r0, r3
 8006a5a:	3708      	adds	r7, #8
 8006a5c:	46bd      	mov	sp, r7
 8006a5e:	bd80      	pop	{r7, pc}

08006a60 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 8006a60:	b580      	push	{r7, lr}
 8006a62:	b082      	sub	sp, #8
 8006a64:	af00      	add	r7, sp, #0
 8006a66:	6078      	str	r0, [r7, #4]
 8006a68:	460b      	mov	r3, r1
 8006a6a:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	789b      	ldrb	r3, [r3, #2]
 8006a70:	2b01      	cmp	r3, #1
 8006a72:	d10e      	bne.n	8006a92 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	2200      	movs	r2, #0
 8006a78:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	2209      	movs	r2, #9
 8006a7e:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	887a      	ldrh	r2, [r7, #2]
 8006a84:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	2200      	movs	r2, #0
 8006a8a:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	2200      	movs	r2, #0
 8006a90:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8006a92:	2200      	movs	r2, #0
 8006a94:	2100      	movs	r1, #0
 8006a96:	6878      	ldr	r0, [r7, #4]
 8006a98:	f000 faf6 	bl	8007088 <USBH_CtlReq>
 8006a9c:	4603      	mov	r3, r0
}
 8006a9e:	4618      	mov	r0, r3
 8006aa0:	3708      	adds	r7, #8
 8006aa2:	46bd      	mov	sp, r7
 8006aa4:	bd80      	pop	{r7, pc}

08006aa6 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 8006aa6:	b580      	push	{r7, lr}
 8006aa8:	b082      	sub	sp, #8
 8006aaa:	af00      	add	r7, sp, #0
 8006aac:	6078      	str	r0, [r7, #4]
 8006aae:	460b      	mov	r3, r1
 8006ab0:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	789b      	ldrb	r3, [r3, #2]
 8006ab6:	2b01      	cmp	r3, #1
 8006ab8:	d10f      	bne.n	8006ada <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	2200      	movs	r2, #0
 8006abe:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	2203      	movs	r2, #3
 8006ac4:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 8006ac6:	78fb      	ldrb	r3, [r7, #3]
 8006ac8:	b29a      	uxth	r2, r3
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	2200      	movs	r2, #0
 8006ad2:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	2200      	movs	r2, #0
 8006ad8:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8006ada:	2200      	movs	r2, #0
 8006adc:	2100      	movs	r1, #0
 8006ade:	6878      	ldr	r0, [r7, #4]
 8006ae0:	f000 fad2 	bl	8007088 <USBH_CtlReq>
 8006ae4:	4603      	mov	r3, r0
}
 8006ae6:	4618      	mov	r0, r3
 8006ae8:	3708      	adds	r7, #8
 8006aea:	46bd      	mov	sp, r7
 8006aec:	bd80      	pop	{r7, pc}

08006aee <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8006aee:	b580      	push	{r7, lr}
 8006af0:	b082      	sub	sp, #8
 8006af2:	af00      	add	r7, sp, #0
 8006af4:	6078      	str	r0, [r7, #4]
 8006af6:	460b      	mov	r3, r1
 8006af8:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	789b      	ldrb	r3, [r3, #2]
 8006afe:	2b01      	cmp	r3, #1
 8006b00:	d10f      	bne.n	8006b22 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	2202      	movs	r2, #2
 8006b06:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	2201      	movs	r2, #1
 8006b0c:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	2200      	movs	r2, #0
 8006b12:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8006b14:	78fb      	ldrb	r3, [r7, #3]
 8006b16:	b29a      	uxth	r2, r3
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	2200      	movs	r2, #0
 8006b20:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, NULL, 0U);
 8006b22:	2200      	movs	r2, #0
 8006b24:	2100      	movs	r1, #0
 8006b26:	6878      	ldr	r0, [r7, #4]
 8006b28:	f000 faae 	bl	8007088 <USBH_CtlReq>
 8006b2c:	4603      	mov	r3, r0
}
 8006b2e:	4618      	mov	r0, r3
 8006b30:	3708      	adds	r7, #8
 8006b32:	46bd      	mov	sp, r7
 8006b34:	bd80      	pop	{r7, pc}

08006b36 <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 8006b36:	b480      	push	{r7}
 8006b38:	b085      	sub	sp, #20
 8006b3a:	af00      	add	r7, sp, #0
 8006b3c:	60f8      	str	r0, [r7, #12]
 8006b3e:	60b9      	str	r1, [r7, #8]
 8006b40:	4613      	mov	r3, r2
 8006b42:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 8006b44:	68bb      	ldr	r3, [r7, #8]
 8006b46:	781a      	ldrb	r2, [r3, #0]
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 8006b4c:	68bb      	ldr	r3, [r7, #8]
 8006b4e:	785a      	ldrb	r2, [r3, #1]
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 8006b54:	68bb      	ldr	r3, [r7, #8]
 8006b56:	3302      	adds	r3, #2
 8006b58:	781b      	ldrb	r3, [r3, #0]
 8006b5a:	b29a      	uxth	r2, r3
 8006b5c:	68bb      	ldr	r3, [r7, #8]
 8006b5e:	3303      	adds	r3, #3
 8006b60:	781b      	ldrb	r3, [r3, #0]
 8006b62:	b29b      	uxth	r3, r3
 8006b64:	021b      	lsls	r3, r3, #8
 8006b66:	b29b      	uxth	r3, r3
 8006b68:	4313      	orrs	r3, r2
 8006b6a:	b29a      	uxth	r2, r3
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 8006b70:	68bb      	ldr	r3, [r7, #8]
 8006b72:	791a      	ldrb	r2, [r3, #4]
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 8006b78:	68bb      	ldr	r3, [r7, #8]
 8006b7a:	795a      	ldrb	r2, [r3, #5]
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 8006b80:	68bb      	ldr	r3, [r7, #8]
 8006b82:	799a      	ldrb	r2, [r3, #6]
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 8006b88:	68bb      	ldr	r3, [r7, #8]
 8006b8a:	79da      	ldrb	r2, [r3, #7]
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	71da      	strb	r2, [r3, #7]

  /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to 64 */
  switch (dev_desc->bMaxPacketSize)
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	79db      	ldrb	r3, [r3, #7]
 8006b94:	2b20      	cmp	r3, #32
 8006b96:	dc11      	bgt.n	8006bbc <USBH_ParseDevDesc+0x86>
 8006b98:	2b08      	cmp	r3, #8
 8006b9a:	db16      	blt.n	8006bca <USBH_ParseDevDesc+0x94>
 8006b9c:	3b08      	subs	r3, #8
 8006b9e:	2201      	movs	r2, #1
 8006ba0:	fa02 f303 	lsl.w	r3, r2, r3
 8006ba4:	f003 3301 	and.w	r3, r3, #16843009	; 0x1010101
 8006ba8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	bf14      	ite	ne
 8006bb0:	2301      	movne	r3, #1
 8006bb2:	2300      	moveq	r3, #0
 8006bb4:	b2db      	uxtb	r3, r3
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d102      	bne.n	8006bc0 <USBH_ParseDevDesc+0x8a>
 8006bba:	e006      	b.n	8006bca <USBH_ParseDevDesc+0x94>
 8006bbc:	2b40      	cmp	r3, #64	; 0x40
 8006bbe:	d104      	bne.n	8006bca <USBH_ParseDevDesc+0x94>
  {
    case 8:
    case 16:
    case 32:
    case 64:
      dev_desc->bMaxPacketSize = dev_desc->bMaxPacketSize;
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	79da      	ldrb	r2, [r3, #7]
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	71da      	strb	r2, [r3, #7]
      break;
 8006bc8:	e003      	b.n	8006bd2 <USBH_ParseDevDesc+0x9c>

    default:
      /*set the size to 64 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 64U;
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	2240      	movs	r2, #64	; 0x40
 8006bce:	71da      	strb	r2, [r3, #7]
      break;
 8006bd0:	bf00      	nop
  }

  if (length > 8U)
 8006bd2:	88fb      	ldrh	r3, [r7, #6]
 8006bd4:	2b08      	cmp	r3, #8
 8006bd6:	d939      	bls.n	8006c4c <USBH_ParseDevDesc+0x116>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 8006bd8:	68bb      	ldr	r3, [r7, #8]
 8006bda:	3308      	adds	r3, #8
 8006bdc:	781b      	ldrb	r3, [r3, #0]
 8006bde:	b29a      	uxth	r2, r3
 8006be0:	68bb      	ldr	r3, [r7, #8]
 8006be2:	3309      	adds	r3, #9
 8006be4:	781b      	ldrb	r3, [r3, #0]
 8006be6:	b29b      	uxth	r3, r3
 8006be8:	021b      	lsls	r3, r3, #8
 8006bea:	b29b      	uxth	r3, r3
 8006bec:	4313      	orrs	r3, r2
 8006bee:	b29a      	uxth	r2, r3
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 8006bf4:	68bb      	ldr	r3, [r7, #8]
 8006bf6:	330a      	adds	r3, #10
 8006bf8:	781b      	ldrb	r3, [r3, #0]
 8006bfa:	b29a      	uxth	r2, r3
 8006bfc:	68bb      	ldr	r3, [r7, #8]
 8006bfe:	330b      	adds	r3, #11
 8006c00:	781b      	ldrb	r3, [r3, #0]
 8006c02:	b29b      	uxth	r3, r3
 8006c04:	021b      	lsls	r3, r3, #8
 8006c06:	b29b      	uxth	r3, r3
 8006c08:	4313      	orrs	r3, r2
 8006c0a:	b29a      	uxth	r2, r3
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 8006c10:	68bb      	ldr	r3, [r7, #8]
 8006c12:	330c      	adds	r3, #12
 8006c14:	781b      	ldrb	r3, [r3, #0]
 8006c16:	b29a      	uxth	r2, r3
 8006c18:	68bb      	ldr	r3, [r7, #8]
 8006c1a:	330d      	adds	r3, #13
 8006c1c:	781b      	ldrb	r3, [r3, #0]
 8006c1e:	b29b      	uxth	r3, r3
 8006c20:	021b      	lsls	r3, r3, #8
 8006c22:	b29b      	uxth	r3, r3
 8006c24:	4313      	orrs	r3, r2
 8006c26:	b29a      	uxth	r2, r3
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 8006c2c:	68bb      	ldr	r3, [r7, #8]
 8006c2e:	7b9a      	ldrb	r2, [r3, #14]
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 8006c34:	68bb      	ldr	r3, [r7, #8]
 8006c36:	7bda      	ldrb	r2, [r3, #15]
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 8006c3c:	68bb      	ldr	r3, [r7, #8]
 8006c3e:	7c1a      	ldrb	r2, [r3, #16]
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 8006c44:	68bb      	ldr	r3, [r7, #8]
 8006c46:	7c5a      	ldrb	r2, [r3, #17]
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	745a      	strb	r2, [r3, #17]
  }
}
 8006c4c:	bf00      	nop
 8006c4e:	3714      	adds	r7, #20
 8006c50:	46bd      	mov	sp, r7
 8006c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c56:	4770      	bx	lr

08006c58 <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH statuse
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 8006c58:	b580      	push	{r7, lr}
 8006c5a:	b08c      	sub	sp, #48	; 0x30
 8006c5c:	af00      	add	r7, sp, #0
 8006c5e:	60f8      	str	r0, [r7, #12]
 8006c60:	60b9      	str	r1, [r7, #8]
 8006c62:	4613      	mov	r3, r2
 8006c64:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8006c6c:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 8006c6e:	2300      	movs	r3, #0
 8006c70:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 8006c74:	68bb      	ldr	r3, [r7, #8]
 8006c76:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 8006c78:	2300      	movs	r3, #0
 8006c7a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint8_t                      ep_ix = 0U;
 8006c7e:	2300      	movs	r3, #0
 8006c80:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 8006c84:	68bb      	ldr	r3, [r7, #8]
 8006c86:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 8006c88:	68bb      	ldr	r3, [r7, #8]
 8006c8a:	781a      	ldrb	r2, [r3, #0]
 8006c8c:	6a3b      	ldr	r3, [r7, #32]
 8006c8e:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 8006c90:	68bb      	ldr	r3, [r7, #8]
 8006c92:	785a      	ldrb	r2, [r3, #1]
 8006c94:	6a3b      	ldr	r3, [r7, #32]
 8006c96:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 8006c98:	68bb      	ldr	r3, [r7, #8]
 8006c9a:	3302      	adds	r3, #2
 8006c9c:	781b      	ldrb	r3, [r3, #0]
 8006c9e:	b29a      	uxth	r2, r3
 8006ca0:	68bb      	ldr	r3, [r7, #8]
 8006ca2:	3303      	adds	r3, #3
 8006ca4:	781b      	ldrb	r3, [r3, #0]
 8006ca6:	b29b      	uxth	r3, r3
 8006ca8:	021b      	lsls	r3, r3, #8
 8006caa:	b29b      	uxth	r3, r3
 8006cac:	4313      	orrs	r3, r2
 8006cae:	b29b      	uxth	r3, r3
 8006cb0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006cb4:	bf28      	it	cs
 8006cb6:	f44f 7380 	movcs.w	r3, #256	; 0x100
 8006cba:	b29a      	uxth	r2, r3
 8006cbc:	6a3b      	ldr	r3, [r7, #32]
 8006cbe:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 8006cc0:	68bb      	ldr	r3, [r7, #8]
 8006cc2:	791a      	ldrb	r2, [r3, #4]
 8006cc4:	6a3b      	ldr	r3, [r7, #32]
 8006cc6:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 8006cc8:	68bb      	ldr	r3, [r7, #8]
 8006cca:	795a      	ldrb	r2, [r3, #5]
 8006ccc:	6a3b      	ldr	r3, [r7, #32]
 8006cce:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 8006cd0:	68bb      	ldr	r3, [r7, #8]
 8006cd2:	799a      	ldrb	r2, [r3, #6]
 8006cd4:	6a3b      	ldr	r3, [r7, #32]
 8006cd6:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 8006cd8:	68bb      	ldr	r3, [r7, #8]
 8006cda:	79da      	ldrb	r2, [r3, #7]
 8006cdc:	6a3b      	ldr	r3, [r7, #32]
 8006cde:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 8006ce0:	68bb      	ldr	r3, [r7, #8]
 8006ce2:	7a1a      	ldrb	r2, [r3, #8]
 8006ce4:	6a3b      	ldr	r3, [r7, #32]
 8006ce6:	721a      	strb	r2, [r3, #8]

  /* Make sure that the Confguration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (cfg_desc->bLength  != USB_CONFIGURATION_DESC_SIZE)
 8006ce8:	6a3b      	ldr	r3, [r7, #32]
 8006cea:	781b      	ldrb	r3, [r3, #0]
 8006cec:	2b09      	cmp	r3, #9
 8006cee:	d002      	beq.n	8006cf6 <USBH_ParseCfgDesc+0x9e>
  {
    cfg_desc->bLength = USB_CONFIGURATION_DESC_SIZE;
 8006cf0:	6a3b      	ldr	r3, [r7, #32]
 8006cf2:	2209      	movs	r2, #9
 8006cf4:	701a      	strb	r2, [r3, #0]
  }

  if (length > USB_CONFIGURATION_DESC_SIZE)
 8006cf6:	88fb      	ldrh	r3, [r7, #6]
 8006cf8:	2b09      	cmp	r3, #9
 8006cfa:	f240 809d 	bls.w	8006e38 <USBH_ParseCfgDesc+0x1e0>
  {
    ptr = USB_LEN_CFG_DESC;
 8006cfe:	2309      	movs	r3, #9
 8006d00:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 8006d02:	2300      	movs	r3, #0
 8006d04:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8006d06:	e081      	b.n	8006e0c <USBH_ParseCfgDesc+0x1b4>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8006d08:	f107 0316 	add.w	r3, r7, #22
 8006d0c:	4619      	mov	r1, r3
 8006d0e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006d10:	f000 f99f 	bl	8007052 <USBH_GetNextDesc>
 8006d14:	62b8      	str	r0, [r7, #40]	; 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 8006d16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d18:	785b      	ldrb	r3, [r3, #1]
 8006d1a:	2b04      	cmp	r3, #4
 8006d1c:	d176      	bne.n	8006e0c <USBH_ParseCfgDesc+0x1b4>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 8006d1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d20:	781b      	ldrb	r3, [r3, #0]
 8006d22:	2b09      	cmp	r3, #9
 8006d24:	d002      	beq.n	8006d2c <USBH_ParseCfgDesc+0xd4>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 8006d26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d28:	2209      	movs	r2, #9
 8006d2a:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 8006d2c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006d30:	221a      	movs	r2, #26
 8006d32:	fb02 f303 	mul.w	r3, r2, r3
 8006d36:	3308      	adds	r3, #8
 8006d38:	6a3a      	ldr	r2, [r7, #32]
 8006d3a:	4413      	add	r3, r2
 8006d3c:	3302      	adds	r3, #2
 8006d3e:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 8006d40:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006d42:	69f8      	ldr	r0, [r7, #28]
 8006d44:	f000 f87e 	bl	8006e44 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 8006d48:	2300      	movs	r3, #0
 8006d4a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 8006d4e:	2300      	movs	r3, #0
 8006d50:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8006d52:	e043      	b.n	8006ddc <USBH_ParseCfgDesc+0x184>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8006d54:	f107 0316 	add.w	r3, r7, #22
 8006d58:	4619      	mov	r1, r3
 8006d5a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006d5c:	f000 f979 	bl	8007052 <USBH_GetNextDesc>
 8006d60:	62b8      	str	r0, [r7, #40]	; 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8006d62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d64:	785b      	ldrb	r3, [r3, #1]
 8006d66:	2b05      	cmp	r3, #5
 8006d68:	d138      	bne.n	8006ddc <USBH_ParseCfgDesc+0x184>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) && (pif->bInterfaceSubClass == 0x02U))
 8006d6a:	69fb      	ldr	r3, [r7, #28]
 8006d6c:	795b      	ldrb	r3, [r3, #5]
 8006d6e:	2b01      	cmp	r3, #1
 8006d70:	d10f      	bne.n	8006d92 <USBH_ParseCfgDesc+0x13a>
 8006d72:	69fb      	ldr	r3, [r7, #28]
 8006d74:	799b      	ldrb	r3, [r3, #6]
 8006d76:	2b02      	cmp	r3, #2
 8006d78:	d10b      	bne.n	8006d92 <USBH_ParseCfgDesc+0x13a>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8006d7a:	69fb      	ldr	r3, [r7, #28]
 8006d7c:	79db      	ldrb	r3, [r3, #7]
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	d10f      	bne.n	8006da2 <USBH_ParseCfgDesc+0x14a>
 8006d82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d84:	781b      	ldrb	r3, [r3, #0]
 8006d86:	2b09      	cmp	r3, #9
 8006d88:	d00b      	beq.n	8006da2 <USBH_ParseCfgDesc+0x14a>
              {
                pdesc->bLength = 0x09U;
 8006d8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d8c:	2209      	movs	r2, #9
 8006d8e:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8006d90:	e007      	b.n	8006da2 <USBH_ParseCfgDesc+0x14a>
              }
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else if (pdesc->bLength != USB_ENDPOINT_DESC_SIZE)
 8006d92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d94:	781b      	ldrb	r3, [r3, #0]
 8006d96:	2b07      	cmp	r3, #7
 8006d98:	d004      	beq.n	8006da4 <USBH_ParseCfgDesc+0x14c>
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 8006d9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d9c:	2207      	movs	r2, #7
 8006d9e:	701a      	strb	r2, [r3, #0]
 8006da0:	e000      	b.n	8006da4 <USBH_ParseCfgDesc+0x14c>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8006da2:	bf00      	nop
            else
            {
              /* ... */
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 8006da4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006da8:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8006dac:	3201      	adds	r2, #1
 8006dae:	00d2      	lsls	r2, r2, #3
 8006db0:	211a      	movs	r1, #26
 8006db2:	fb01 f303 	mul.w	r3, r1, r3
 8006db6:	4413      	add	r3, r2
 8006db8:	3308      	adds	r3, #8
 8006dba:	6a3a      	ldr	r2, [r7, #32]
 8006dbc:	4413      	add	r3, r2
 8006dbe:	3304      	adds	r3, #4
 8006dc0:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 8006dc2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006dc4:	69b9      	ldr	r1, [r7, #24]
 8006dc6:	68f8      	ldr	r0, [r7, #12]
 8006dc8:	f000 f86b 	bl	8006ea2 <USBH_ParseEPDesc>
 8006dcc:	4603      	mov	r3, r0
 8006dce:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            ep_ix++;
 8006dd2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8006dd6:	3301      	adds	r3, #1
 8006dd8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8006ddc:	69fb      	ldr	r3, [r7, #28]
 8006dde:	791b      	ldrb	r3, [r3, #4]
 8006de0:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8006de4:	429a      	cmp	r2, r3
 8006de6:	d204      	bcs.n	8006df2 <USBH_ParseCfgDesc+0x19a>
 8006de8:	6a3b      	ldr	r3, [r7, #32]
 8006dea:	885a      	ldrh	r2, [r3, #2]
 8006dec:	8afb      	ldrh	r3, [r7, #22]
 8006dee:	429a      	cmp	r2, r3
 8006df0:	d8b0      	bhi.n	8006d54 <USBH_ParseCfgDesc+0xfc>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 8006df2:	69fb      	ldr	r3, [r7, #28]
 8006df4:	791b      	ldrb	r3, [r3, #4]
 8006df6:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8006dfa:	429a      	cmp	r2, r3
 8006dfc:	d201      	bcs.n	8006e02 <USBH_ParseCfgDesc+0x1aa>
        {
          return USBH_NOT_SUPPORTED;
 8006dfe:	2303      	movs	r3, #3
 8006e00:	e01c      	b.n	8006e3c <USBH_ParseCfgDesc+0x1e4>
        }

        if_ix++;
 8006e02:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006e06:	3301      	adds	r3, #1
 8006e08:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8006e0c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006e10:	2b01      	cmp	r3, #1
 8006e12:	d805      	bhi.n	8006e20 <USBH_ParseCfgDesc+0x1c8>
 8006e14:	6a3b      	ldr	r3, [r7, #32]
 8006e16:	885a      	ldrh	r2, [r3, #2]
 8006e18:	8afb      	ldrh	r3, [r7, #22]
 8006e1a:	429a      	cmp	r2, r3
 8006e1c:	f63f af74 	bhi.w	8006d08 <USBH_ParseCfgDesc+0xb0>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 8006e20:	6a3b      	ldr	r3, [r7, #32]
 8006e22:	791b      	ldrb	r3, [r3, #4]
 8006e24:	2b02      	cmp	r3, #2
 8006e26:	bf28      	it	cs
 8006e28:	2302      	movcs	r3, #2
 8006e2a:	b2db      	uxtb	r3, r3
 8006e2c:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8006e30:	429a      	cmp	r2, r3
 8006e32:	d201      	bcs.n	8006e38 <USBH_ParseCfgDesc+0x1e0>
    {
      return USBH_NOT_SUPPORTED;
 8006e34:	2303      	movs	r3, #3
 8006e36:	e001      	b.n	8006e3c <USBH_ParseCfgDesc+0x1e4>
    }
  }

  return status;
 8006e38:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8006e3c:	4618      	mov	r0, r3
 8006e3e:	3730      	adds	r7, #48	; 0x30
 8006e40:	46bd      	mov	sp, r7
 8006e42:	bd80      	pop	{r7, pc}

08006e44 <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 8006e44:	b480      	push	{r7}
 8006e46:	b083      	sub	sp, #12
 8006e48:	af00      	add	r7, sp, #0
 8006e4a:	6078      	str	r0, [r7, #4]
 8006e4c:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 8006e4e:	683b      	ldr	r3, [r7, #0]
 8006e50:	781a      	ldrb	r2, [r3, #0]
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 8006e56:	683b      	ldr	r3, [r7, #0]
 8006e58:	785a      	ldrb	r2, [r3, #1]
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 8006e5e:	683b      	ldr	r3, [r7, #0]
 8006e60:	789a      	ldrb	r2, [r3, #2]
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 8006e66:	683b      	ldr	r3, [r7, #0]
 8006e68:	78da      	ldrb	r2, [r3, #3]
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 8006e6e:	683b      	ldr	r3, [r7, #0]
 8006e70:	791a      	ldrb	r2, [r3, #4]
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 8006e76:	683b      	ldr	r3, [r7, #0]
 8006e78:	795a      	ldrb	r2, [r3, #5]
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 8006e7e:	683b      	ldr	r3, [r7, #0]
 8006e80:	799a      	ldrb	r2, [r3, #6]
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 8006e86:	683b      	ldr	r3, [r7, #0]
 8006e88:	79da      	ldrb	r2, [r3, #7]
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 8006e8e:	683b      	ldr	r3, [r7, #0]
 8006e90:	7a1a      	ldrb	r2, [r3, #8]
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	721a      	strb	r2, [r3, #8]
}
 8006e96:	bf00      	nop
 8006e98:	370c      	adds	r7, #12
 8006e9a:	46bd      	mov	sp, r7
 8006e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ea0:	4770      	bx	lr

08006ea2 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef  USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef  *ep_descriptor,
                                            uint8_t *buf)
{
 8006ea2:	b480      	push	{r7}
 8006ea4:	b087      	sub	sp, #28
 8006ea6:	af00      	add	r7, sp, #0
 8006ea8:	60f8      	str	r0, [r7, #12]
 8006eaa:	60b9      	str	r1, [r7, #8]
 8006eac:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 8006eae:	2300      	movs	r3, #0
 8006eb0:	75fb      	strb	r3, [r7, #23]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	781a      	ldrb	r2, [r3, #0]
 8006eb6:	68bb      	ldr	r3, [r7, #8]
 8006eb8:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	785a      	ldrb	r2, [r3, #1]
 8006ebe:	68bb      	ldr	r3, [r7, #8]
 8006ec0:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	789a      	ldrb	r2, [r3, #2]
 8006ec6:	68bb      	ldr	r3, [r7, #8]
 8006ec8:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	78da      	ldrb	r2, [r3, #3]
 8006ece:	68bb      	ldr	r3, [r7, #8]
 8006ed0:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	3304      	adds	r3, #4
 8006ed6:	781b      	ldrb	r3, [r3, #0]
 8006ed8:	b29a      	uxth	r2, r3
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	3305      	adds	r3, #5
 8006ede:	781b      	ldrb	r3, [r3, #0]
 8006ee0:	b29b      	uxth	r3, r3
 8006ee2:	021b      	lsls	r3, r3, #8
 8006ee4:	b29b      	uxth	r3, r3
 8006ee6:	4313      	orrs	r3, r2
 8006ee8:	b29a      	uxth	r2, r3
 8006eea:	68bb      	ldr	r3, [r7, #8]
 8006eec:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	799a      	ldrb	r2, [r3, #6]
 8006ef2:	68bb      	ldr	r3, [r7, #8]
 8006ef4:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if (ep_descriptor->wMaxPacketSize == 0x00U)
 8006ef6:	68bb      	ldr	r3, [r7, #8]
 8006ef8:	889b      	ldrh	r3, [r3, #4]
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	d102      	bne.n	8006f04 <USBH_ParseEPDesc+0x62>
  {
    status = USBH_NOT_SUPPORTED;
 8006efe:	2303      	movs	r3, #3
 8006f00:	75fb      	strb	r3, [r7, #23]
 8006f02:	e033      	b.n	8006f6c <USBH_ParseEPDesc+0xca>

  }
  else if ((uint16_t)USBH_MAX_DATA_BUFFER < USBH_MAX_EP_PACKET_SIZE)
  {
    /* Make sure that maximum packet size (bits 0..10) does not exceed the total buffer length */
    ep_descriptor->wMaxPacketSize &= ~0x7FFU;
 8006f04:	68bb      	ldr	r3, [r7, #8]
 8006f06:	889b      	ldrh	r3, [r3, #4]
 8006f08:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8006f0c:	f023 0307 	bic.w	r3, r3, #7
 8006f10:	b29a      	uxth	r2, r3
 8006f12:	68bb      	ldr	r3, [r7, #8]
 8006f14:	809a      	strh	r2, [r3, #4]
    ep_descriptor->wMaxPacketSize |= MIN((uint16_t)(LE16(buf + 4) & 0x7FFU), (uint16_t)USBH_MAX_DATA_BUFFER);
 8006f16:	68bb      	ldr	r3, [r7, #8]
 8006f18:	889b      	ldrh	r3, [r3, #4]
 8006f1a:	b21a      	sxth	r2, r3
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	3304      	adds	r3, #4
 8006f20:	781b      	ldrb	r3, [r3, #0]
 8006f22:	b299      	uxth	r1, r3
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	3305      	adds	r3, #5
 8006f28:	781b      	ldrb	r3, [r3, #0]
 8006f2a:	b29b      	uxth	r3, r3
 8006f2c:	021b      	lsls	r3, r3, #8
 8006f2e:	b29b      	uxth	r3, r3
 8006f30:	430b      	orrs	r3, r1
 8006f32:	b29b      	uxth	r3, r3
 8006f34:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	d110      	bne.n	8006f5e <USBH_ParseEPDesc+0xbc>
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	3304      	adds	r3, #4
 8006f40:	781b      	ldrb	r3, [r3, #0]
 8006f42:	b299      	uxth	r1, r3
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	3305      	adds	r3, #5
 8006f48:	781b      	ldrb	r3, [r3, #0]
 8006f4a:	b29b      	uxth	r3, r3
 8006f4c:	021b      	lsls	r3, r3, #8
 8006f4e:	b29b      	uxth	r3, r3
 8006f50:	430b      	orrs	r3, r1
 8006f52:	b29b      	uxth	r3, r3
 8006f54:	b21b      	sxth	r3, r3
 8006f56:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006f5a:	b21b      	sxth	r3, r3
 8006f5c:	e001      	b.n	8006f62 <USBH_ParseEPDesc+0xc0>
 8006f5e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006f62:	4313      	orrs	r3, r2
 8006f64:	b21b      	sxth	r3, r3
 8006f66:	b29a      	uxth	r2, r3
 8006f68:	68bb      	ldr	r3, [r7, #8]
 8006f6a:	809a      	strh	r2, [r3, #4]
  {
    /* ... */
  }

  /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	d116      	bne.n	8006fa4 <USBH_ParseEPDesc+0x102>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8006f76:	68bb      	ldr	r3, [r7, #8]
 8006f78:	78db      	ldrb	r3, [r3, #3]
 8006f7a:	f003 0303 	and.w	r3, r3, #3
 8006f7e:	2b01      	cmp	r3, #1
 8006f80:	d005      	beq.n	8006f8e <USBH_ParseEPDesc+0xec>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 8006f82:	68bb      	ldr	r3, [r7, #8]
 8006f84:	78db      	ldrb	r3, [r3, #3]
 8006f86:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8006f8a:	2b03      	cmp	r3, #3
 8006f8c:	d127      	bne.n	8006fde <USBH_ParseEPDesc+0x13c>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8006f8e:	68bb      	ldr	r3, [r7, #8]
 8006f90:	799b      	ldrb	r3, [r3, #6]
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	d003      	beq.n	8006f9e <USBH_ParseEPDesc+0xfc>
 8006f96:	68bb      	ldr	r3, [r7, #8]
 8006f98:	799b      	ldrb	r3, [r3, #6]
 8006f9a:	2b10      	cmp	r3, #16
 8006f9c:	d91f      	bls.n	8006fde <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 8006f9e:	2303      	movs	r3, #3
 8006fa0:	75fb      	strb	r3, [r7, #23]
 8006fa2:	e01c      	b.n	8006fde <USBH_ParseEPDesc+0x13c>
    }
  }
  else
  {
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 8006fa4:	68bb      	ldr	r3, [r7, #8]
 8006fa6:	78db      	ldrb	r3, [r3, #3]
 8006fa8:	f003 0303 	and.w	r3, r3, #3
 8006fac:	2b01      	cmp	r3, #1
 8006fae:	d10a      	bne.n	8006fc6 <USBH_ParseEPDesc+0x124>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8006fb0:	68bb      	ldr	r3, [r7, #8]
 8006fb2:	799b      	ldrb	r3, [r3, #6]
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	d003      	beq.n	8006fc0 <USBH_ParseEPDesc+0x11e>
 8006fb8:	68bb      	ldr	r3, [r7, #8]
 8006fba:	799b      	ldrb	r3, [r3, #6]
 8006fbc:	2b10      	cmp	r3, #16
 8006fbe:	d90e      	bls.n	8006fde <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 8006fc0:	2303      	movs	r3, #3
 8006fc2:	75fb      	strb	r3, [r7, #23]
 8006fc4:	e00b      	b.n	8006fde <USBH_ParseEPDesc+0x13c>
      }
    }
    /* For full-/low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 8006fc6:	68bb      	ldr	r3, [r7, #8]
 8006fc8:	78db      	ldrb	r3, [r3, #3]
 8006fca:	f003 0303 	and.w	r3, r3, #3
 8006fce:	2b03      	cmp	r3, #3
 8006fd0:	d105      	bne.n	8006fde <USBH_ParseEPDesc+0x13c>
    {
      if (ep_descriptor->bInterval == 0U)
 8006fd2:	68bb      	ldr	r3, [r7, #8]
 8006fd4:	799b      	ldrb	r3, [r3, #6]
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	d101      	bne.n	8006fde <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 8006fda:	2303      	movs	r3, #3
 8006fdc:	75fb      	strb	r3, [r7, #23]
    {
      /* ... */
    }
  }

  return status;
 8006fde:	7dfb      	ldrb	r3, [r7, #23]
}
 8006fe0:	4618      	mov	r0, r3
 8006fe2:	371c      	adds	r7, #28
 8006fe4:	46bd      	mov	sp, r7
 8006fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fea:	4770      	bx	lr

08006fec <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 8006fec:	b480      	push	{r7}
 8006fee:	b087      	sub	sp, #28
 8006ff0:	af00      	add	r7, sp, #0
 8006ff2:	60f8      	str	r0, [r7, #12]
 8006ff4:	60b9      	str	r1, [r7, #8]
 8006ff6:	4613      	mov	r3, r2
 8006ff8:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	3301      	adds	r3, #1
 8006ffe:	781b      	ldrb	r3, [r3, #0]
 8007000:	2b03      	cmp	r3, #3
 8007002:	d120      	bne.n	8007046 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	781b      	ldrb	r3, [r3, #0]
 8007008:	1e9a      	subs	r2, r3, #2
 800700a:	88fb      	ldrh	r3, [r7, #6]
 800700c:	4293      	cmp	r3, r2
 800700e:	bf28      	it	cs
 8007010:	4613      	movcs	r3, r2
 8007012:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	3302      	adds	r3, #2
 8007018:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 800701a:	2300      	movs	r3, #0
 800701c:	82fb      	strh	r3, [r7, #22]
 800701e:	e00b      	b.n	8007038 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 8007020:	8afb      	ldrh	r3, [r7, #22]
 8007022:	68fa      	ldr	r2, [r7, #12]
 8007024:	4413      	add	r3, r2
 8007026:	781a      	ldrb	r2, [r3, #0]
 8007028:	68bb      	ldr	r3, [r7, #8]
 800702a:	701a      	strb	r2, [r3, #0]
      pdest++;
 800702c:	68bb      	ldr	r3, [r7, #8]
 800702e:	3301      	adds	r3, #1
 8007030:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 8007032:	8afb      	ldrh	r3, [r7, #22]
 8007034:	3302      	adds	r3, #2
 8007036:	82fb      	strh	r3, [r7, #22]
 8007038:	8afa      	ldrh	r2, [r7, #22]
 800703a:	8abb      	ldrh	r3, [r7, #20]
 800703c:	429a      	cmp	r2, r3
 800703e:	d3ef      	bcc.n	8007020 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 8007040:	68bb      	ldr	r3, [r7, #8]
 8007042:	2200      	movs	r2, #0
 8007044:	701a      	strb	r2, [r3, #0]
  }
}
 8007046:	bf00      	nop
 8007048:	371c      	adds	r7, #28
 800704a:	46bd      	mov	sp, r7
 800704c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007050:	4770      	bx	lr

08007052 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 8007052:	b480      	push	{r7}
 8007054:	b085      	sub	sp, #20
 8007056:	af00      	add	r7, sp, #0
 8007058:	6078      	str	r0, [r7, #4]
 800705a:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800705c:	683b      	ldr	r3, [r7, #0]
 800705e:	881a      	ldrh	r2, [r3, #0]
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	781b      	ldrb	r3, [r3, #0]
 8007064:	b29b      	uxth	r3, r3
 8007066:	4413      	add	r3, r2
 8007068:	b29a      	uxth	r2, r3
 800706a:	683b      	ldr	r3, [r7, #0]
 800706c:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	781b      	ldrb	r3, [r3, #0]
 8007072:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	4413      	add	r3, r2
 8007078:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800707a:	68fb      	ldr	r3, [r7, #12]
}
 800707c:	4618      	mov	r0, r3
 800707e:	3714      	adds	r7, #20
 8007080:	46bd      	mov	sp, r7
 8007082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007086:	4770      	bx	lr

08007088 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 8007088:	b580      	push	{r7, lr}
 800708a:	b086      	sub	sp, #24
 800708c:	af00      	add	r7, sp, #0
 800708e:	60f8      	str	r0, [r7, #12]
 8007090:	60b9      	str	r1, [r7, #8]
 8007092:	4613      	mov	r3, r2
 8007094:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8007096:	2301      	movs	r3, #1
 8007098:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	789b      	ldrb	r3, [r3, #2]
 800709e:	2b01      	cmp	r3, #1
 80070a0:	d002      	beq.n	80070a8 <USBH_CtlReq+0x20>
 80070a2:	2b02      	cmp	r3, #2
 80070a4:	d00f      	beq.n	80070c6 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 80070a6:	e027      	b.n	80070f8 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	68ba      	ldr	r2, [r7, #8]
 80070ac:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	88fa      	ldrh	r2, [r7, #6]
 80070b2:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	2201      	movs	r2, #1
 80070b8:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	2202      	movs	r2, #2
 80070be:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 80070c0:	2301      	movs	r3, #1
 80070c2:	75fb      	strb	r3, [r7, #23]
      break;
 80070c4:	e018      	b.n	80070f8 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 80070c6:	68f8      	ldr	r0, [r7, #12]
 80070c8:	f000 f81c 	bl	8007104 <USBH_HandleControl>
 80070cc:	4603      	mov	r3, r0
 80070ce:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 80070d0:	7dfb      	ldrb	r3, [r7, #23]
 80070d2:	2b00      	cmp	r3, #0
 80070d4:	d002      	beq.n	80070dc <USBH_CtlReq+0x54>
 80070d6:	7dfb      	ldrb	r3, [r7, #23]
 80070d8:	2b03      	cmp	r3, #3
 80070da:	d106      	bne.n	80070ea <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	2201      	movs	r2, #1
 80070e0:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 80070e2:	68fb      	ldr	r3, [r7, #12]
 80070e4:	2200      	movs	r2, #0
 80070e6:	761a      	strb	r2, [r3, #24]
      break;
 80070e8:	e005      	b.n	80070f6 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 80070ea:	7dfb      	ldrb	r3, [r7, #23]
 80070ec:	2b02      	cmp	r3, #2
 80070ee:	d102      	bne.n	80070f6 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 80070f0:	68fb      	ldr	r3, [r7, #12]
 80070f2:	2201      	movs	r2, #1
 80070f4:	709a      	strb	r2, [r3, #2]
      break;
 80070f6:	bf00      	nop
  }
  return status;
 80070f8:	7dfb      	ldrb	r3, [r7, #23]
}
 80070fa:	4618      	mov	r0, r3
 80070fc:	3718      	adds	r7, #24
 80070fe:	46bd      	mov	sp, r7
 8007100:	bd80      	pop	{r7, pc}
	...

08007104 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 8007104:	b580      	push	{r7, lr}
 8007106:	b086      	sub	sp, #24
 8007108:	af02      	add	r7, sp, #8
 800710a:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800710c:	2301      	movs	r3, #1
 800710e:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8007110:	2300      	movs	r3, #0
 8007112:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	7e1b      	ldrb	r3, [r3, #24]
 8007118:	3b01      	subs	r3, #1
 800711a:	2b0a      	cmp	r3, #10
 800711c:	f200 8156 	bhi.w	80073cc <USBH_HandleControl+0x2c8>
 8007120:	a201      	add	r2, pc, #4	; (adr r2, 8007128 <USBH_HandleControl+0x24>)
 8007122:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007126:	bf00      	nop
 8007128:	08007155 	.word	0x08007155
 800712c:	0800716f 	.word	0x0800716f
 8007130:	080071d9 	.word	0x080071d9
 8007134:	080071ff 	.word	0x080071ff
 8007138:	08007237 	.word	0x08007237
 800713c:	08007261 	.word	0x08007261
 8007140:	080072b3 	.word	0x080072b3
 8007144:	080072d5 	.word	0x080072d5
 8007148:	08007311 	.word	0x08007311
 800714c:	08007337 	.word	0x08007337
 8007150:	08007375 	.word	0x08007375
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	f103 0110 	add.w	r1, r3, #16
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	795b      	ldrb	r3, [r3, #5]
 800715e:	461a      	mov	r2, r3
 8007160:	6878      	ldr	r0, [r7, #4]
 8007162:	f000 f943 	bl	80073ec <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	2202      	movs	r2, #2
 800716a:	761a      	strb	r2, [r3, #24]
      break;
 800716c:	e139      	b.n	80073e2 <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	795b      	ldrb	r3, [r3, #5]
 8007172:	4619      	mov	r1, r3
 8007174:	6878      	ldr	r0, [r7, #4]
 8007176:	f000 fcc5 	bl	8007b04 <USBH_LL_GetURBState>
 800717a:	4603      	mov	r3, r0
 800717c:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800717e:	7bbb      	ldrb	r3, [r7, #14]
 8007180:	2b01      	cmp	r3, #1
 8007182:	d11e      	bne.n	80071c2 <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	7c1b      	ldrb	r3, [r3, #16]
 8007188:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800718c:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	8adb      	ldrh	r3, [r3, #22]
 8007192:	2b00      	cmp	r3, #0
 8007194:	d00a      	beq.n	80071ac <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 8007196:	7b7b      	ldrb	r3, [r7, #13]
 8007198:	2b80      	cmp	r3, #128	; 0x80
 800719a:	d103      	bne.n	80071a4 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	2203      	movs	r2, #3
 80071a0:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 80071a2:	e115      	b.n	80073d0 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	2205      	movs	r2, #5
 80071a8:	761a      	strb	r2, [r3, #24]
      break;
 80071aa:	e111      	b.n	80073d0 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 80071ac:	7b7b      	ldrb	r3, [r7, #13]
 80071ae:	2b80      	cmp	r3, #128	; 0x80
 80071b0:	d103      	bne.n	80071ba <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	2209      	movs	r2, #9
 80071b6:	761a      	strb	r2, [r3, #24]
      break;
 80071b8:	e10a      	b.n	80073d0 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	2207      	movs	r2, #7
 80071be:	761a      	strb	r2, [r3, #24]
      break;
 80071c0:	e106      	b.n	80073d0 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 80071c2:	7bbb      	ldrb	r3, [r7, #14]
 80071c4:	2b04      	cmp	r3, #4
 80071c6:	d003      	beq.n	80071d0 <USBH_HandleControl+0xcc>
 80071c8:	7bbb      	ldrb	r3, [r7, #14]
 80071ca:	2b02      	cmp	r3, #2
 80071cc:	f040 8100 	bne.w	80073d0 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	220b      	movs	r2, #11
 80071d4:	761a      	strb	r2, [r3, #24]
      break;
 80071d6:	e0fb      	b.n	80073d0 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80071de:	b29a      	uxth	r2, r3
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	6899      	ldr	r1, [r3, #8]
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	899a      	ldrh	r2, [r3, #12]
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	791b      	ldrb	r3, [r3, #4]
 80071f0:	6878      	ldr	r0, [r7, #4]
 80071f2:	f000 f93a 	bl	800746a <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	2204      	movs	r2, #4
 80071fa:	761a      	strb	r2, [r3, #24]
      break;
 80071fc:	e0f1      	b.n	80073e2 <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	791b      	ldrb	r3, [r3, #4]
 8007202:	4619      	mov	r1, r3
 8007204:	6878      	ldr	r0, [r7, #4]
 8007206:	f000 fc7d 	bl	8007b04 <USBH_LL_GetURBState>
 800720a:	4603      	mov	r3, r0
 800720c:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800720e:	7bbb      	ldrb	r3, [r7, #14]
 8007210:	2b01      	cmp	r3, #1
 8007212:	d102      	bne.n	800721a <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	2209      	movs	r2, #9
 8007218:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800721a:	7bbb      	ldrb	r3, [r7, #14]
 800721c:	2b05      	cmp	r3, #5
 800721e:	d102      	bne.n	8007226 <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 8007220:	2303      	movs	r3, #3
 8007222:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8007224:	e0d6      	b.n	80073d4 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 8007226:	7bbb      	ldrb	r3, [r7, #14]
 8007228:	2b04      	cmp	r3, #4
 800722a:	f040 80d3 	bne.w	80073d4 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	220b      	movs	r2, #11
 8007232:	761a      	strb	r2, [r3, #24]
      break;
 8007234:	e0ce      	b.n	80073d4 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	6899      	ldr	r1, [r3, #8]
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	899a      	ldrh	r2, [r3, #12]
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	795b      	ldrb	r3, [r3, #5]
 8007242:	2001      	movs	r0, #1
 8007244:	9000      	str	r0, [sp, #0]
 8007246:	6878      	ldr	r0, [r7, #4]
 8007248:	f000 f8ea 	bl	8007420 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007252:	b29a      	uxth	r2, r3
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	2206      	movs	r2, #6
 800725c:	761a      	strb	r2, [r3, #24]
      break;
 800725e:	e0c0      	b.n	80073e2 <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	795b      	ldrb	r3, [r3, #5]
 8007264:	4619      	mov	r1, r3
 8007266:	6878      	ldr	r0, [r7, #4]
 8007268:	f000 fc4c 	bl	8007b04 <USBH_LL_GetURBState>
 800726c:	4603      	mov	r3, r0
 800726e:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8007270:	7bbb      	ldrb	r3, [r7, #14]
 8007272:	2b01      	cmp	r3, #1
 8007274:	d103      	bne.n	800727e <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	2207      	movs	r2, #7
 800727a:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800727c:	e0ac      	b.n	80073d8 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 800727e:	7bbb      	ldrb	r3, [r7, #14]
 8007280:	2b05      	cmp	r3, #5
 8007282:	d105      	bne.n	8007290 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	220c      	movs	r2, #12
 8007288:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800728a:	2303      	movs	r3, #3
 800728c:	73fb      	strb	r3, [r7, #15]
      break;
 800728e:	e0a3      	b.n	80073d8 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 8007290:	7bbb      	ldrb	r3, [r7, #14]
 8007292:	2b02      	cmp	r3, #2
 8007294:	d103      	bne.n	800729e <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	2205      	movs	r2, #5
 800729a:	761a      	strb	r2, [r3, #24]
      break;
 800729c:	e09c      	b.n	80073d8 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 800729e:	7bbb      	ldrb	r3, [r7, #14]
 80072a0:	2b04      	cmp	r3, #4
 80072a2:	f040 8099 	bne.w	80073d8 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	220b      	movs	r2, #11
 80072aa:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 80072ac:	2302      	movs	r3, #2
 80072ae:	73fb      	strb	r3, [r7, #15]
      break;
 80072b0:	e092      	b.n	80073d8 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	791b      	ldrb	r3, [r3, #4]
 80072b6:	2200      	movs	r2, #0
 80072b8:	2100      	movs	r1, #0
 80072ba:	6878      	ldr	r0, [r7, #4]
 80072bc:	f000 f8d5 	bl	800746a <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80072c6:	b29a      	uxth	r2, r3
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	2208      	movs	r2, #8
 80072d0:	761a      	strb	r2, [r3, #24]

      break;
 80072d2:	e086      	b.n	80073e2 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	791b      	ldrb	r3, [r3, #4]
 80072d8:	4619      	mov	r1, r3
 80072da:	6878      	ldr	r0, [r7, #4]
 80072dc:	f000 fc12 	bl	8007b04 <USBH_LL_GetURBState>
 80072e0:	4603      	mov	r3, r0
 80072e2:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 80072e4:	7bbb      	ldrb	r3, [r7, #14]
 80072e6:	2b01      	cmp	r3, #1
 80072e8:	d105      	bne.n	80072f6 <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	220d      	movs	r2, #13
 80072ee:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 80072f0:	2300      	movs	r3, #0
 80072f2:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 80072f4:	e072      	b.n	80073dc <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 80072f6:	7bbb      	ldrb	r3, [r7, #14]
 80072f8:	2b04      	cmp	r3, #4
 80072fa:	d103      	bne.n	8007304 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	220b      	movs	r2, #11
 8007300:	761a      	strb	r2, [r3, #24]
      break;
 8007302:	e06b      	b.n	80073dc <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 8007304:	7bbb      	ldrb	r3, [r7, #14]
 8007306:	2b05      	cmp	r3, #5
 8007308:	d168      	bne.n	80073dc <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 800730a:	2303      	movs	r3, #3
 800730c:	73fb      	strb	r3, [r7, #15]
      break;
 800730e:	e065      	b.n	80073dc <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	795b      	ldrb	r3, [r3, #5]
 8007314:	2201      	movs	r2, #1
 8007316:	9200      	str	r2, [sp, #0]
 8007318:	2200      	movs	r2, #0
 800731a:	2100      	movs	r1, #0
 800731c:	6878      	ldr	r0, [r7, #4]
 800731e:	f000 f87f 	bl	8007420 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007328:	b29a      	uxth	r2, r3
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	220a      	movs	r2, #10
 8007332:	761a      	strb	r2, [r3, #24]
      break;
 8007334:	e055      	b.n	80073e2 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	795b      	ldrb	r3, [r3, #5]
 800733a:	4619      	mov	r1, r3
 800733c:	6878      	ldr	r0, [r7, #4]
 800733e:	f000 fbe1 	bl	8007b04 <USBH_LL_GetURBState>
 8007342:	4603      	mov	r3, r0
 8007344:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 8007346:	7bbb      	ldrb	r3, [r7, #14]
 8007348:	2b01      	cmp	r3, #1
 800734a:	d105      	bne.n	8007358 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 800734c:	2300      	movs	r3, #0
 800734e:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	220d      	movs	r2, #13
 8007354:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8007356:	e043      	b.n	80073e0 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 8007358:	7bbb      	ldrb	r3, [r7, #14]
 800735a:	2b02      	cmp	r3, #2
 800735c:	d103      	bne.n	8007366 <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	2209      	movs	r2, #9
 8007362:	761a      	strb	r2, [r3, #24]
      break;
 8007364:	e03c      	b.n	80073e0 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 8007366:	7bbb      	ldrb	r3, [r7, #14]
 8007368:	2b04      	cmp	r3, #4
 800736a:	d139      	bne.n	80073e0 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	220b      	movs	r2, #11
 8007370:	761a      	strb	r2, [r3, #24]
      break;
 8007372:	e035      	b.n	80073e0 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	7e5b      	ldrb	r3, [r3, #25]
 8007378:	3301      	adds	r3, #1
 800737a:	b2da      	uxtb	r2, r3
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	765a      	strb	r2, [r3, #25]
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	7e5b      	ldrb	r3, [r3, #25]
 8007384:	2b02      	cmp	r3, #2
 8007386:	d806      	bhi.n	8007396 <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	2201      	movs	r2, #1
 800738c:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	2201      	movs	r2, #1
 8007392:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 8007394:	e025      	b.n	80073e2 <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800739c:	2106      	movs	r1, #6
 800739e:	6878      	ldr	r0, [r7, #4]
 80073a0:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	2200      	movs	r2, #0
 80073a6:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	795b      	ldrb	r3, [r3, #5]
 80073ac:	4619      	mov	r1, r3
 80073ae:	6878      	ldr	r0, [r7, #4]
 80073b0:	f000 f90c 	bl	80075cc <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	791b      	ldrb	r3, [r3, #4]
 80073b8:	4619      	mov	r1, r3
 80073ba:	6878      	ldr	r0, [r7, #4]
 80073bc:	f000 f906 	bl	80075cc <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	2200      	movs	r2, #0
 80073c4:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 80073c6:	2302      	movs	r3, #2
 80073c8:	73fb      	strb	r3, [r7, #15]
      break;
 80073ca:	e00a      	b.n	80073e2 <USBH_HandleControl+0x2de>

    default:
      break;
 80073cc:	bf00      	nop
 80073ce:	e008      	b.n	80073e2 <USBH_HandleControl+0x2de>
      break;
 80073d0:	bf00      	nop
 80073d2:	e006      	b.n	80073e2 <USBH_HandleControl+0x2de>
      break;
 80073d4:	bf00      	nop
 80073d6:	e004      	b.n	80073e2 <USBH_HandleControl+0x2de>
      break;
 80073d8:	bf00      	nop
 80073da:	e002      	b.n	80073e2 <USBH_HandleControl+0x2de>
      break;
 80073dc:	bf00      	nop
 80073de:	e000      	b.n	80073e2 <USBH_HandleControl+0x2de>
      break;
 80073e0:	bf00      	nop
  }

  return status;
 80073e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80073e4:	4618      	mov	r0, r3
 80073e6:	3710      	adds	r7, #16
 80073e8:	46bd      	mov	sp, r7
 80073ea:	bd80      	pop	{r7, pc}

080073ec <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 80073ec:	b580      	push	{r7, lr}
 80073ee:	b088      	sub	sp, #32
 80073f0:	af04      	add	r7, sp, #16
 80073f2:	60f8      	str	r0, [r7, #12]
 80073f4:	60b9      	str	r1, [r7, #8]
 80073f6:	4613      	mov	r3, r2
 80073f8:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80073fa:	79f9      	ldrb	r1, [r7, #7]
 80073fc:	2300      	movs	r3, #0
 80073fe:	9303      	str	r3, [sp, #12]
 8007400:	2308      	movs	r3, #8
 8007402:	9302      	str	r3, [sp, #8]
 8007404:	68bb      	ldr	r3, [r7, #8]
 8007406:	9301      	str	r3, [sp, #4]
 8007408:	2300      	movs	r3, #0
 800740a:	9300      	str	r3, [sp, #0]
 800740c:	2300      	movs	r3, #0
 800740e:	2200      	movs	r2, #0
 8007410:	68f8      	ldr	r0, [r7, #12]
 8007412:	f000 fb46 	bl	8007aa2 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 8007416:	2300      	movs	r3, #0
}
 8007418:	4618      	mov	r0, r3
 800741a:	3710      	adds	r7, #16
 800741c:	46bd      	mov	sp, r7
 800741e:	bd80      	pop	{r7, pc}

08007420 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 8007420:	b580      	push	{r7, lr}
 8007422:	b088      	sub	sp, #32
 8007424:	af04      	add	r7, sp, #16
 8007426:	60f8      	str	r0, [r7, #12]
 8007428:	60b9      	str	r1, [r7, #8]
 800742a:	4611      	mov	r1, r2
 800742c:	461a      	mov	r2, r3
 800742e:	460b      	mov	r3, r1
 8007430:	80fb      	strh	r3, [r7, #6]
 8007432:	4613      	mov	r3, r2
 8007434:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8007436:	68fb      	ldr	r3, [r7, #12]
 8007438:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800743c:	2b00      	cmp	r3, #0
 800743e:	d001      	beq.n	8007444 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8007440:	2300      	movs	r3, #0
 8007442:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8007444:	7979      	ldrb	r1, [r7, #5]
 8007446:	7e3b      	ldrb	r3, [r7, #24]
 8007448:	9303      	str	r3, [sp, #12]
 800744a:	88fb      	ldrh	r3, [r7, #6]
 800744c:	9302      	str	r3, [sp, #8]
 800744e:	68bb      	ldr	r3, [r7, #8]
 8007450:	9301      	str	r3, [sp, #4]
 8007452:	2301      	movs	r3, #1
 8007454:	9300      	str	r3, [sp, #0]
 8007456:	2300      	movs	r3, #0
 8007458:	2200      	movs	r2, #0
 800745a:	68f8      	ldr	r0, [r7, #12]
 800745c:	f000 fb21 	bl	8007aa2 <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8007460:	2300      	movs	r3, #0
}
 8007462:	4618      	mov	r0, r3
 8007464:	3710      	adds	r7, #16
 8007466:	46bd      	mov	sp, r7
 8007468:	bd80      	pop	{r7, pc}

0800746a <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800746a:	b580      	push	{r7, lr}
 800746c:	b088      	sub	sp, #32
 800746e:	af04      	add	r7, sp, #16
 8007470:	60f8      	str	r0, [r7, #12]
 8007472:	60b9      	str	r1, [r7, #8]
 8007474:	4611      	mov	r1, r2
 8007476:	461a      	mov	r2, r3
 8007478:	460b      	mov	r3, r1
 800747a:	80fb      	strh	r3, [r7, #6]
 800747c:	4613      	mov	r3, r2
 800747e:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8007480:	7979      	ldrb	r1, [r7, #5]
 8007482:	2300      	movs	r3, #0
 8007484:	9303      	str	r3, [sp, #12]
 8007486:	88fb      	ldrh	r3, [r7, #6]
 8007488:	9302      	str	r3, [sp, #8]
 800748a:	68bb      	ldr	r3, [r7, #8]
 800748c:	9301      	str	r3, [sp, #4]
 800748e:	2301      	movs	r3, #1
 8007490:	9300      	str	r3, [sp, #0]
 8007492:	2300      	movs	r3, #0
 8007494:	2201      	movs	r2, #1
 8007496:	68f8      	ldr	r0, [r7, #12]
 8007498:	f000 fb03 	bl	8007aa2 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800749c:	2300      	movs	r3, #0

}
 800749e:	4618      	mov	r0, r3
 80074a0:	3710      	adds	r7, #16
 80074a2:	46bd      	mov	sp, r7
 80074a4:	bd80      	pop	{r7, pc}

080074a6 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 80074a6:	b580      	push	{r7, lr}
 80074a8:	b088      	sub	sp, #32
 80074aa:	af04      	add	r7, sp, #16
 80074ac:	60f8      	str	r0, [r7, #12]
 80074ae:	60b9      	str	r1, [r7, #8]
 80074b0:	4611      	mov	r1, r2
 80074b2:	461a      	mov	r2, r3
 80074b4:	460b      	mov	r3, r1
 80074b6:	80fb      	strh	r3, [r7, #6]
 80074b8:	4613      	mov	r3, r2
 80074ba:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 80074bc:	68fb      	ldr	r3, [r7, #12]
 80074be:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80074c2:	2b00      	cmp	r3, #0
 80074c4:	d001      	beq.n	80074ca <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 80074c6:	2300      	movs	r3, #0
 80074c8:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80074ca:	7979      	ldrb	r1, [r7, #5]
 80074cc:	7e3b      	ldrb	r3, [r7, #24]
 80074ce:	9303      	str	r3, [sp, #12]
 80074d0:	88fb      	ldrh	r3, [r7, #6]
 80074d2:	9302      	str	r3, [sp, #8]
 80074d4:	68bb      	ldr	r3, [r7, #8]
 80074d6:	9301      	str	r3, [sp, #4]
 80074d8:	2301      	movs	r3, #1
 80074da:	9300      	str	r3, [sp, #0]
 80074dc:	2302      	movs	r3, #2
 80074de:	2200      	movs	r2, #0
 80074e0:	68f8      	ldr	r0, [r7, #12]
 80074e2:	f000 fade 	bl	8007aa2 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 80074e6:	2300      	movs	r3, #0
}
 80074e8:	4618      	mov	r0, r3
 80074ea:	3710      	adds	r7, #16
 80074ec:	46bd      	mov	sp, r7
 80074ee:	bd80      	pop	{r7, pc}

080074f0 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 80074f0:	b580      	push	{r7, lr}
 80074f2:	b088      	sub	sp, #32
 80074f4:	af04      	add	r7, sp, #16
 80074f6:	60f8      	str	r0, [r7, #12]
 80074f8:	60b9      	str	r1, [r7, #8]
 80074fa:	4611      	mov	r1, r2
 80074fc:	461a      	mov	r2, r3
 80074fe:	460b      	mov	r3, r1
 8007500:	80fb      	strh	r3, [r7, #6]
 8007502:	4613      	mov	r3, r2
 8007504:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8007506:	7979      	ldrb	r1, [r7, #5]
 8007508:	2300      	movs	r3, #0
 800750a:	9303      	str	r3, [sp, #12]
 800750c:	88fb      	ldrh	r3, [r7, #6]
 800750e:	9302      	str	r3, [sp, #8]
 8007510:	68bb      	ldr	r3, [r7, #8]
 8007512:	9301      	str	r3, [sp, #4]
 8007514:	2301      	movs	r3, #1
 8007516:	9300      	str	r3, [sp, #0]
 8007518:	2302      	movs	r3, #2
 800751a:	2201      	movs	r2, #1
 800751c:	68f8      	ldr	r0, [r7, #12]
 800751e:	f000 fac0 	bl	8007aa2 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8007522:	2300      	movs	r3, #0
}
 8007524:	4618      	mov	r0, r3
 8007526:	3710      	adds	r7, #16
 8007528:	46bd      	mov	sp, r7
 800752a:	bd80      	pop	{r7, pc}

0800752c <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800752c:	b580      	push	{r7, lr}
 800752e:	b086      	sub	sp, #24
 8007530:	af04      	add	r7, sp, #16
 8007532:	6078      	str	r0, [r7, #4]
 8007534:	4608      	mov	r0, r1
 8007536:	4611      	mov	r1, r2
 8007538:	461a      	mov	r2, r3
 800753a:	4603      	mov	r3, r0
 800753c:	70fb      	strb	r3, [r7, #3]
 800753e:	460b      	mov	r3, r1
 8007540:	70bb      	strb	r3, [r7, #2]
 8007542:	4613      	mov	r3, r2
 8007544:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 8007546:	7878      	ldrb	r0, [r7, #1]
 8007548:	78ba      	ldrb	r2, [r7, #2]
 800754a:	78f9      	ldrb	r1, [r7, #3]
 800754c:	8b3b      	ldrh	r3, [r7, #24]
 800754e:	9302      	str	r3, [sp, #8]
 8007550:	7d3b      	ldrb	r3, [r7, #20]
 8007552:	9301      	str	r3, [sp, #4]
 8007554:	7c3b      	ldrb	r3, [r7, #16]
 8007556:	9300      	str	r3, [sp, #0]
 8007558:	4603      	mov	r3, r0
 800755a:	6878      	ldr	r0, [r7, #4]
 800755c:	f000 fa53 	bl	8007a06 <USBH_LL_OpenPipe>

  return USBH_OK;
 8007560:	2300      	movs	r3, #0
}
 8007562:	4618      	mov	r0, r3
 8007564:	3708      	adds	r7, #8
 8007566:	46bd      	mov	sp, r7
 8007568:	bd80      	pop	{r7, pc}

0800756a <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800756a:	b580      	push	{r7, lr}
 800756c:	b082      	sub	sp, #8
 800756e:	af00      	add	r7, sp, #0
 8007570:	6078      	str	r0, [r7, #4]
 8007572:	460b      	mov	r3, r1
 8007574:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 8007576:	78fb      	ldrb	r3, [r7, #3]
 8007578:	4619      	mov	r1, r3
 800757a:	6878      	ldr	r0, [r7, #4]
 800757c:	f000 fa72 	bl	8007a64 <USBH_LL_ClosePipe>

  return USBH_OK;
 8007580:	2300      	movs	r3, #0
}
 8007582:	4618      	mov	r0, r3
 8007584:	3708      	adds	r7, #8
 8007586:	46bd      	mov	sp, r7
 8007588:	bd80      	pop	{r7, pc}

0800758a <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800758a:	b580      	push	{r7, lr}
 800758c:	b084      	sub	sp, #16
 800758e:	af00      	add	r7, sp, #0
 8007590:	6078      	str	r0, [r7, #4]
 8007592:	460b      	mov	r3, r1
 8007594:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 8007596:	6878      	ldr	r0, [r7, #4]
 8007598:	f000 f836 	bl	8007608 <USBH_GetFreePipe>
 800759c:	4603      	mov	r3, r0
 800759e:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 80075a0:	89fb      	ldrh	r3, [r7, #14]
 80075a2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80075a6:	4293      	cmp	r3, r2
 80075a8:	d00a      	beq.n	80075c0 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 80075aa:	78fa      	ldrb	r2, [r7, #3]
 80075ac:	89fb      	ldrh	r3, [r7, #14]
 80075ae:	f003 030f 	and.w	r3, r3, #15
 80075b2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80075b6:	6879      	ldr	r1, [r7, #4]
 80075b8:	33e0      	adds	r3, #224	; 0xe0
 80075ba:	009b      	lsls	r3, r3, #2
 80075bc:	440b      	add	r3, r1
 80075be:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 80075c0:	89fb      	ldrh	r3, [r7, #14]
 80075c2:	b2db      	uxtb	r3, r3
}
 80075c4:	4618      	mov	r0, r3
 80075c6:	3710      	adds	r7, #16
 80075c8:	46bd      	mov	sp, r7
 80075ca:	bd80      	pop	{r7, pc}

080075cc <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 80075cc:	b480      	push	{r7}
 80075ce:	b083      	sub	sp, #12
 80075d0:	af00      	add	r7, sp, #0
 80075d2:	6078      	str	r0, [r7, #4]
 80075d4:	460b      	mov	r3, r1
 80075d6:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 80075d8:	78fb      	ldrb	r3, [r7, #3]
 80075da:	2b0f      	cmp	r3, #15
 80075dc:	d80d      	bhi.n	80075fa <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 80075de:	78fb      	ldrb	r3, [r7, #3]
 80075e0:	687a      	ldr	r2, [r7, #4]
 80075e2:	33e0      	adds	r3, #224	; 0xe0
 80075e4:	009b      	lsls	r3, r3, #2
 80075e6:	4413      	add	r3, r2
 80075e8:	685a      	ldr	r2, [r3, #4]
 80075ea:	78fb      	ldrb	r3, [r7, #3]
 80075ec:	f3c2 020e 	ubfx	r2, r2, #0, #15
 80075f0:	6879      	ldr	r1, [r7, #4]
 80075f2:	33e0      	adds	r3, #224	; 0xe0
 80075f4:	009b      	lsls	r3, r3, #2
 80075f6:	440b      	add	r3, r1
 80075f8:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 80075fa:	2300      	movs	r3, #0
}
 80075fc:	4618      	mov	r0, r3
 80075fe:	370c      	adds	r7, #12
 8007600:	46bd      	mov	sp, r7
 8007602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007606:	4770      	bx	lr

08007608 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 8007608:	b480      	push	{r7}
 800760a:	b085      	sub	sp, #20
 800760c:	af00      	add	r7, sp, #0
 800760e:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8007610:	2300      	movs	r3, #0
 8007612:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 8007614:	2300      	movs	r3, #0
 8007616:	73fb      	strb	r3, [r7, #15]
 8007618:	e00f      	b.n	800763a <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800761a:	7bfb      	ldrb	r3, [r7, #15]
 800761c:	687a      	ldr	r2, [r7, #4]
 800761e:	33e0      	adds	r3, #224	; 0xe0
 8007620:	009b      	lsls	r3, r3, #2
 8007622:	4413      	add	r3, r2
 8007624:	685b      	ldr	r3, [r3, #4]
 8007626:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800762a:	2b00      	cmp	r3, #0
 800762c:	d102      	bne.n	8007634 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800762e:	7bfb      	ldrb	r3, [r7, #15]
 8007630:	b29b      	uxth	r3, r3
 8007632:	e007      	b.n	8007644 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 8007634:	7bfb      	ldrb	r3, [r7, #15]
 8007636:	3301      	adds	r3, #1
 8007638:	73fb      	strb	r3, [r7, #15]
 800763a:	7bfb      	ldrb	r3, [r7, #15]
 800763c:	2b0f      	cmp	r3, #15
 800763e:	d9ec      	bls.n	800761a <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 8007640:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 8007644:	4618      	mov	r0, r3
 8007646:	3714      	adds	r7, #20
 8007648:	46bd      	mov	sp, r7
 800764a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800764e:	4770      	bx	lr

08007650 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 8007650:	b580      	push	{r7, lr}
 8007652:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 8007654:	2201      	movs	r2, #1
 8007656:	490e      	ldr	r1, [pc, #56]	; (8007690 <MX_USB_HOST_Init+0x40>)
 8007658:	480e      	ldr	r0, [pc, #56]	; (8007694 <MX_USB_HOST_Init+0x44>)
 800765a:	f7fe fba7 	bl	8005dac <USBH_Init>
 800765e:	4603      	mov	r3, r0
 8007660:	2b00      	cmp	r3, #0
 8007662:	d001      	beq.n	8007668 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 8007664:	f7f9 faa4 	bl	8000bb0 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 8007668:	490b      	ldr	r1, [pc, #44]	; (8007698 <MX_USB_HOST_Init+0x48>)
 800766a:	480a      	ldr	r0, [pc, #40]	; (8007694 <MX_USB_HOST_Init+0x44>)
 800766c:	f7fe fc2c 	bl	8005ec8 <USBH_RegisterClass>
 8007670:	4603      	mov	r3, r0
 8007672:	2b00      	cmp	r3, #0
 8007674:	d001      	beq.n	800767a <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 8007676:	f7f9 fa9b 	bl	8000bb0 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 800767a:	4806      	ldr	r0, [pc, #24]	; (8007694 <MX_USB_HOST_Init+0x44>)
 800767c:	f7fe fcb0 	bl	8005fe0 <USBH_Start>
 8007680:	4603      	mov	r3, r0
 8007682:	2b00      	cmp	r3, #0
 8007684:	d001      	beq.n	800768a <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 8007686:	f7f9 fa93 	bl	8000bb0 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800768a:	bf00      	nop
 800768c:	bd80      	pop	{r7, pc}
 800768e:	bf00      	nop
 8007690:	080076b1 	.word	0x080076b1
 8007694:	200001a8 	.word	0x200001a8
 8007698:	2000000c 	.word	0x2000000c

0800769c <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 800769c:	b580      	push	{r7, lr}
 800769e:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 80076a0:	4802      	ldr	r0, [pc, #8]	; (80076ac <MX_USB_HOST_Process+0x10>)
 80076a2:	f7fe fcad 	bl	8006000 <USBH_Process>
}
 80076a6:	bf00      	nop
 80076a8:	bd80      	pop	{r7, pc}
 80076aa:	bf00      	nop
 80076ac:	200001a8 	.word	0x200001a8

080076b0 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 80076b0:	b480      	push	{r7}
 80076b2:	b083      	sub	sp, #12
 80076b4:	af00      	add	r7, sp, #0
 80076b6:	6078      	str	r0, [r7, #4]
 80076b8:	460b      	mov	r3, r1
 80076ba:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 80076bc:	78fb      	ldrb	r3, [r7, #3]
 80076be:	3b01      	subs	r3, #1
 80076c0:	2b04      	cmp	r3, #4
 80076c2:	d819      	bhi.n	80076f8 <USBH_UserProcess+0x48>
 80076c4:	a201      	add	r2, pc, #4	; (adr r2, 80076cc <USBH_UserProcess+0x1c>)
 80076c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076ca:	bf00      	nop
 80076cc:	080076f9 	.word	0x080076f9
 80076d0:	080076e9 	.word	0x080076e9
 80076d4:	080076f9 	.word	0x080076f9
 80076d8:	080076f1 	.word	0x080076f1
 80076dc:	080076e1 	.word	0x080076e1
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 80076e0:	4b09      	ldr	r3, [pc, #36]	; (8007708 <USBH_UserProcess+0x58>)
 80076e2:	2203      	movs	r2, #3
 80076e4:	701a      	strb	r2, [r3, #0]
  break;
 80076e6:	e008      	b.n	80076fa <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 80076e8:	4b07      	ldr	r3, [pc, #28]	; (8007708 <USBH_UserProcess+0x58>)
 80076ea:	2202      	movs	r2, #2
 80076ec:	701a      	strb	r2, [r3, #0]
  break;
 80076ee:	e004      	b.n	80076fa <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 80076f0:	4b05      	ldr	r3, [pc, #20]	; (8007708 <USBH_UserProcess+0x58>)
 80076f2:	2201      	movs	r2, #1
 80076f4:	701a      	strb	r2, [r3, #0]
  break;
 80076f6:	e000      	b.n	80076fa <USBH_UserProcess+0x4a>

  default:
  break;
 80076f8:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 80076fa:	bf00      	nop
 80076fc:	370c      	adds	r7, #12
 80076fe:	46bd      	mov	sp, r7
 8007700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007704:	4770      	bx	lr
 8007706:	bf00      	nop
 8007708:	20000580 	.word	0x20000580

0800770c <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800770c:	b580      	push	{r7, lr}
 800770e:	b08a      	sub	sp, #40	; 0x28
 8007710:	af00      	add	r7, sp, #0
 8007712:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007714:	f107 0314 	add.w	r3, r7, #20
 8007718:	2200      	movs	r2, #0
 800771a:	601a      	str	r2, [r3, #0]
 800771c:	605a      	str	r2, [r3, #4]
 800771e:	609a      	str	r2, [r3, #8]
 8007720:	60da      	str	r2, [r3, #12]
 8007722:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800772c:	d147      	bne.n	80077be <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800772e:	2300      	movs	r3, #0
 8007730:	613b      	str	r3, [r7, #16]
 8007732:	4b25      	ldr	r3, [pc, #148]	; (80077c8 <HAL_HCD_MspInit+0xbc>)
 8007734:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007736:	4a24      	ldr	r2, [pc, #144]	; (80077c8 <HAL_HCD_MspInit+0xbc>)
 8007738:	f043 0301 	orr.w	r3, r3, #1
 800773c:	6313      	str	r3, [r2, #48]	; 0x30
 800773e:	4b22      	ldr	r3, [pc, #136]	; (80077c8 <HAL_HCD_MspInit+0xbc>)
 8007740:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007742:	f003 0301 	and.w	r3, r3, #1
 8007746:	613b      	str	r3, [r7, #16]
 8007748:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800774a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800774e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8007750:	2300      	movs	r3, #0
 8007752:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007754:	2300      	movs	r3, #0
 8007756:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8007758:	f107 0314 	add.w	r3, r7, #20
 800775c:	4619      	mov	r1, r3
 800775e:	481b      	ldr	r0, [pc, #108]	; (80077cc <HAL_HCD_MspInit+0xc0>)
 8007760:	f7f9 fdb2 	bl	80012c8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8007764:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8007768:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800776a:	2302      	movs	r3, #2
 800776c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800776e:	2300      	movs	r3, #0
 8007770:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007772:	2300      	movs	r3, #0
 8007774:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8007776:	230a      	movs	r3, #10
 8007778:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800777a:	f107 0314 	add.w	r3, r7, #20
 800777e:	4619      	mov	r1, r3
 8007780:	4812      	ldr	r0, [pc, #72]	; (80077cc <HAL_HCD_MspInit+0xc0>)
 8007782:	f7f9 fda1 	bl	80012c8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8007786:	4b10      	ldr	r3, [pc, #64]	; (80077c8 <HAL_HCD_MspInit+0xbc>)
 8007788:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800778a:	4a0f      	ldr	r2, [pc, #60]	; (80077c8 <HAL_HCD_MspInit+0xbc>)
 800778c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007790:	6353      	str	r3, [r2, #52]	; 0x34
 8007792:	2300      	movs	r3, #0
 8007794:	60fb      	str	r3, [r7, #12]
 8007796:	4b0c      	ldr	r3, [pc, #48]	; (80077c8 <HAL_HCD_MspInit+0xbc>)
 8007798:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800779a:	4a0b      	ldr	r2, [pc, #44]	; (80077c8 <HAL_HCD_MspInit+0xbc>)
 800779c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80077a0:	6453      	str	r3, [r2, #68]	; 0x44
 80077a2:	4b09      	ldr	r3, [pc, #36]	; (80077c8 <HAL_HCD_MspInit+0xbc>)
 80077a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80077a6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80077aa:	60fb      	str	r3, [r7, #12]
 80077ac:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80077ae:	2200      	movs	r2, #0
 80077b0:	2100      	movs	r1, #0
 80077b2:	2043      	movs	r0, #67	; 0x43
 80077b4:	f7f9 fd51 	bl	800125a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80077b8:	2043      	movs	r0, #67	; 0x43
 80077ba:	f7f9 fd6a 	bl	8001292 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80077be:	bf00      	nop
 80077c0:	3728      	adds	r7, #40	; 0x28
 80077c2:	46bd      	mov	sp, r7
 80077c4:	bd80      	pop	{r7, pc}
 80077c6:	bf00      	nop
 80077c8:	40023800 	.word	0x40023800
 80077cc:	40020000 	.word	0x40020000

080077d0 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 80077d0:	b580      	push	{r7, lr}
 80077d2:	b082      	sub	sp, #8
 80077d4:	af00      	add	r7, sp, #0
 80077d6:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80077de:	4618      	mov	r0, r3
 80077e0:	f7fe ffed 	bl	80067be <USBH_LL_IncTimer>
}
 80077e4:	bf00      	nop
 80077e6:	3708      	adds	r7, #8
 80077e8:	46bd      	mov	sp, r7
 80077ea:	bd80      	pop	{r7, pc}

080077ec <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 80077ec:	b580      	push	{r7, lr}
 80077ee:	b082      	sub	sp, #8
 80077f0:	af00      	add	r7, sp, #0
 80077f2:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80077fa:	4618      	mov	r0, r3
 80077fc:	f7ff f825 	bl	800684a <USBH_LL_Connect>
}
 8007800:	bf00      	nop
 8007802:	3708      	adds	r7, #8
 8007804:	46bd      	mov	sp, r7
 8007806:	bd80      	pop	{r7, pc}

08007808 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8007808:	b580      	push	{r7, lr}
 800780a:	b082      	sub	sp, #8
 800780c:	af00      	add	r7, sp, #0
 800780e:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8007816:	4618      	mov	r0, r3
 8007818:	f7ff f82e 	bl	8006878 <USBH_LL_Disconnect>
}
 800781c:	bf00      	nop
 800781e:	3708      	adds	r7, #8
 8007820:	46bd      	mov	sp, r7
 8007822:	bd80      	pop	{r7, pc}

08007824 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8007824:	b480      	push	{r7}
 8007826:	b083      	sub	sp, #12
 8007828:	af00      	add	r7, sp, #0
 800782a:	6078      	str	r0, [r7, #4]
 800782c:	460b      	mov	r3, r1
 800782e:	70fb      	strb	r3, [r7, #3]
 8007830:	4613      	mov	r3, r2
 8007832:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 8007834:	bf00      	nop
 8007836:	370c      	adds	r7, #12
 8007838:	46bd      	mov	sp, r7
 800783a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800783e:	4770      	bx	lr

08007840 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8007840:	b580      	push	{r7, lr}
 8007842:	b082      	sub	sp, #8
 8007844:	af00      	add	r7, sp, #0
 8007846:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800784e:	4618      	mov	r0, r3
 8007850:	f7fe ffdf 	bl	8006812 <USBH_LL_PortEnabled>
}
 8007854:	bf00      	nop
 8007856:	3708      	adds	r7, #8
 8007858:	46bd      	mov	sp, r7
 800785a:	bd80      	pop	{r7, pc}

0800785c <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800785c:	b580      	push	{r7, lr}
 800785e:	b082      	sub	sp, #8
 8007860:	af00      	add	r7, sp, #0
 8007862:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800786a:	4618      	mov	r0, r3
 800786c:	f7fe ffdf 	bl	800682e <USBH_LL_PortDisabled>
}
 8007870:	bf00      	nop
 8007872:	3708      	adds	r7, #8
 8007874:	46bd      	mov	sp, r7
 8007876:	bd80      	pop	{r7, pc}

08007878 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8007878:	b580      	push	{r7, lr}
 800787a:	b082      	sub	sp, #8
 800787c:	af00      	add	r7, sp, #0
 800787e:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8007886:	2b01      	cmp	r3, #1
 8007888:	d12a      	bne.n	80078e0 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800788a:	4a18      	ldr	r2, [pc, #96]	; (80078ec <USBH_LL_Init+0x74>)
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	4a15      	ldr	r2, [pc, #84]	; (80078ec <USBH_LL_Init+0x74>)
 8007896:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800789a:	4b14      	ldr	r3, [pc, #80]	; (80078ec <USBH_LL_Init+0x74>)
 800789c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80078a0:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 80078a2:	4b12      	ldr	r3, [pc, #72]	; (80078ec <USBH_LL_Init+0x74>)
 80078a4:	2208      	movs	r2, #8
 80078a6:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 80078a8:	4b10      	ldr	r3, [pc, #64]	; (80078ec <USBH_LL_Init+0x74>)
 80078aa:	2201      	movs	r2, #1
 80078ac:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80078ae:	4b0f      	ldr	r3, [pc, #60]	; (80078ec <USBH_LL_Init+0x74>)
 80078b0:	2200      	movs	r2, #0
 80078b2:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 80078b4:	4b0d      	ldr	r3, [pc, #52]	; (80078ec <USBH_LL_Init+0x74>)
 80078b6:	2202      	movs	r2, #2
 80078b8:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80078ba:	4b0c      	ldr	r3, [pc, #48]	; (80078ec <USBH_LL_Init+0x74>)
 80078bc:	2200      	movs	r2, #0
 80078be:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 80078c0:	480a      	ldr	r0, [pc, #40]	; (80078ec <USBH_LL_Init+0x74>)
 80078c2:	f7f9 feb6 	bl	8001632 <HAL_HCD_Init>
 80078c6:	4603      	mov	r3, r0
 80078c8:	2b00      	cmp	r3, #0
 80078ca:	d001      	beq.n	80078d0 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 80078cc:	f7f9 f970 	bl	8000bb0 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 80078d0:	4806      	ldr	r0, [pc, #24]	; (80078ec <USBH_LL_Init+0x74>)
 80078d2:	f7fa fa9a 	bl	8001e0a <HAL_HCD_GetCurrentFrame>
 80078d6:	4603      	mov	r3, r0
 80078d8:	4619      	mov	r1, r3
 80078da:	6878      	ldr	r0, [r7, #4]
 80078dc:	f7fe ff60 	bl	80067a0 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 80078e0:	2300      	movs	r3, #0
}
 80078e2:	4618      	mov	r0, r3
 80078e4:	3708      	adds	r7, #8
 80078e6:	46bd      	mov	sp, r7
 80078e8:	bd80      	pop	{r7, pc}
 80078ea:	bf00      	nop
 80078ec:	20000584 	.word	0x20000584

080078f0 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 80078f0:	b580      	push	{r7, lr}
 80078f2:	b084      	sub	sp, #16
 80078f4:	af00      	add	r7, sp, #0
 80078f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80078f8:	2300      	movs	r3, #0
 80078fa:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80078fc:	2300      	movs	r3, #0
 80078fe:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8007906:	4618      	mov	r0, r3
 8007908:	f7fa fa09 	bl	8001d1e <HAL_HCD_Start>
 800790c:	4603      	mov	r3, r0
 800790e:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8007910:	7bfb      	ldrb	r3, [r7, #15]
 8007912:	4618      	mov	r0, r3
 8007914:	f000 f95c 	bl	8007bd0 <USBH_Get_USB_Status>
 8007918:	4603      	mov	r3, r0
 800791a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800791c:	7bbb      	ldrb	r3, [r7, #14]
}
 800791e:	4618      	mov	r0, r3
 8007920:	3710      	adds	r7, #16
 8007922:	46bd      	mov	sp, r7
 8007924:	bd80      	pop	{r7, pc}

08007926 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 8007926:	b580      	push	{r7, lr}
 8007928:	b084      	sub	sp, #16
 800792a:	af00      	add	r7, sp, #0
 800792c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800792e:	2300      	movs	r3, #0
 8007930:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8007932:	2300      	movs	r3, #0
 8007934:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800793c:	4618      	mov	r0, r3
 800793e:	f7fa fa11 	bl	8001d64 <HAL_HCD_Stop>
 8007942:	4603      	mov	r3, r0
 8007944:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8007946:	7bfb      	ldrb	r3, [r7, #15]
 8007948:	4618      	mov	r0, r3
 800794a:	f000 f941 	bl	8007bd0 <USBH_Get_USB_Status>
 800794e:	4603      	mov	r3, r0
 8007950:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007952:	7bbb      	ldrb	r3, [r7, #14]
}
 8007954:	4618      	mov	r0, r3
 8007956:	3710      	adds	r7, #16
 8007958:	46bd      	mov	sp, r7
 800795a:	bd80      	pop	{r7, pc}

0800795c <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800795c:	b580      	push	{r7, lr}
 800795e:	b084      	sub	sp, #16
 8007960:	af00      	add	r7, sp, #0
 8007962:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 8007964:	2301      	movs	r3, #1
 8007966:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800796e:	4618      	mov	r0, r3
 8007970:	f7fa fa59 	bl	8001e26 <HAL_HCD_GetCurrentSpeed>
 8007974:	4603      	mov	r3, r0
 8007976:	2b02      	cmp	r3, #2
 8007978:	d00c      	beq.n	8007994 <USBH_LL_GetSpeed+0x38>
 800797a:	2b02      	cmp	r3, #2
 800797c:	d80d      	bhi.n	800799a <USBH_LL_GetSpeed+0x3e>
 800797e:	2b00      	cmp	r3, #0
 8007980:	d002      	beq.n	8007988 <USBH_LL_GetSpeed+0x2c>
 8007982:	2b01      	cmp	r3, #1
 8007984:	d003      	beq.n	800798e <USBH_LL_GetSpeed+0x32>
 8007986:	e008      	b.n	800799a <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 8007988:	2300      	movs	r3, #0
 800798a:	73fb      	strb	r3, [r7, #15]
    break;
 800798c:	e008      	b.n	80079a0 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 800798e:	2301      	movs	r3, #1
 8007990:	73fb      	strb	r3, [r7, #15]
    break;
 8007992:	e005      	b.n	80079a0 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 8007994:	2302      	movs	r3, #2
 8007996:	73fb      	strb	r3, [r7, #15]
    break;
 8007998:	e002      	b.n	80079a0 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 800799a:	2301      	movs	r3, #1
 800799c:	73fb      	strb	r3, [r7, #15]
    break;
 800799e:	bf00      	nop
  }
  return  speed;
 80079a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80079a2:	4618      	mov	r0, r3
 80079a4:	3710      	adds	r7, #16
 80079a6:	46bd      	mov	sp, r7
 80079a8:	bd80      	pop	{r7, pc}

080079aa <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 80079aa:	b580      	push	{r7, lr}
 80079ac:	b084      	sub	sp, #16
 80079ae:	af00      	add	r7, sp, #0
 80079b0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80079b2:	2300      	movs	r3, #0
 80079b4:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80079b6:	2300      	movs	r3, #0
 80079b8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80079c0:	4618      	mov	r0, r3
 80079c2:	f7fa f9ec 	bl	8001d9e <HAL_HCD_ResetPort>
 80079c6:	4603      	mov	r3, r0
 80079c8:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80079ca:	7bfb      	ldrb	r3, [r7, #15]
 80079cc:	4618      	mov	r0, r3
 80079ce:	f000 f8ff 	bl	8007bd0 <USBH_Get_USB_Status>
 80079d2:	4603      	mov	r3, r0
 80079d4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80079d6:	7bbb      	ldrb	r3, [r7, #14]
}
 80079d8:	4618      	mov	r0, r3
 80079da:	3710      	adds	r7, #16
 80079dc:	46bd      	mov	sp, r7
 80079de:	bd80      	pop	{r7, pc}

080079e0 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80079e0:	b580      	push	{r7, lr}
 80079e2:	b082      	sub	sp, #8
 80079e4:	af00      	add	r7, sp, #0
 80079e6:	6078      	str	r0, [r7, #4]
 80079e8:	460b      	mov	r3, r1
 80079ea:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80079f2:	78fa      	ldrb	r2, [r7, #3]
 80079f4:	4611      	mov	r1, r2
 80079f6:	4618      	mov	r0, r3
 80079f8:	f7fa f9f3 	bl	8001de2 <HAL_HCD_HC_GetXferCount>
 80079fc:	4603      	mov	r3, r0
}
 80079fe:	4618      	mov	r0, r3
 8007a00:	3708      	adds	r7, #8
 8007a02:	46bd      	mov	sp, r7
 8007a04:	bd80      	pop	{r7, pc}

08007a06 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8007a06:	b590      	push	{r4, r7, lr}
 8007a08:	b089      	sub	sp, #36	; 0x24
 8007a0a:	af04      	add	r7, sp, #16
 8007a0c:	6078      	str	r0, [r7, #4]
 8007a0e:	4608      	mov	r0, r1
 8007a10:	4611      	mov	r1, r2
 8007a12:	461a      	mov	r2, r3
 8007a14:	4603      	mov	r3, r0
 8007a16:	70fb      	strb	r3, [r7, #3]
 8007a18:	460b      	mov	r3, r1
 8007a1a:	70bb      	strb	r3, [r7, #2]
 8007a1c:	4613      	mov	r3, r2
 8007a1e:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007a20:	2300      	movs	r3, #0
 8007a22:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8007a24:	2300      	movs	r3, #0
 8007a26:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8007a2e:	787c      	ldrb	r4, [r7, #1]
 8007a30:	78ba      	ldrb	r2, [r7, #2]
 8007a32:	78f9      	ldrb	r1, [r7, #3]
 8007a34:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8007a36:	9302      	str	r3, [sp, #8]
 8007a38:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8007a3c:	9301      	str	r3, [sp, #4]
 8007a3e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8007a42:	9300      	str	r3, [sp, #0]
 8007a44:	4623      	mov	r3, r4
 8007a46:	f7f9 fe56 	bl	80016f6 <HAL_HCD_HC_Init>
 8007a4a:	4603      	mov	r3, r0
 8007a4c:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 8007a4e:	7bfb      	ldrb	r3, [r7, #15]
 8007a50:	4618      	mov	r0, r3
 8007a52:	f000 f8bd 	bl	8007bd0 <USBH_Get_USB_Status>
 8007a56:	4603      	mov	r3, r0
 8007a58:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007a5a:	7bbb      	ldrb	r3, [r7, #14]
}
 8007a5c:	4618      	mov	r0, r3
 8007a5e:	3714      	adds	r7, #20
 8007a60:	46bd      	mov	sp, r7
 8007a62:	bd90      	pop	{r4, r7, pc}

08007a64 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8007a64:	b580      	push	{r7, lr}
 8007a66:	b084      	sub	sp, #16
 8007a68:	af00      	add	r7, sp, #0
 8007a6a:	6078      	str	r0, [r7, #4]
 8007a6c:	460b      	mov	r3, r1
 8007a6e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007a70:	2300      	movs	r3, #0
 8007a72:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8007a74:	2300      	movs	r3, #0
 8007a76:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8007a7e:	78fa      	ldrb	r2, [r7, #3]
 8007a80:	4611      	mov	r1, r2
 8007a82:	4618      	mov	r0, r3
 8007a84:	f7f9 fec6 	bl	8001814 <HAL_HCD_HC_Halt>
 8007a88:	4603      	mov	r3, r0
 8007a8a:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8007a8c:	7bfb      	ldrb	r3, [r7, #15]
 8007a8e:	4618      	mov	r0, r3
 8007a90:	f000 f89e 	bl	8007bd0 <USBH_Get_USB_Status>
 8007a94:	4603      	mov	r3, r0
 8007a96:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007a98:	7bbb      	ldrb	r3, [r7, #14]
}
 8007a9a:	4618      	mov	r0, r3
 8007a9c:	3710      	adds	r7, #16
 8007a9e:	46bd      	mov	sp, r7
 8007aa0:	bd80      	pop	{r7, pc}

08007aa2 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 8007aa2:	b590      	push	{r4, r7, lr}
 8007aa4:	b089      	sub	sp, #36	; 0x24
 8007aa6:	af04      	add	r7, sp, #16
 8007aa8:	6078      	str	r0, [r7, #4]
 8007aaa:	4608      	mov	r0, r1
 8007aac:	4611      	mov	r1, r2
 8007aae:	461a      	mov	r2, r3
 8007ab0:	4603      	mov	r3, r0
 8007ab2:	70fb      	strb	r3, [r7, #3]
 8007ab4:	460b      	mov	r3, r1
 8007ab6:	70bb      	strb	r3, [r7, #2]
 8007ab8:	4613      	mov	r3, r2
 8007aba:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007abc:	2300      	movs	r3, #0
 8007abe:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8007ac0:	2300      	movs	r3, #0
 8007ac2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8007aca:	787c      	ldrb	r4, [r7, #1]
 8007acc:	78ba      	ldrb	r2, [r7, #2]
 8007ace:	78f9      	ldrb	r1, [r7, #3]
 8007ad0:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8007ad4:	9303      	str	r3, [sp, #12]
 8007ad6:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8007ad8:	9302      	str	r3, [sp, #8]
 8007ada:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007adc:	9301      	str	r3, [sp, #4]
 8007ade:	f897 3020 	ldrb.w	r3, [r7, #32]
 8007ae2:	9300      	str	r3, [sp, #0]
 8007ae4:	4623      	mov	r3, r4
 8007ae6:	f7f9 feb9 	bl	800185c <HAL_HCD_HC_SubmitRequest>
 8007aea:	4603      	mov	r3, r0
 8007aec:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 8007aee:	7bfb      	ldrb	r3, [r7, #15]
 8007af0:	4618      	mov	r0, r3
 8007af2:	f000 f86d 	bl	8007bd0 <USBH_Get_USB_Status>
 8007af6:	4603      	mov	r3, r0
 8007af8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007afa:	7bbb      	ldrb	r3, [r7, #14]
}
 8007afc:	4618      	mov	r0, r3
 8007afe:	3714      	adds	r7, #20
 8007b00:	46bd      	mov	sp, r7
 8007b02:	bd90      	pop	{r4, r7, pc}

08007b04 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8007b04:	b580      	push	{r7, lr}
 8007b06:	b082      	sub	sp, #8
 8007b08:	af00      	add	r7, sp, #0
 8007b0a:	6078      	str	r0, [r7, #4]
 8007b0c:	460b      	mov	r3, r1
 8007b0e:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8007b16:	78fa      	ldrb	r2, [r7, #3]
 8007b18:	4611      	mov	r1, r2
 8007b1a:	4618      	mov	r0, r3
 8007b1c:	f7fa f94d 	bl	8001dba <HAL_HCD_HC_GetURBState>
 8007b20:	4603      	mov	r3, r0
}
 8007b22:	4618      	mov	r0, r3
 8007b24:	3708      	adds	r7, #8
 8007b26:	46bd      	mov	sp, r7
 8007b28:	bd80      	pop	{r7, pc}

08007b2a <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 8007b2a:	b580      	push	{r7, lr}
 8007b2c:	b082      	sub	sp, #8
 8007b2e:	af00      	add	r7, sp, #0
 8007b30:	6078      	str	r0, [r7, #4]
 8007b32:	460b      	mov	r3, r1
 8007b34:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8007b3c:	2b01      	cmp	r3, #1
 8007b3e:	d103      	bne.n	8007b48 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 8007b40:	78fb      	ldrb	r3, [r7, #3]
 8007b42:	4618      	mov	r0, r3
 8007b44:	f000 f870 	bl	8007c28 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 8007b48:	20c8      	movs	r0, #200	; 0xc8
 8007b4a:	f7f9 fa87 	bl	800105c <HAL_Delay>
  return USBH_OK;
 8007b4e:	2300      	movs	r3, #0
}
 8007b50:	4618      	mov	r0, r3
 8007b52:	3708      	adds	r7, #8
 8007b54:	46bd      	mov	sp, r7
 8007b56:	bd80      	pop	{r7, pc}

08007b58 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 8007b58:	b480      	push	{r7}
 8007b5a:	b085      	sub	sp, #20
 8007b5c:	af00      	add	r7, sp, #0
 8007b5e:	6078      	str	r0, [r7, #4]
 8007b60:	460b      	mov	r3, r1
 8007b62:	70fb      	strb	r3, [r7, #3]
 8007b64:	4613      	mov	r3, r2
 8007b66:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8007b6e:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 8007b70:	78fb      	ldrb	r3, [r7, #3]
 8007b72:	68fa      	ldr	r2, [r7, #12]
 8007b74:	212c      	movs	r1, #44	; 0x2c
 8007b76:	fb01 f303 	mul.w	r3, r1, r3
 8007b7a:	4413      	add	r3, r2
 8007b7c:	333b      	adds	r3, #59	; 0x3b
 8007b7e:	781b      	ldrb	r3, [r3, #0]
 8007b80:	2b00      	cmp	r3, #0
 8007b82:	d009      	beq.n	8007b98 <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 8007b84:	78fb      	ldrb	r3, [r7, #3]
 8007b86:	68fa      	ldr	r2, [r7, #12]
 8007b88:	212c      	movs	r1, #44	; 0x2c
 8007b8a:	fb01 f303 	mul.w	r3, r1, r3
 8007b8e:	4413      	add	r3, r2
 8007b90:	3354      	adds	r3, #84	; 0x54
 8007b92:	78ba      	ldrb	r2, [r7, #2]
 8007b94:	701a      	strb	r2, [r3, #0]
 8007b96:	e008      	b.n	8007baa <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 8007b98:	78fb      	ldrb	r3, [r7, #3]
 8007b9a:	68fa      	ldr	r2, [r7, #12]
 8007b9c:	212c      	movs	r1, #44	; 0x2c
 8007b9e:	fb01 f303 	mul.w	r3, r1, r3
 8007ba2:	4413      	add	r3, r2
 8007ba4:	3355      	adds	r3, #85	; 0x55
 8007ba6:	78ba      	ldrb	r2, [r7, #2]
 8007ba8:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 8007baa:	2300      	movs	r3, #0
}
 8007bac:	4618      	mov	r0, r3
 8007bae:	3714      	adds	r7, #20
 8007bb0:	46bd      	mov	sp, r7
 8007bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bb6:	4770      	bx	lr

08007bb8 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 8007bb8:	b580      	push	{r7, lr}
 8007bba:	b082      	sub	sp, #8
 8007bbc:	af00      	add	r7, sp, #0
 8007bbe:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8007bc0:	6878      	ldr	r0, [r7, #4]
 8007bc2:	f7f9 fa4b 	bl	800105c <HAL_Delay>
}
 8007bc6:	bf00      	nop
 8007bc8:	3708      	adds	r7, #8
 8007bca:	46bd      	mov	sp, r7
 8007bcc:	bd80      	pop	{r7, pc}
	...

08007bd0 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8007bd0:	b480      	push	{r7}
 8007bd2:	b085      	sub	sp, #20
 8007bd4:	af00      	add	r7, sp, #0
 8007bd6:	4603      	mov	r3, r0
 8007bd8:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8007bda:	2300      	movs	r3, #0
 8007bdc:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8007bde:	79fb      	ldrb	r3, [r7, #7]
 8007be0:	2b03      	cmp	r3, #3
 8007be2:	d817      	bhi.n	8007c14 <USBH_Get_USB_Status+0x44>
 8007be4:	a201      	add	r2, pc, #4	; (adr r2, 8007bec <USBH_Get_USB_Status+0x1c>)
 8007be6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007bea:	bf00      	nop
 8007bec:	08007bfd 	.word	0x08007bfd
 8007bf0:	08007c03 	.word	0x08007c03
 8007bf4:	08007c09 	.word	0x08007c09
 8007bf8:	08007c0f 	.word	0x08007c0f
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8007bfc:	2300      	movs	r3, #0
 8007bfe:	73fb      	strb	r3, [r7, #15]
    break;
 8007c00:	e00b      	b.n	8007c1a <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8007c02:	2302      	movs	r3, #2
 8007c04:	73fb      	strb	r3, [r7, #15]
    break;
 8007c06:	e008      	b.n	8007c1a <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8007c08:	2301      	movs	r3, #1
 8007c0a:	73fb      	strb	r3, [r7, #15]
    break;
 8007c0c:	e005      	b.n	8007c1a <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 8007c0e:	2302      	movs	r3, #2
 8007c10:	73fb      	strb	r3, [r7, #15]
    break;
 8007c12:	e002      	b.n	8007c1a <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8007c14:	2302      	movs	r3, #2
 8007c16:	73fb      	strb	r3, [r7, #15]
    break;
 8007c18:	bf00      	nop
  }
  return usb_status;
 8007c1a:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c1c:	4618      	mov	r0, r3
 8007c1e:	3714      	adds	r7, #20
 8007c20:	46bd      	mov	sp, r7
 8007c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c26:	4770      	bx	lr

08007c28 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 8007c28:	b580      	push	{r7, lr}
 8007c2a:	b084      	sub	sp, #16
 8007c2c:	af00      	add	r7, sp, #0
 8007c2e:	4603      	mov	r3, r0
 8007c30:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 8007c32:	79fb      	ldrb	r3, [r7, #7]
 8007c34:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 8007c36:	79fb      	ldrb	r3, [r7, #7]
 8007c38:	2b00      	cmp	r3, #0
 8007c3a:	d102      	bne.n	8007c42 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 8007c3c:	2300      	movs	r3, #0
 8007c3e:	73fb      	strb	r3, [r7, #15]
 8007c40:	e001      	b.n	8007c46 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 8007c42:	2301      	movs	r3, #1
 8007c44:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 8007c46:	7bfb      	ldrb	r3, [r7, #15]
 8007c48:	461a      	mov	r2, r3
 8007c4a:	2101      	movs	r1, #1
 8007c4c:	4803      	ldr	r0, [pc, #12]	; (8007c5c <MX_DriverVbusFS+0x34>)
 8007c4e:	f7f9 fcd7 	bl	8001600 <HAL_GPIO_WritePin>
}
 8007c52:	bf00      	nop
 8007c54:	3710      	adds	r7, #16
 8007c56:	46bd      	mov	sp, r7
 8007c58:	bd80      	pop	{r7, pc}
 8007c5a:	bf00      	nop
 8007c5c:	40020800 	.word	0x40020800

08007c60 <__errno>:
 8007c60:	4b01      	ldr	r3, [pc, #4]	; (8007c68 <__errno+0x8>)
 8007c62:	6818      	ldr	r0, [r3, #0]
 8007c64:	4770      	bx	lr
 8007c66:	bf00      	nop
 8007c68:	2000002c 	.word	0x2000002c

08007c6c <__libc_init_array>:
 8007c6c:	b570      	push	{r4, r5, r6, lr}
 8007c6e:	4d0d      	ldr	r5, [pc, #52]	; (8007ca4 <__libc_init_array+0x38>)
 8007c70:	4c0d      	ldr	r4, [pc, #52]	; (8007ca8 <__libc_init_array+0x3c>)
 8007c72:	1b64      	subs	r4, r4, r5
 8007c74:	10a4      	asrs	r4, r4, #2
 8007c76:	2600      	movs	r6, #0
 8007c78:	42a6      	cmp	r6, r4
 8007c7a:	d109      	bne.n	8007c90 <__libc_init_array+0x24>
 8007c7c:	4d0b      	ldr	r5, [pc, #44]	; (8007cac <__libc_init_array+0x40>)
 8007c7e:	4c0c      	ldr	r4, [pc, #48]	; (8007cb0 <__libc_init_array+0x44>)
 8007c80:	f000 f92e 	bl	8007ee0 <_init>
 8007c84:	1b64      	subs	r4, r4, r5
 8007c86:	10a4      	asrs	r4, r4, #2
 8007c88:	2600      	movs	r6, #0
 8007c8a:	42a6      	cmp	r6, r4
 8007c8c:	d105      	bne.n	8007c9a <__libc_init_array+0x2e>
 8007c8e:	bd70      	pop	{r4, r5, r6, pc}
 8007c90:	f855 3b04 	ldr.w	r3, [r5], #4
 8007c94:	4798      	blx	r3
 8007c96:	3601      	adds	r6, #1
 8007c98:	e7ee      	b.n	8007c78 <__libc_init_array+0xc>
 8007c9a:	f855 3b04 	ldr.w	r3, [r5], #4
 8007c9e:	4798      	blx	r3
 8007ca0:	3601      	adds	r6, #1
 8007ca2:	e7f2      	b.n	8007c8a <__libc_init_array+0x1e>
 8007ca4:	08007f24 	.word	0x08007f24
 8007ca8:	08007f24 	.word	0x08007f24
 8007cac:	08007f24 	.word	0x08007f24
 8007cb0:	08007f28 	.word	0x08007f28

08007cb4 <malloc>:
 8007cb4:	4b02      	ldr	r3, [pc, #8]	; (8007cc0 <malloc+0xc>)
 8007cb6:	4601      	mov	r1, r0
 8007cb8:	6818      	ldr	r0, [r3, #0]
 8007cba:	f000 b87f 	b.w	8007dbc <_malloc_r>
 8007cbe:	bf00      	nop
 8007cc0:	2000002c 	.word	0x2000002c

08007cc4 <free>:
 8007cc4:	4b02      	ldr	r3, [pc, #8]	; (8007cd0 <free+0xc>)
 8007cc6:	4601      	mov	r1, r0
 8007cc8:	6818      	ldr	r0, [r3, #0]
 8007cca:	f000 b80b 	b.w	8007ce4 <_free_r>
 8007cce:	bf00      	nop
 8007cd0:	2000002c 	.word	0x2000002c

08007cd4 <memset>:
 8007cd4:	4402      	add	r2, r0
 8007cd6:	4603      	mov	r3, r0
 8007cd8:	4293      	cmp	r3, r2
 8007cda:	d100      	bne.n	8007cde <memset+0xa>
 8007cdc:	4770      	bx	lr
 8007cde:	f803 1b01 	strb.w	r1, [r3], #1
 8007ce2:	e7f9      	b.n	8007cd8 <memset+0x4>

08007ce4 <_free_r>:
 8007ce4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007ce6:	2900      	cmp	r1, #0
 8007ce8:	d044      	beq.n	8007d74 <_free_r+0x90>
 8007cea:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007cee:	9001      	str	r0, [sp, #4]
 8007cf0:	2b00      	cmp	r3, #0
 8007cf2:	f1a1 0404 	sub.w	r4, r1, #4
 8007cf6:	bfb8      	it	lt
 8007cf8:	18e4      	addlt	r4, r4, r3
 8007cfa:	f000 f8e3 	bl	8007ec4 <__malloc_lock>
 8007cfe:	4a1e      	ldr	r2, [pc, #120]	; (8007d78 <_free_r+0x94>)
 8007d00:	9801      	ldr	r0, [sp, #4]
 8007d02:	6813      	ldr	r3, [r2, #0]
 8007d04:	b933      	cbnz	r3, 8007d14 <_free_r+0x30>
 8007d06:	6063      	str	r3, [r4, #4]
 8007d08:	6014      	str	r4, [r2, #0]
 8007d0a:	b003      	add	sp, #12
 8007d0c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007d10:	f000 b8de 	b.w	8007ed0 <__malloc_unlock>
 8007d14:	42a3      	cmp	r3, r4
 8007d16:	d908      	bls.n	8007d2a <_free_r+0x46>
 8007d18:	6825      	ldr	r5, [r4, #0]
 8007d1a:	1961      	adds	r1, r4, r5
 8007d1c:	428b      	cmp	r3, r1
 8007d1e:	bf01      	itttt	eq
 8007d20:	6819      	ldreq	r1, [r3, #0]
 8007d22:	685b      	ldreq	r3, [r3, #4]
 8007d24:	1949      	addeq	r1, r1, r5
 8007d26:	6021      	streq	r1, [r4, #0]
 8007d28:	e7ed      	b.n	8007d06 <_free_r+0x22>
 8007d2a:	461a      	mov	r2, r3
 8007d2c:	685b      	ldr	r3, [r3, #4]
 8007d2e:	b10b      	cbz	r3, 8007d34 <_free_r+0x50>
 8007d30:	42a3      	cmp	r3, r4
 8007d32:	d9fa      	bls.n	8007d2a <_free_r+0x46>
 8007d34:	6811      	ldr	r1, [r2, #0]
 8007d36:	1855      	adds	r5, r2, r1
 8007d38:	42a5      	cmp	r5, r4
 8007d3a:	d10b      	bne.n	8007d54 <_free_r+0x70>
 8007d3c:	6824      	ldr	r4, [r4, #0]
 8007d3e:	4421      	add	r1, r4
 8007d40:	1854      	adds	r4, r2, r1
 8007d42:	42a3      	cmp	r3, r4
 8007d44:	6011      	str	r1, [r2, #0]
 8007d46:	d1e0      	bne.n	8007d0a <_free_r+0x26>
 8007d48:	681c      	ldr	r4, [r3, #0]
 8007d4a:	685b      	ldr	r3, [r3, #4]
 8007d4c:	6053      	str	r3, [r2, #4]
 8007d4e:	4421      	add	r1, r4
 8007d50:	6011      	str	r1, [r2, #0]
 8007d52:	e7da      	b.n	8007d0a <_free_r+0x26>
 8007d54:	d902      	bls.n	8007d5c <_free_r+0x78>
 8007d56:	230c      	movs	r3, #12
 8007d58:	6003      	str	r3, [r0, #0]
 8007d5a:	e7d6      	b.n	8007d0a <_free_r+0x26>
 8007d5c:	6825      	ldr	r5, [r4, #0]
 8007d5e:	1961      	adds	r1, r4, r5
 8007d60:	428b      	cmp	r3, r1
 8007d62:	bf04      	itt	eq
 8007d64:	6819      	ldreq	r1, [r3, #0]
 8007d66:	685b      	ldreq	r3, [r3, #4]
 8007d68:	6063      	str	r3, [r4, #4]
 8007d6a:	bf04      	itt	eq
 8007d6c:	1949      	addeq	r1, r1, r5
 8007d6e:	6021      	streq	r1, [r4, #0]
 8007d70:	6054      	str	r4, [r2, #4]
 8007d72:	e7ca      	b.n	8007d0a <_free_r+0x26>
 8007d74:	b003      	add	sp, #12
 8007d76:	bd30      	pop	{r4, r5, pc}
 8007d78:	20000888 	.word	0x20000888

08007d7c <sbrk_aligned>:
 8007d7c:	b570      	push	{r4, r5, r6, lr}
 8007d7e:	4e0e      	ldr	r6, [pc, #56]	; (8007db8 <sbrk_aligned+0x3c>)
 8007d80:	460c      	mov	r4, r1
 8007d82:	6831      	ldr	r1, [r6, #0]
 8007d84:	4605      	mov	r5, r0
 8007d86:	b911      	cbnz	r1, 8007d8e <sbrk_aligned+0x12>
 8007d88:	f000 f88c 	bl	8007ea4 <_sbrk_r>
 8007d8c:	6030      	str	r0, [r6, #0]
 8007d8e:	4621      	mov	r1, r4
 8007d90:	4628      	mov	r0, r5
 8007d92:	f000 f887 	bl	8007ea4 <_sbrk_r>
 8007d96:	1c43      	adds	r3, r0, #1
 8007d98:	d00a      	beq.n	8007db0 <sbrk_aligned+0x34>
 8007d9a:	1cc4      	adds	r4, r0, #3
 8007d9c:	f024 0403 	bic.w	r4, r4, #3
 8007da0:	42a0      	cmp	r0, r4
 8007da2:	d007      	beq.n	8007db4 <sbrk_aligned+0x38>
 8007da4:	1a21      	subs	r1, r4, r0
 8007da6:	4628      	mov	r0, r5
 8007da8:	f000 f87c 	bl	8007ea4 <_sbrk_r>
 8007dac:	3001      	adds	r0, #1
 8007dae:	d101      	bne.n	8007db4 <sbrk_aligned+0x38>
 8007db0:	f04f 34ff 	mov.w	r4, #4294967295
 8007db4:	4620      	mov	r0, r4
 8007db6:	bd70      	pop	{r4, r5, r6, pc}
 8007db8:	2000088c 	.word	0x2000088c

08007dbc <_malloc_r>:
 8007dbc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007dc0:	1ccd      	adds	r5, r1, #3
 8007dc2:	f025 0503 	bic.w	r5, r5, #3
 8007dc6:	3508      	adds	r5, #8
 8007dc8:	2d0c      	cmp	r5, #12
 8007dca:	bf38      	it	cc
 8007dcc:	250c      	movcc	r5, #12
 8007dce:	2d00      	cmp	r5, #0
 8007dd0:	4607      	mov	r7, r0
 8007dd2:	db01      	blt.n	8007dd8 <_malloc_r+0x1c>
 8007dd4:	42a9      	cmp	r1, r5
 8007dd6:	d905      	bls.n	8007de4 <_malloc_r+0x28>
 8007dd8:	230c      	movs	r3, #12
 8007dda:	603b      	str	r3, [r7, #0]
 8007ddc:	2600      	movs	r6, #0
 8007dde:	4630      	mov	r0, r6
 8007de0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007de4:	4e2e      	ldr	r6, [pc, #184]	; (8007ea0 <_malloc_r+0xe4>)
 8007de6:	f000 f86d 	bl	8007ec4 <__malloc_lock>
 8007dea:	6833      	ldr	r3, [r6, #0]
 8007dec:	461c      	mov	r4, r3
 8007dee:	bb34      	cbnz	r4, 8007e3e <_malloc_r+0x82>
 8007df0:	4629      	mov	r1, r5
 8007df2:	4638      	mov	r0, r7
 8007df4:	f7ff ffc2 	bl	8007d7c <sbrk_aligned>
 8007df8:	1c43      	adds	r3, r0, #1
 8007dfa:	4604      	mov	r4, r0
 8007dfc:	d14d      	bne.n	8007e9a <_malloc_r+0xde>
 8007dfe:	6834      	ldr	r4, [r6, #0]
 8007e00:	4626      	mov	r6, r4
 8007e02:	2e00      	cmp	r6, #0
 8007e04:	d140      	bne.n	8007e88 <_malloc_r+0xcc>
 8007e06:	6823      	ldr	r3, [r4, #0]
 8007e08:	4631      	mov	r1, r6
 8007e0a:	4638      	mov	r0, r7
 8007e0c:	eb04 0803 	add.w	r8, r4, r3
 8007e10:	f000 f848 	bl	8007ea4 <_sbrk_r>
 8007e14:	4580      	cmp	r8, r0
 8007e16:	d13a      	bne.n	8007e8e <_malloc_r+0xd2>
 8007e18:	6821      	ldr	r1, [r4, #0]
 8007e1a:	3503      	adds	r5, #3
 8007e1c:	1a6d      	subs	r5, r5, r1
 8007e1e:	f025 0503 	bic.w	r5, r5, #3
 8007e22:	3508      	adds	r5, #8
 8007e24:	2d0c      	cmp	r5, #12
 8007e26:	bf38      	it	cc
 8007e28:	250c      	movcc	r5, #12
 8007e2a:	4629      	mov	r1, r5
 8007e2c:	4638      	mov	r0, r7
 8007e2e:	f7ff ffa5 	bl	8007d7c <sbrk_aligned>
 8007e32:	3001      	adds	r0, #1
 8007e34:	d02b      	beq.n	8007e8e <_malloc_r+0xd2>
 8007e36:	6823      	ldr	r3, [r4, #0]
 8007e38:	442b      	add	r3, r5
 8007e3a:	6023      	str	r3, [r4, #0]
 8007e3c:	e00e      	b.n	8007e5c <_malloc_r+0xa0>
 8007e3e:	6822      	ldr	r2, [r4, #0]
 8007e40:	1b52      	subs	r2, r2, r5
 8007e42:	d41e      	bmi.n	8007e82 <_malloc_r+0xc6>
 8007e44:	2a0b      	cmp	r2, #11
 8007e46:	d916      	bls.n	8007e76 <_malloc_r+0xba>
 8007e48:	1961      	adds	r1, r4, r5
 8007e4a:	42a3      	cmp	r3, r4
 8007e4c:	6025      	str	r5, [r4, #0]
 8007e4e:	bf18      	it	ne
 8007e50:	6059      	strne	r1, [r3, #4]
 8007e52:	6863      	ldr	r3, [r4, #4]
 8007e54:	bf08      	it	eq
 8007e56:	6031      	streq	r1, [r6, #0]
 8007e58:	5162      	str	r2, [r4, r5]
 8007e5a:	604b      	str	r3, [r1, #4]
 8007e5c:	4638      	mov	r0, r7
 8007e5e:	f104 060b 	add.w	r6, r4, #11
 8007e62:	f000 f835 	bl	8007ed0 <__malloc_unlock>
 8007e66:	f026 0607 	bic.w	r6, r6, #7
 8007e6a:	1d23      	adds	r3, r4, #4
 8007e6c:	1af2      	subs	r2, r6, r3
 8007e6e:	d0b6      	beq.n	8007dde <_malloc_r+0x22>
 8007e70:	1b9b      	subs	r3, r3, r6
 8007e72:	50a3      	str	r3, [r4, r2]
 8007e74:	e7b3      	b.n	8007dde <_malloc_r+0x22>
 8007e76:	6862      	ldr	r2, [r4, #4]
 8007e78:	42a3      	cmp	r3, r4
 8007e7a:	bf0c      	ite	eq
 8007e7c:	6032      	streq	r2, [r6, #0]
 8007e7e:	605a      	strne	r2, [r3, #4]
 8007e80:	e7ec      	b.n	8007e5c <_malloc_r+0xa0>
 8007e82:	4623      	mov	r3, r4
 8007e84:	6864      	ldr	r4, [r4, #4]
 8007e86:	e7b2      	b.n	8007dee <_malloc_r+0x32>
 8007e88:	4634      	mov	r4, r6
 8007e8a:	6876      	ldr	r6, [r6, #4]
 8007e8c:	e7b9      	b.n	8007e02 <_malloc_r+0x46>
 8007e8e:	230c      	movs	r3, #12
 8007e90:	603b      	str	r3, [r7, #0]
 8007e92:	4638      	mov	r0, r7
 8007e94:	f000 f81c 	bl	8007ed0 <__malloc_unlock>
 8007e98:	e7a1      	b.n	8007dde <_malloc_r+0x22>
 8007e9a:	6025      	str	r5, [r4, #0]
 8007e9c:	e7de      	b.n	8007e5c <_malloc_r+0xa0>
 8007e9e:	bf00      	nop
 8007ea0:	20000888 	.word	0x20000888

08007ea4 <_sbrk_r>:
 8007ea4:	b538      	push	{r3, r4, r5, lr}
 8007ea6:	4d06      	ldr	r5, [pc, #24]	; (8007ec0 <_sbrk_r+0x1c>)
 8007ea8:	2300      	movs	r3, #0
 8007eaa:	4604      	mov	r4, r0
 8007eac:	4608      	mov	r0, r1
 8007eae:	602b      	str	r3, [r5, #0]
 8007eb0:	f7f8 fff0 	bl	8000e94 <_sbrk>
 8007eb4:	1c43      	adds	r3, r0, #1
 8007eb6:	d102      	bne.n	8007ebe <_sbrk_r+0x1a>
 8007eb8:	682b      	ldr	r3, [r5, #0]
 8007eba:	b103      	cbz	r3, 8007ebe <_sbrk_r+0x1a>
 8007ebc:	6023      	str	r3, [r4, #0]
 8007ebe:	bd38      	pop	{r3, r4, r5, pc}
 8007ec0:	20000890 	.word	0x20000890

08007ec4 <__malloc_lock>:
 8007ec4:	4801      	ldr	r0, [pc, #4]	; (8007ecc <__malloc_lock+0x8>)
 8007ec6:	f000 b809 	b.w	8007edc <__retarget_lock_acquire_recursive>
 8007eca:	bf00      	nop
 8007ecc:	20000894 	.word	0x20000894

08007ed0 <__malloc_unlock>:
 8007ed0:	4801      	ldr	r0, [pc, #4]	; (8007ed8 <__malloc_unlock+0x8>)
 8007ed2:	f000 b804 	b.w	8007ede <__retarget_lock_release_recursive>
 8007ed6:	bf00      	nop
 8007ed8:	20000894 	.word	0x20000894

08007edc <__retarget_lock_acquire_recursive>:
 8007edc:	4770      	bx	lr

08007ede <__retarget_lock_release_recursive>:
 8007ede:	4770      	bx	lr

08007ee0 <_init>:
 8007ee0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007ee2:	bf00      	nop
 8007ee4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007ee6:	bc08      	pop	{r3}
 8007ee8:	469e      	mov	lr, r3
 8007eea:	4770      	bx	lr

08007eec <_fini>:
 8007eec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007eee:	bf00      	nop
 8007ef0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007ef2:	bc08      	pop	{r3}
 8007ef4:	469e      	mov	lr, r3
 8007ef6:	4770      	bx	lr
